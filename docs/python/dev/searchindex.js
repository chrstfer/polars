Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 104, 134, 152, 202, 271, 285, 495, 685, 720, 819, 870, 1042, 1184], "refer": [0, 40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 161, 285, 381, 384, 493, 494, 538, 583, 612, 613, 614, 617, 720, 745, 783, 831, 930, 933, 1062, 1140, 1141, 1142, 1145, 1184], "input": [0, 78, 84, 106, 114, 115, 156, 180, 183, 202, 212, 228, 229, 232, 236, 250, 260, 261, 264, 285, 292, 330, 403, 424, 487, 494, 495, 504, 527, 572, 608, 609, 610, 611, 640, 642, 644, 645, 647, 650, 653, 654, 655, 662, 671, 672, 679, 680, 681, 683, 684, 685, 687, 691, 699, 702, 704, 710, 720, 732, 737, 757, 760, 788, 789, 790, 792, 796, 801, 807, 808, 812, 831, 875, 969, 1038, 1039, 1041, 1042, 1089, 1184], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 57, 119, 153, 181, 182, 184, 185, 196, 202, 207, 212, 214, 222, 224, 228, 256, 260, 285, 295, 297, 299, 343, 491, 492, 493, 495, 503, 515, 535, 546, 551, 553, 555, 557, 575, 589, 637, 641, 643, 645, 656, 664, 665, 683, 684, 685, 707, 720, 732, 758, 759, 761, 762, 771, 772, 776, 777, 786, 788, 790, 807, 811, 814, 819, 831, 838, 839, 841, 887, 1042, 1060, 1103, 1117, 1172, 1184], "seri": [0, 1, 2, 16, 30, 69, 70, 79, 80, 81, 82, 86, 87, 88, 103, 105, 108, 110, 137, 139, 140, 144, 164, 172, 175, 177, 178, 181, 186, 189, 190, 192, 194, 203, 204, 208, 219, 220, 222, 226, 238, 242, 245, 248, 249, 265, 285, 298, 299, 310, 318, 326, 327, 329, 377, 406, 412, 422, 426, 429, 430, 433, 435, 436, 437, 449, 457, 460, 476, 480, 481, 483, 489, 491, 493, 495, 532, 538, 539, 540, 541, 542, 544, 546, 547, 548, 554, 561, 564, 575, 601, 612, 613, 614, 617, 621, 627, 628, 636, 645, 646, 647, 651, 652, 657, 659, 660, 664, 665, 667, 668, 672, 673, 675, 677, 679, 680, 681, 682, 683, 684, 685, 688, 689, 692, 693, 695, 696, 699, 701, 702, 705, 707, 708, 709, 711, 720, 732, 754, 758, 786, 813, 831, 1176, 1178, 1180, 1183, 1185, 1188, 1189, 1190, 1192], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 84, 85, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 131, 132, 133, 137, 138, 141, 142, 150, 283, 284, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 677, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 716, 720, 732, 742, 743, 746, 750, 751, 755, 758, 766, 767, 768, 769, 771, 772, 776, 777, 781, 785, 795, 796, 802, 803, 804, 807, 808, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 840, 855, 857, 868, 887, 888, 926, 965, 996, 997, 1007, 1042, 1060, 1115, 1131, 1132, 1153, 1161, 1162, 1172, 1184, 1191, 1192], "lazyfram": [0, 1, 63, 64, 66, 68, 78, 79, 80, 81, 82, 84, 85, 86, 128, 129, 130, 131, 132, 133, 134, 137, 138, 144, 200, 213, 214, 229, 261, 285, 324, 409, 483, 720, 732, 830, 834, 1191, 1192], "express": [0, 13, 57, 58, 59, 84, 85, 141, 144, 146, 156, 168, 170, 172, 180, 183, 202, 210, 214, 223, 228, 229, 232, 236, 250, 260, 261, 264, 271, 285, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 309, 310, 315, 318, 320, 321, 322, 324, 330, 333, 334, 335, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 357, 359, 361, 362, 363, 365, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 403, 405, 406, 408, 409, 413, 415, 416, 417, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 439, 442, 447, 448, 450, 451, 452, 456, 457, 462, 464, 482, 483, 489, 490, 492, 493, 494, 495, 499, 500, 501, 502, 503, 504, 506, 508, 510, 512, 514, 515, 516, 517, 518, 519, 522, 523, 524, 526, 527, 531, 532, 533, 534, 535, 537, 541, 542, 544, 559, 560, 561, 563, 565, 567, 568, 570, 572, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 596, 597, 598, 601, 602, 603, 604, 623, 624, 627, 629, 630, 633, 634, 636, 637, 639, 640, 641, 642, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 679, 680, 681, 682, 683, 684, 685, 687, 691, 693, 695, 696, 697, 698, 699, 700, 702, 704, 706, 707, 708, 710, 711, 716, 719, 732, 737, 742, 743, 749, 750, 751, 754, 757, 760, 781, 788, 789, 792, 793, 794, 796, 801, 807, 808, 809, 812, 819, 831, 834, 875, 886, 896, 955, 969, 1002, 1003, 1007, 1042, 1083, 1089, 1090, 1104, 1105, 1106, 1111, 1112, 1113, 1114, 1115, 1125, 1126, 1184], "selector": [0, 40, 157, 163, 165, 168, 206, 212, 214, 244, 252, 254, 285, 403, 720, 732, 739, 746, 747, 750, 776, 802, 831], "extend": [0, 106, 258, 285, 406, 720, 732, 840, 955, 1184], "function": [0, 40, 69, 78, 79, 80, 81, 82, 85, 87, 88, 104, 110, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 137, 138, 139, 140, 142, 152, 153, 161, 167, 175, 202, 206, 213, 214, 247, 251, 254, 255, 266, 271, 285, 295, 299, 342, 378, 400, 401, 402, 483, 491, 492, 493, 495, 515, 527, 531, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 569, 631, 641, 645, 659, 660, 672, 673, 675, 681, 683, 684, 685, 695, 716, 720, 732, 742, 743, 745, 751, 771, 772, 776, 780, 783, 814, 819, 831, 841, 886, 927, 948, 949, 950, 951, 965, 1034, 1042, 1060, 1070, 1071, 1085, 1086, 1092, 1097, 1166, 1184, 1192], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 46, 57, 58, 59, 63, 69, 78, 79, 81, 86, 88, 93, 94, 98, 100, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 137, 138, 139, 140, 142, 143, 144, 146, 152, 159, 169, 179, 180, 181, 182, 183, 184, 185, 196, 197, 198, 200, 202, 212, 213, 217, 222, 223, 224, 225, 234, 241, 246, 247, 251, 260, 263, 283, 285, 295, 296, 297, 301, 302, 303, 304, 305, 306, 309, 312, 313, 314, 315, 316, 318, 320, 321, 322, 325, 326, 330, 333, 334, 335, 343, 344, 349, 350, 353, 354, 355, 357, 359, 361, 362, 363, 365, 367, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 405, 416, 417, 418, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 442, 447, 448, 450, 457, 462, 464, 470, 482, 485, 490, 495, 522, 523, 526, 527, 535, 537, 538, 541, 542, 544, 546, 558, 559, 567, 568, 569, 575, 577, 578, 580, 582, 583, 584, 585, 587, 588, 589, 596, 601, 602, 603, 604, 612, 613, 614, 617, 620, 627, 629, 630, 631, 633, 634, 637, 640, 645, 647, 663, 664, 665, 666, 667, 668, 669, 679, 680, 682, 683, 684, 685, 693, 696, 706, 707, 708, 711, 716, 720, 732, 740, 741, 742, 751, 757, 758, 759, 760, 761, 762, 780, 786, 807, 831, 838, 839, 840, 851, 855, 856, 857, 858, 860, 864, 866, 874, 875, 878, 887, 894, 895, 898, 899, 900, 902, 904, 906, 907, 911, 913, 916, 918, 919, 920, 921, 923, 924, 925, 927, 928, 931, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 953, 954, 965, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 989, 998, 999, 1001, 1008, 1013, 1015, 1021, 1033, 1036, 1042, 1054, 1060, 1062, 1066, 1068, 1081, 1082, 1092, 1097, 1103, 1104, 1105, 1106, 1108, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1124, 1129, 1130, 1131, 1132, 1140, 1141, 1142, 1145, 1148, 1164, 1165, 1166, 1167, 1169, 1174, 1183, 1184, 1191], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 93, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 123, 124, 125, 128, 129, 130, 132, 136, 137, 138, 139, 140, 143, 144, 153, 175, 179, 181, 182, 184, 185, 186, 197, 198, 202, 222, 241, 247, 249, 252, 285, 295, 297, 301, 302, 303, 304, 305, 306, 309, 315, 318, 320, 321, 322, 325, 326, 327, 330, 333, 334, 335, 343, 344, 349, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 403, 405, 417, 419, 424, 425, 426, 427, 428, 429, 430, 431, 432, 447, 448, 450, 457, 462, 464, 482, 483, 494, 495, 535, 537, 541, 542, 544, 546, 567, 568, 575, 577, 578, 580, 582, 583, 584, 585, 587, 588, 589, 596, 601, 602, 603, 604, 612, 627, 629, 630, 631, 637, 645, 647, 663, 664, 665, 666, 667, 668, 669, 671, 672, 679, 680, 681, 682, 683, 684, 685, 693, 696, 706, 707, 708, 711, 716, 720, 732, 742, 743, 749, 751, 758, 759, 761, 762, 766, 781, 786, 794, 802, 831, 838, 839, 851, 856, 858, 860, 864, 866, 868, 875, 887, 894, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 953, 963, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 989, 998, 999, 1001, 1008, 1013, 1015, 1033, 1034, 1054, 1060, 1066, 1068, 1092, 1103, 1104, 1105, 1106, 1108, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1124, 1129, 1130, 1131, 1132, 1140, 1164, 1165, 1167, 1175, 1184, 1191], "config": [0, 78, 228, 260, 285, 669, 732, 742, 788, 807, 831], "except": [0, 137, 187, 199, 201, 239, 285, 671, 732, 767, 831, 834, 964, 994, 1155, 1165, 1174, 1184], "test": [0, 6, 116, 117, 119, 125, 732, 763, 770, 831], "util": [0, 110, 675, 732, 751, 831], "sql": [0, 38, 63, 67, 116, 117, 198, 232, 285, 475, 562, 700, 720, 732, 792, 831, 1026, 1089, 1184], "These": [1, 40, 116, 150, 251, 285, 392, 719, 720, 927, 941], "allow": [1, 13, 39, 40, 57, 58, 59, 69, 88, 93, 104, 116, 128, 131, 132, 133, 134, 144, 146, 152, 196, 199, 200, 223, 224, 226, 246, 247, 252, 263, 285, 374, 381, 384, 470, 493, 495, 540, 559, 612, 613, 614, 720, 766, 767, 771, 772, 776, 802, 809, 831, 834, 923, 930, 933, 1021, 1042, 1064, 1082, 1084, 1140, 1141, 1142, 1166, 1184, 1192], "you": [1, 15, 19, 40, 45, 59, 68, 78, 85, 86, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 120, 123, 124, 126, 128, 132, 133, 134, 150, 169, 181, 182, 184, 185, 196, 202, 210, 214, 222, 223, 224, 225, 243, 246, 251, 271, 285, 370, 371, 374, 377, 381, 384, 392, 403, 409, 424, 456, 483, 493, 494, 495, 540, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 588, 659, 664, 669, 673, 685, 693, 696, 711, 720, 743, 747, 758, 759, 761, 762, 763, 770, 786, 794, 819, 831, 834, 840, 919, 920, 926, 927, 930, 933, 941, 954, 969, 1007, 1042, 1064, 1069, 1116, 1142, 1165, 1174, 1184, 1192], "regist": [1, 63, 65, 66, 67, 68, 79, 80, 81, 82, 145, 147, 720, 1191], "custom": [1, 32, 39, 40, 79, 80, 81, 82, 145, 146, 147, 153, 202, 266, 271, 285, 299, 381, 384, 483, 491, 493, 495, 547, 548, 645, 683, 684, 685, 720, 771, 772, 814, 819, 831, 841, 930, 933, 1034, 1042, 1070, 1071, 1184, 1192], "dedic": [1, 104, 196, 224, 285], "namespac": [1, 284, 719, 732, 830, 1192], "underli": [1, 69, 88, 96, 103, 105, 106, 107, 109, 116, 123, 124, 126, 132, 141, 144, 146, 168, 169, 196, 197, 224, 241, 285, 319, 350, 351, 355, 359, 361, 362, 363, 365, 367, 369, 372, 375, 376, 377, 379, 393, 394, 395, 396, 540, 558, 576, 579, 720, 750, 831, 834, 840, 859, 869, 895, 896, 900, 904, 906, 907, 911, 913, 916, 918, 921, 924, 925, 926, 928, 942, 943, 944, 945, 954, 1064, 1081, 1092, 1104, 1107, 1160, 1165, 1184], "polar": [1, 285, 719, 720, 726, 732, 831, 834, 1184, 1191], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 142, 225, 247, 285, 707, 716, 720, 726, 732, 783, 831, 1164, 1165, 1184, 1191], "without": [1, 85, 110, 118, 121, 127, 129, 130, 134, 254, 255, 285, 299, 342, 378, 549, 550, 551, 552, 553, 555, 556, 557, 699, 720, 743, 831, 867, 870, 886, 927, 965, 1060, 1165, 1184], "requir": [1, 39, 40, 45, 59, 78, 104, 108, 116, 137, 138, 139, 140, 156, 161, 223, 247, 250, 285, 316, 400, 401, 402, 485, 495, 564, 612, 613, 614, 634, 696, 720, 737, 796, 801, 831, 857, 949, 950, 951, 1036, 1091, 1140, 1141, 1142, 1165, 1166, 1169, 1184], "subclass": [1, 285], "mixin": 1, "expr": [1, 78, 79, 80, 81, 82, 168, 170, 198, 199, 210, 214, 223, 228, 229, 260, 261, 285, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 716, 720, 721, 722, 725, 726, 727, 728, 729, 750, 752, 766, 767, 782, 788, 789, 790, 793, 807, 808, 831, 886, 896, 923, 941, 956, 996, 997, 1002, 1003, 1007, 1011, 1027, 1031, 1090, 1104, 1109, 1133, 1156, 1184], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 57, 58, 59, 68, 69, 78, 85, 86, 87, 88, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 142, 144, 150, 152, 156, 161, 165, 167, 170, 174, 175, 179, 180, 181, 182, 183, 184, 185, 196, 198, 199, 200, 202, 206, 207, 212, 214, 222, 223, 224, 225, 228, 229, 230, 232, 236, 242, 247, 250, 255, 256, 260, 261, 264, 285, 295, 297, 324, 330, 336, 338, 340, 341, 378, 392, 397, 399, 400, 401, 402, 424, 426, 429, 430, 433, 435, 436, 437, 440, 443, 445, 464, 475, 483, 493, 494, 523, 527, 535, 538, 541, 542, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 566, 569, 571, 572, 585, 586, 587, 594, 595, 596, 620, 625, 641, 642, 644, 650, 653, 654, 655, 656, 662, 664, 665, 667, 668, 687, 691, 699, 702, 704, 707, 708, 710, 712, 713, 715, 719, 720, 721, 722, 725, 726, 727, 728, 729, 732, 737, 742, 743, 747, 751, 752, 757, 758, 759, 760, 761, 762, 763, 766, 767, 770, 772, 776, 777, 781, 784, 786, 788, 789, 791, 792, 796, 801, 804, 807, 808, 809, 812, 831, 834, 838, 839, 840, 867, 875, 884, 885, 927, 941, 947, 948, 949, 950, 951, 962, 969, 973, 977, 978, 982, 983, 984, 985, 992, 993, 996, 1015, 1026, 1034, 1060, 1062, 1066, 1077, 1089, 1094, 1097, 1113, 1114, 1122, 1123, 1124, 1142, 1148, 1154, 1165, 1166, 1174, 1176, 1178, 1180, 1184, 1185, 1188, 1189, 1190, 1192], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 40, 46, 57, 65, 78, 84, 103, 106, 108, 109, 114, 115, 118, 119, 120, 122, 125, 126, 128, 131, 132, 141, 142, 146, 150, 157, 162, 165, 171, 187, 192, 194, 196, 197, 200, 201, 206, 209, 210, 217, 223, 224, 225, 229, 235, 239, 244, 246, 252, 254, 255, 256, 261, 285, 296, 298, 317, 336, 342, 347, 348, 349, 403, 408, 414, 419, 421, 423, 426, 430, 436, 437, 439, 443, 455, 456, 462, 478, 483, 492, 493, 511, 514, 515, 516, 517, 518, 519, 525, 533, 538, 543, 548, 564, 570, 572, 577, 578, 584, 585, 586, 587, 592, 597, 598, 600, 606, 607, 608, 609, 624, 642, 661, 662, 664, 671, 673, 678, 695, 702, 703, 704, 710, 720, 726, 732, 739, 742, 743, 747, 749, 751, 753, 771, 772, 776, 781, 789, 794, 795, 802, 804, 808, 809, 831, 834, 886, 888, 891, 892, 894, 964, 971, 989, 994, 1006, 1007, 1013, 1029, 1034, 1062, 1071, 1098, 1105, 1106, 1112, 1113, 1114, 1115, 1120, 1125, 1126, 1128, 1134, 1135, 1136, 1137, 1155, 1184, 1191, 1192], "support": [1, 39, 40, 45, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 118, 119, 123, 124, 125, 129, 130, 133, 141, 146, 150, 196, 197, 198, 199, 224, 225, 235, 236, 243, 247, 285, 476, 527, 570, 572, 601, 716, 720, 726, 766, 767, 795, 796, 831, 834, 1027, 1098, 1129, 1166, 1184, 1191], "target": [1, 38, 39, 40, 83, 119, 285, 583, 612, 613, 614, 834, 1111, 1140, 1141, 1142], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 39, 40, 43, 45, 49, 57, 58, 59, 63, 64, 68, 69, 78, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 156, 159, 161, 165, 166, 167, 169, 174, 175, 179, 180, 181, 182, 183, 184, 185, 186, 190, 192, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 216, 217, 222, 223, 224, 225, 226, 228, 229, 232, 233, 235, 237, 238, 241, 243, 246, 247, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 271, 284, 285, 295, 298, 299, 300, 309, 316, 323, 324, 326, 327, 330, 336, 342, 343, 349, 350, 362, 370, 371, 374, 377, 378, 381, 384, 392, 395, 399, 405, 422, 423, 424, 427, 429, 431, 434, 439, 443, 451, 454, 456, 457, 461, 462, 464, 465, 470, 471, 472, 473, 474, 475, 477, 479, 483, 484, 485, 488, 489, 491, 492, 493, 495, 499, 500, 501, 502, 503, 504, 514, 516, 517, 518, 519, 520, 521, 523, 527, 533, 535, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 559, 561, 562, 563, 564, 565, 570, 571, 572, 577, 583, 590, 591, 592, 593, 594, 595, 599, 600, 606, 607, 608, 609, 610, 611, 615, 620, 624, 632, 634, 635, 636, 637, 641, 645, 646, 654, 657, 659, 664, 672, 673, 675, 681, 683, 685, 696, 699, 707, 710, 716, 720, 732, 733, 735, 736, 737, 738, 741, 742, 743, 747, 749, 751, 756, 757, 758, 759, 760, 761, 762, 764, 766, 767, 771, 772, 776, 777, 781, 783, 784, 786, 788, 789, 790, 792, 793, 794, 795, 796, 801, 802, 804, 807, 808, 809, 810, 811, 814, 815, 819, 830, 831, 834, 840, 841, 850, 857, 863, 866, 868, 869, 870, 875, 878, 886, 887, 894, 895, 896, 907, 919, 920, 923, 926, 927, 930, 933, 941, 944, 948, 953, 954, 961, 965, 970, 974, 976, 977, 979, 980, 986, 988, 990, 991, 993, 1002, 1005, 1007, 1008, 1012, 1013, 1015, 1016, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1035, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1072, 1073, 1075, 1078, 1079, 1080, 1082, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1098, 1099, 1101, 1105, 1111, 1118, 1119, 1120, 1121, 1122, 1123, 1127, 1128, 1134, 1135, 1136, 1137, 1142, 1143, 1148, 1149, 1153, 1154, 1160, 1162, 1164, 1165, 1166, 1168, 1169, 1171, 1172, 1173, 1174, 1184, 1191, 1192], "featur": [1, 45, 49, 83, 285], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 57, 58, 59, 63, 68, 69, 78, 83, 84, 85, 86, 88, 90, 92, 93, 95, 99, 101, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 154, 156, 159, 162, 165, 167, 169, 172, 176, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 210, 212, 213, 214, 222, 223, 224, 225, 226, 229, 232, 235, 236, 237, 238, 239, 241, 246, 247, 250, 251, 252, 254, 255, 256, 257, 261, 263, 267, 271, 284, 285, 292, 295, 297, 298, 299, 300, 310, 324, 342, 343, 347, 348, 349, 351, 361, 374, 378, 381, 392, 400, 401, 402, 405, 409, 419, 422, 424, 440, 446, 455, 456, 459, 470, 475, 476, 481, 483, 488, 493, 494, 495, 499, 502, 503, 504, 527, 535, 538, 540, 541, 542, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 565, 566, 569, 570, 571, 572, 574, 575, 576, 577, 578, 583, 584, 585, 587, 588, 592, 594, 595, 596, 597, 600, 601, 604, 606, 607, 608, 609, 612, 613, 614, 617, 620, 637, 638, 641, 643, 646, 651, 654, 656, 657, 659, 660, 664, 665, 667, 668, 673, 682, 685, 696, 697, 698, 699, 701, 707, 708, 709, 710, 716, 720, 735, 737, 741, 742, 743, 747, 749, 751, 754, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 769, 771, 772, 776, 777, 781, 786, 789, 790, 792, 794, 795, 796, 797, 801, 802, 804, 805, 808, 811, 814, 815, 819, 831, 834, 838, 839, 840, 841, 867, 870, 875, 878, 886, 887, 888, 891, 892, 894, 896, 906, 923, 927, 930, 941, 948, 949, 950, 951, 953, 954, 958, 962, 963, 964, 965, 970, 972, 979, 986, 987, 988, 990, 991, 992, 994, 997, 1006, 1007, 1010, 1021, 1026, 1027, 1032, 1034, 1042, 1060, 1062, 1064, 1066, 1069, 1071, 1078, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1093, 1094, 1097, 1098, 1101, 1103, 1104, 1105, 1106, 1111, 1112, 1113, 1115, 1116, 1120, 1122, 1123, 1124, 1125, 1128, 1129, 1132, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1145, 1148, 1155, 1160, 1165, 1166, 1172, 1173, 1174, 1184, 1191, 1192], "primarili": 1, "intend": [1, 137, 138, 139, 140, 620, 1148], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 57, 59, 63, 64, 65, 66, 68, 69, 78, 85, 86, 87, 88, 104, 106, 107, 109, 111, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 153, 154, 157, 163, 165, 170, 171, 172, 175, 180, 181, 182, 183, 184, 185, 192, 194, 196, 197, 199, 202, 204, 206, 209, 210, 212, 213, 214, 222, 223, 224, 225, 226, 228, 229, 233, 236, 237, 238, 243, 244, 245, 246, 247, 251, 252, 254, 255, 256, 257, 260, 261, 264, 271, 285, 293, 295, 297, 299, 300, 310, 319, 320, 327, 331, 332, 342, 347, 348, 356, 360, 364, 366, 368, 373, 377, 378, 380, 381, 384, 392, 395, 397, 400, 401, 402, 403, 408, 409, 423, 424, 440, 456, 470, 483, 493, 494, 495, 498, 527, 535, 538, 540, 542, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 561, 563, 564, 569, 571, 572, 574, 576, 579, 580, 581, 583, 584, 586, 588, 589, 597, 601, 603, 605, 608, 609, 610, 611, 612, 613, 614, 617, 620, 638, 641, 642, 643, 644, 646, 652, 655, 656, 659, 661, 662, 664, 665, 666, 667, 668, 669, 673, 675, 682, 685, 686, 687, 690, 691, 693, 696, 697, 698, 699, 701, 702, 703, 704, 707, 708, 709, 711, 716, 719, 720, 731, 732, 735, 739, 742, 743, 746, 747, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 767, 769, 770, 776, 786, 788, 789, 793, 796, 797, 802, 804, 805, 807, 808, 812, 819, 831, 834, 838, 839, 840, 841, 859, 860, 868, 870, 876, 877, 886, 887, 891, 892, 901, 905, 912, 914, 917, 922, 926, 927, 929, 930, 933, 941, 944, 947, 949, 950, 951, 956, 957, 962, 965, 968, 969, 992, 1007, 1021, 1034, 1041, 1042, 1060, 1062, 1064, 1066, 1069, 1071, 1082, 1085, 1086, 1087, 1090, 1091, 1097, 1101, 1104, 1107, 1108, 1111, 1112, 1114, 1116, 1117, 1125, 1129, 1131, 1140, 1141, 1142, 1145, 1148, 1156, 1161, 1163, 1164, 1165, 1166, 1173, 1174, 1184, 1191, 1192], "librari": [1, 96, 116, 119, 493, 720, 1192], "author": 1, "domain": [1, 584, 1112], "specif": [1, 35, 39, 40, 103, 105, 107, 109, 114, 117, 118, 119, 123, 124, 125, 129, 143, 144, 157, 196, 285, 381, 384, 612, 613, 614, 617, 739, 831, 834, 930, 933, 1140, 1141, 1142, 1145, 1184, 1192], "capabl": [1, 40, 285], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 69, 78, 79, 80, 81, 82, 106, 114, 115, 116, 117, 118, 119, 128, 129, 130, 137, 138, 145, 147, 156, 157, 165, 169, 170, 180, 181, 182, 183, 184, 185, 199, 222, 246, 250, 252, 256, 285, 295, 324, 374, 378, 381, 392, 406, 424, 426, 430, 433, 435, 436, 437, 483, 495, 504, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 596, 664, 665, 667, 668, 669, 707, 708, 710, 720, 737, 739, 747, 749, 758, 759, 761, 762, 767, 786, 790, 801, 802, 811, 831, 840, 923, 927, 930, 941, 954, 955, 969, 973, 978, 982, 983, 984, 985, 1034, 1069, 1085, 1124, 1165, 1184, 1192], "mai": [1, 39, 49, 59, 85, 86, 103, 105, 106, 107, 109, 114, 116, 118, 120, 123, 124, 129, 130, 131, 132, 134, 137, 139, 167, 169, 181, 199, 202, 222, 233, 247, 254, 255, 256, 285, 299, 342, 349, 350, 362, 374, 378, 392, 403, 481, 483, 493, 495, 503, 546, 549, 550, 551, 552, 553, 555, 556, 557, 563, 588, 659, 660, 664, 665, 667, 668, 673, 695, 707, 708, 720, 742, 743, 751, 758, 767, 771, 772, 786, 793, 804, 810, 814, 819, 831, 840, 869, 870, 886, 894, 895, 907, 923, 927, 941, 948, 954, 965, 1032, 1042, 1060, 1090, 1116, 1142, 1165, 1184, 1192], "exist": [1, 38, 39, 40, 78, 118, 129, 144, 251, 255, 260, 261, 285, 294, 318, 321, 322, 351, 720, 804, 807, 808, 831, 834, 896], "belong": [1, 181, 285, 758, 831], "core": [1, 247, 285, 1192], "cannot": [1, 114, 115, 119, 120, 125, 148, 202, 225, 226, 271, 285, 319, 403, 470, 494, 495, 559, 579, 603, 622, 685, 720, 794, 819, 831, 859, 1021, 1042, 1082, 1107, 1131, 1184], "overrid": [1, 40, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 123, 124, 125, 141, 142, 146, 148, 285, 494, 720, 831, 1041, 1184], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 57, 58, 59, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 103, 104, 105, 106, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 142, 144, 145, 146, 147, 150, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 177, 179, 180, 181, 182, 184, 185, 187, 189, 192, 194, 195, 196, 198, 199, 203, 204, 205, 206, 207, 208, 210, 212, 214, 216, 218, 219, 220, 221, 222, 223, 224, 226, 230, 233, 235, 236, 237, 238, 239, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 292, 293, 294, 318, 320, 321, 322, 326, 343, 346, 352, 374, 377, 378, 381, 384, 392, 403, 405, 409, 411, 415, 417, 422, 424, 449, 450, 459, 460, 462, 476, 480, 483, 492, 494, 495, 503, 505, 506, 508, 515, 516, 517, 518, 519, 524, 527, 531, 533, 535, 541, 543, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 564, 571, 572, 621, 622, 624, 627, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 716, 720, 727, 737, 739, 742, 743, 744, 745, 746, 747, 749, 750, 751, 754, 756, 757, 758, 759, 761, 762, 764, 766, 767, 776, 777, 781, 783, 784, 785, 786, 790, 791, 793, 794, 795, 796, 801, 802, 803, 804, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 837, 864, 866, 887, 888, 897, 923, 926, 927, 930, 933, 941, 953, 957, 1001, 1002, 1003, 1013, 1034, 1041, 1051, 1052, 1060, 1065, 1085, 1086, 1149, 1151, 1161, 1162, 1163, 1172, 1184, 1188, 1191, 1192], "dt": [1, 78, 119, 125, 222, 285, 546, 669, 720, 729, 786, 831, 834, 1190], "attempt": [1, 246, 285], "do": [1, 40, 57, 58, 59, 78, 84, 85, 86, 114, 128, 137, 138, 139, 140, 169, 181, 182, 184, 185, 199, 214, 222, 241, 251, 254, 285, 342, 456, 527, 546, 607, 608, 609, 693, 696, 711, 720, 742, 743, 749, 758, 759, 761, 762, 767, 771, 772, 781, 786, 794, 831, 834, 840, 886, 954, 1007, 1135, 1136, 1137, 1165, 1174, 1184], "so": [1, 116, 117, 128, 148, 179, 181, 182, 184, 185, 214, 222, 285, 310, 324, 424, 459, 483, 495, 546, 607, 608, 609, 720, 758, 759, 761, 762, 786, 831, 1010, 1135, 1136, 1137], "rais": [1, 20, 21, 25, 39, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 119, 125, 128, 137, 139, 152, 214, 223, 285, 319, 377, 378, 392, 481, 503, 535, 576, 579, 596, 612, 613, 614, 617, 666, 682, 720, 859, 926, 927, 941, 1032, 1060, 1104, 1107, 1124, 1140, 1141, 1142, 1145, 1165, 1174, 1184], "an": [1, 35, 37, 38, 39, 40, 49, 57, 58, 79, 81, 82, 84, 85, 88, 93, 94, 96, 103, 114, 115, 116, 117, 118, 119, 121, 125, 126, 128, 130, 131, 142, 144, 146, 157, 158, 159, 167, 170, 175, 181, 182, 184, 185, 196, 197, 199, 202, 210, 214, 220, 222, 223, 241, 246, 251, 254, 255, 260, 271, 285, 294, 315, 319, 325, 331, 332, 337, 338, 339, 340, 341, 342, 343, 351, 352, 374, 377, 381, 395, 406, 408, 409, 415, 417, 439, 451, 452, 456, 459, 481, 482, 483, 492, 493, 495, 504, 514, 515, 534, 535, 542, 545, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 576, 579, 584, 612, 613, 614, 617, 627, 633, 641, 647, 651, 664, 665, 667, 668, 670, 675, 679, 680, 682, 693, 695, 696, 699, 702, 707, 708, 710, 711, 716, 720, 732, 739, 740, 741, 742, 743, 749, 751, 754, 758, 759, 761, 762, 767, 772, 781, 786, 794, 804, 807, 809, 819, 831, 834, 856, 859, 864, 874, 876, 877, 878, 882, 883, 884, 885, 886, 896, 930, 944, 948, 955, 979, 991, 1002, 1003, 1007, 1010, 1032, 1033, 1042, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1085, 1086, 1104, 1107, 1112, 1140, 1141, 1142, 1145, 1165, 1174, 1184, 1191], "attributeerror": 1, "howev": [1, 106, 116, 167, 202, 246, 285, 948, 1184], "can": [1, 19, 32, 39, 40, 45, 48, 68, 69, 78, 87, 88, 94, 104, 106, 114, 115, 116, 119, 120, 125, 126, 128, 131, 133, 134, 142, 143, 144, 146, 148, 150, 156, 158, 165, 166, 175, 180, 181, 182, 183, 184, 185, 192, 194, 202, 210, 214, 222, 225, 228, 236, 246, 250, 251, 254, 260, 271, 285, 295, 299, 338, 341, 342, 370, 371, 374, 377, 392, 406, 424, 439, 456, 483, 495, 503, 511, 514, 516, 517, 518, 519, 527, 533, 535, 540, 546, 549, 550, 551, 552, 553, 555, 556, 557, 561, 564, 566, 569, 572, 587, 607, 608, 609, 612, 624, 650, 673, 675, 685, 710, 716, 719, 720, 731, 737, 742, 747, 749, 751, 758, 759, 761, 762, 786, 788, 790, 796, 801, 807, 810, 831, 834, 841, 870, 886, 887, 919, 920, 923, 926, 927, 941, 955, 969, 1007, 1034, 1042, 1047, 1060, 1064, 1085, 1086, 1087, 1091, 1094, 1097, 1105, 1106, 1113, 1115, 1135, 1136, 1137, 1140, 1142, 1165, 1184, 1191], "other": [1, 25, 39, 40, 45, 68, 85, 114, 115, 116, 128, 137, 138, 139, 140, 165, 169, 176, 198, 199, 206, 207, 223, 225, 228, 229, 255, 258, 260, 261, 283, 285, 292, 296, 298, 310, 330, 346, 398, 399, 413, 416, 418, 424, 429, 442, 449, 454, 461, 471, 472, 473, 474, 479, 484, 490, 494, 499, 502, 510, 512, 522, 523, 526, 572, 623, 631, 633, 640, 642, 644, 653, 654, 655, 662, 664, 687, 691, 699, 702, 704, 720, 732, 743, 747, 766, 767, 776, 777, 788, 789, 804, 807, 808, 809, 831, 834, 840, 875, 890, 954, 977, 1000, 1005, 1012, 1022, 1023, 1024, 1025, 1030, 1035, 1084, 1167, 1175, 1183, 1184], "onli": [1, 15, 18, 25, 35, 37, 40, 57, 63, 65, 69, 78, 83, 86, 88, 114, 115, 118, 120, 122, 126, 128, 129, 131, 132, 133, 134, 144, 146, 150, 153, 165, 169, 181, 184, 196, 198, 199, 202, 204, 214, 222, 224, 225, 238, 243, 245, 246, 255, 256, 271, 285, 293, 295, 297, 299, 310, 324, 329, 330, 374, 382, 403, 412, 439, 495, 514, 516, 517, 518, 519, 527, 533, 540, 549, 550, 551, 552, 553, 555, 556, 557, 624, 635, 664, 665, 685, 720, 742, 747, 758, 759, 761, 762, 763, 766, 767, 770, 786, 804, 819, 831, 838, 839, 840, 872, 875, 887, 923, 954, 960, 979, 1042, 1060, 1064, 1160, 1163, 1184, 1191, 1192], "gener": [1, 116, 117, 135, 141, 142, 143, 144, 146, 152, 161, 214, 226, 244, 246, 251, 285, 470, 559, 565, 647, 664, 667, 679, 680, 696, 707, 708, 720, 831, 1021, 1082, 1093, 1161, 1184, 1192], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 716, 720, 733, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 960, 963, 964, 965, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 993, 996, 997, 1004, 1006, 1007, 1008, 1011, 1013, 1015, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1122, 1123, 1124, 1125, 1126, 1129, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1184, 1191, 1192], "register_expr_namespac": [1, 79, 81, 82], "greet": 1, "def": [1, 69, 79, 80, 81, 82, 142, 143, 144, 146, 150, 213, 251, 285, 292, 531, 584, 609, 640, 684, 720, 743, 780, 831, 834, 1112, 1192], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 1191], "self": [1, 64, 65, 66, 68, 79, 80, 81, 82, 84, 85, 158, 159, 162, 169, 187, 189, 190, 201, 203, 204, 205, 206, 208, 211, 212, 214, 216, 217, 219, 220, 226, 234, 235, 237, 238, 239, 244, 251, 253, 256, 257, 258, 262, 263, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 317, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 509, 510, 511, 512, 513, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 716, 720, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 831, 840, 841, 864, 878, 954, 958, 966, 1040, 1041, 1042, 1053, 1057, 1058, 1063, 1085, 1086, 1087, 1099, 1171, 1175, 1184], "_expr": [1, 80], "hello": [1, 25, 64, 67, 607, 608, 609, 1013, 1135, 1136, 1137], "return": [1, 10, 11, 35, 37, 40, 41, 42, 43, 44, 57, 58, 59, 63, 67, 69, 78, 79, 80, 81, 82, 83, 84, 85, 95, 97, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 143, 153, 156, 158, 161, 164, 166, 167, 168, 169, 170, 171, 174, 175, 177, 179, 180, 181, 183, 184, 187, 189, 195, 196, 197, 198, 200, 201, 202, 209, 210, 212, 213, 214, 222, 223, 224, 225, 226, 239, 240, 246, 247, 250, 251, 252, 256, 260, 261, 269, 271, 274, 279, 285, 295, 297, 301, 302, 303, 304, 305, 306, 309, 310, 315, 318, 320, 321, 322, 323, 333, 334, 335, 336, 343, 344, 349, 353, 354, 355, 357, 359, 361, 362, 363, 365, 367, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 405, 417, 420, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 443, 444, 447, 448, 450, 457, 459, 460, 462, 464, 465, 470, 480, 481, 482, 489, 494, 504, 506, 511, 531, 535, 537, 541, 542, 544, 559, 560, 566, 567, 568, 575, 577, 578, 580, 582, 583, 584, 585, 587, 588, 589, 590, 591, 593, 594, 595, 596, 599, 601, 602, 603, 604, 620, 626, 627, 628, 629, 630, 632, 633, 635, 636, 637, 640, 641, 645, 647, 648, 649, 650, 651, 663, 664, 665, 666, 667, 668, 669, 675, 677, 679, 680, 682, 683, 684, 685, 693, 696, 699, 702, 705, 706, 707, 708, 710, 711, 720, 737, 740, 742, 743, 748, 749, 751, 758, 759, 761, 762, 763, 769, 770, 772, 780, 781, 786, 790, 794, 799, 800, 801, 802, 807, 808, 811, 817, 822, 827, 831, 838, 839, 840, 848, 849, 851, 852, 856, 858, 860, 863, 867, 870, 874, 887, 888, 894, 898, 899, 900, 902, 904, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 921, 923, 924, 925, 927, 928, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 948, 953, 954, 962, 964, 965, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 989, 991, 993, 994, 998, 999, 1001, 1008, 1010, 1011, 1013, 1015, 1016, 1021, 1031, 1032, 1033, 1040, 1041, 1042, 1047, 1054, 1060, 1066, 1067, 1068, 1069, 1082, 1083, 1084, 1086, 1094, 1103, 1104, 1105, 1106, 1108, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1127, 1129, 1130, 1131, 1132, 1148, 1155, 1157, 1168, 1170, 1171, 1172, 1175, 1184, 1191, 1192], "lit": [1, 294, 318, 424, 439, 514, 659, 673, 693, 696, 710, 711, 720, 957, 1184], "alia": [1, 17, 78, 80, 82, 181, 201, 214, 222, 253, 260, 285, 292, 296, 318, 320, 321, 322, 323, 337, 338, 339, 340, 341, 343, 345, 349, 350, 351, 352, 355, 357, 358, 359, 362, 363, 367, 369, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 389, 391, 392, 393, 394, 395, 396, 398, 399, 411, 413, 416, 418, 422, 424, 428, 429, 432, 439, 442, 443, 444, 452, 456, 471, 472, 473, 474, 490, 494, 495, 499, 500, 501, 502, 504, 507, 510, 512, 514, 522, 523, 526, 528, 532, 535, 538, 540, 560, 576, 578, 581, 583, 584, 588, 589, 601, 602, 603, 604, 605, 610, 611, 621, 622, 623, 631, 632, 633, 639, 640, 647, 648, 649, 652, 653, 654, 655, 659, 660, 664, 669, 670, 673, 674, 684, 685, 695, 696, 702, 707, 710, 720, 758, 764, 770, 786, 803, 807, 831, 887, 895, 897, 903, 923, 926, 930, 932, 994, 1007, 1041, 1060, 1065, 1111, 1112, 1131, 1132, 1184], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 64, 67, 607, 608, 609, 618, 1013, 1135, 1136, 1137, 1146], "select": [1, 13, 38, 63, 64, 65, 78, 79, 80, 81, 113, 114, 115, 116, 117, 118, 120, 122, 126, 128, 134, 143, 195, 199, 202, 210, 213, 223, 229, 235, 248, 253, 256, 285, 291, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 326, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 361, 362, 363, 370, 371, 374, 377, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 410, 412, 414, 419, 421, 422, 423, 425, 426, 429, 430, 438, 439, 440, 441, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 477, 478, 482, 483, 485, 486, 487, 488, 489, 493, 495, 496, 497, 498, 509, 511, 513, 514, 520, 521, 524, 525, 526, 529, 530, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 548, 554, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 582, 583, 584, 585, 612, 621, 622, 625, 628, 629, 630, 632, 634, 635, 636, 637, 638, 641, 643, 646, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 669, 671, 672, 673, 674, 675, 677, 681, 686, 688, 689, 690, 692, 695, 696, 700, 701, 702, 703, 705, 709, 716, 720, 744, 767, 780, 789, 790, 795, 803, 809, 831, 834, 855, 857, 926, 996, 997, 1007, 1085, 1086, 1098, 1115, 1140, 1156, 1184, 1191], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 60, 63, 64, 65, 67, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 100, 103, 104, 105, 106, 107, 108, 109, 110, 128, 134, 144, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 177, 178, 180, 181, 186, 187, 189, 190, 191, 192, 194, 195, 198, 199, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 226, 228, 232, 235, 236, 237, 238, 239, 240, 242, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 716, 720, 735, 737, 739, 740, 742, 743, 745, 746, 747, 750, 751, 752, 753, 754, 755, 757, 758, 763, 765, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 837, 840, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 863, 864, 866, 868, 869, 871, 872, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 910, 911, 913, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 954, 955, 956, 957, 958, 960, 963, 964, 965, 968, 969, 971, 973, 975, 977, 978, 981, 982, 983, 984, 985, 989, 991, 996, 997, 1004, 1006, 1007, 1008, 1011, 1013, 1015, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1040, 1041, 1042, 1047, 1054, 1056, 1057, 1058, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1089, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1122, 1123, 1124, 1125, 1126, 1129, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1167, 1168, 1169, 1170, 1171, 1172, 1175, 1184, 1191], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 117, 119, 125, 128, 134, 136, 137, 138, 139, 140, 143, 144, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 292, 293, 294, 295, 297, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 358, 359, 361, 362, 367, 369, 374, 376, 377, 378, 379, 381, 383, 384, 385, 392, 393, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 438, 439, 440, 442, 443, 444, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 486, 487, 488, 489, 490, 492, 494, 495, 510, 511, 512, 514, 515, 516, 517, 518, 519, 522, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 569, 571, 572, 573, 576, 577, 580, 581, 583, 584, 585, 586, 588, 589, 592, 597, 600, 601, 602, 603, 604, 605, 606, 613, 617, 621, 622, 623, 624, 626, 627, 628, 632, 635, 636, 637, 639, 640, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 716, 720, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 757, 758, 763, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 837, 840, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 863, 864, 866, 868, 869, 871, 872, 873, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 900, 903, 904, 906, 908, 909, 910, 915, 916, 918, 924, 926, 927, 928, 930, 932, 933, 934, 936, 937, 939, 941, 943, 944, 948, 949, 950, 951, 954, 955, 956, 957, 958, 960, 963, 964, 965, 968, 969, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 988, 989, 992, 993, 1002, 1004, 1006, 1007, 1008, 1011, 1015, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1093, 1095, 1096, 1097, 1098, 1099, 1101, 1105, 1108, 1109, 1111, 1112, 1113, 1114, 1116, 1117, 1120, 1125, 1128, 1129, 1133, 1134, 1141, 1145, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1184, 1191, 1192], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 59, 60, 63, 64, 65, 66, 67, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 118, 119, 120, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 144, 146, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 358, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 581, 582, 583, 584, 585, 586, 587, 588, 589, 597, 598, 603, 604, 605, 607, 608, 609, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 716, 720, 735, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 763, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 837, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 863, 864, 868, 869, 871, 872, 873, 875, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 903, 904, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 949, 950, 951, 954, 955, 956, 957, 958, 960, 963, 964, 965, 968, 969, 971, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 991, 993, 996, 997, 1004, 1006, 1007, 1008, 1010, 1011, 1015, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1056, 1057, 1058, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1111, 1113, 1114, 1115, 1116, 1117, 1125, 1131, 1132, 1148, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1184, 1191, 1192], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 117, 128, 134, 135, 136, 137, 138, 139, 140, 143, 144, 146, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 296, 298, 300, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 325, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 349, 351, 352, 355, 357, 359, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 569, 570, 571, 572, 573, 575, 578, 580, 581, 583, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 695, 699, 700, 701, 702, 703, 705, 708, 709, 710, 716, 720, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 763, 764, 766, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 837, 840, 843, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 863, 868, 869, 871, 872, 873, 874, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 894, 896, 898, 899, 902, 904, 908, 909, 910, 915, 916, 918, 919, 920, 925, 926, 927, 931, 941, 943, 944, 945, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 960, 963, 964, 965, 968, 969, 971, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 993, 1004, 1006, 1007, 1008, 1011, 1013, 1015, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1056, 1057, 1058, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1093, 1095, 1097, 1098, 1099, 1100, 1101, 1103, 1106, 1111, 1113, 1114, 1115, 1117, 1124, 1125, 1126, 1131, 1132, 1135, 1136, 1137, 1140, 1142, 1143, 1144, 1146, 1147, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1184, 1191, 1192], "column_0": [1, 202, 251, 285], "register_dataframe_namespac": [1, 80, 81, 82], "split": [1, 40, 79, 197, 285, 603, 604, 1131, 1132], "splitfram": [1, 79], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 64, 79, 80, 103, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 128, 142, 144, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 669, 670, 671, 672, 673, 674, 675, 677, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 716, 720, 758, 786, 790, 803, 804, 817, 819, 827, 831, 834, 855, 857, 868, 926, 996, 997, 1007, 1115, 1126, 1131, 1132, 1162, 1184, 1192], "_df": [1, 79], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 63, 67, 78, 79, 81, 84, 85, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 142, 143, 144, 146, 160, 163, 166, 167, 168, 172, 178, 180, 181, 189, 196, 209, 212, 223, 224, 225, 228, 236, 242, 243, 251, 252, 253, 254, 260, 264, 265, 285, 293, 315, 316, 343, 405, 411, 421, 491, 493, 495, 504, 505, 527, 535, 541, 542, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 571, 572, 584, 602, 621, 622, 627, 631, 650, 654, 665, 668, 670, 678, 680, 682, 685, 700, 702, 708, 720, 744, 748, 750, 754, 757, 758, 788, 796, 802, 803, 807, 809, 812, 813, 831, 834, 856, 857, 873, 887, 948, 953, 958, 961, 965, 966, 977, 1060, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1083, 1112, 1130, 1156, 1164, 1167, 1184, 1192], "with_row_count": [1, 285, 494, 549, 550, 552, 555, 556, 557, 720, 831, 1086, 1184], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 57, 64, 65, 66, 67, 68, 79, 80, 81, 82, 86, 92, 103, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 156, 157, 160, 163, 164, 165, 168, 172, 173, 174, 177, 179, 180, 183, 195, 196, 198, 199, 202, 206, 207, 212, 214, 218, 223, 224, 225, 227, 228, 229, 236, 242, 244, 246, 249, 250, 251, 252, 253, 254, 255, 260, 261, 262, 263, 264, 285, 294, 299, 318, 320, 321, 322, 343, 403, 424, 433, 435, 436, 437, 439, 483, 492, 495, 503, 505, 507, 527, 533, 535, 543, 572, 584, 585, 621, 622, 624, 641, 642, 643, 644, 646, 648, 649, 650, 653, 654, 655, 656, 658, 661, 662, 664, 671, 677, 678, 686, 687, 690, 691, 694, 696, 697, 698, 699, 702, 703, 704, 705, 707, 710, 716, 720, 737, 739, 744, 746, 747, 750, 754, 757, 760, 766, 767, 776, 777, 784, 787, 788, 789, 790, 796, 801, 802, 803, 804, 807, 808, 809, 810, 812, 831, 834, 837, 874, 887, 1034, 1060, 1065, 1111, 1112, 1113, 1125, 1149, 1151, 1161, 1162, 1166, 1184, 1191, 1192], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 57, 65, 66, 79, 80, 81, 82, 112, 114, 115, 128, 153, 158, 169, 181, 187, 196, 197, 201, 202, 224, 225, 226, 232, 233, 237, 239, 240, 243, 245, 257, 269, 279, 285, 323, 342, 345, 350, 351, 358, 383, 395, 406, 420, 444, 453, 460, 470, 471, 475, 480, 483, 528, 531, 541, 555, 557, 559, 562, 563, 569, 574, 588, 589, 597, 603, 604, 607, 608, 614, 626, 628, 632, 633, 638, 640, 656, 664, 665, 666, 667, 668, 669, 675, 677, 693, 696, 697, 698, 701, 705, 709, 711, 720, 740, 742, 758, 763, 770, 792, 793, 797, 799, 800, 805, 817, 827, 831, 834, 840, 863, 874, 886, 889, 895, 896, 903, 932, 944, 954, 955, 964, 994, 1004, 1011, 1021, 1022, 1026, 1031, 1034, 1056, 1078, 1080, 1082, 1089, 1090, 1097, 1101, 1116, 1117, 1125, 1131, 1132, 1142, 1155, 1157, 1163, 1168, 1173, 1184, 1191, 1192], "filter": [1, 79, 118, 128, 129, 134, 165, 192, 193, 194, 214, 271, 285, 503, 505, 581, 605, 639, 673, 710, 720, 747, 751, 764, 819, 831, 834, 1085, 1184], "col": [1, 17, 37, 40, 57, 78, 79, 80, 81, 107, 109, 128, 142, 144, 172, 180, 181, 193, 195, 200, 202, 210, 213, 214, 222, 223, 228, 236, 253, 254, 260, 264, 285, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 422, 423, 424, 425, 428, 429, 432, 433, 435, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 482, 483, 485, 486, 487, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 623, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 651, 653, 654, 655, 659, 660, 661, 669, 672, 673, 674, 675, 676, 681, 686, 690, 694, 695, 703, 710, 720, 741, 754, 757, 758, 764, 769, 780, 786, 788, 796, 803, 807, 809, 812, 831, 834, 855, 857, 868, 923, 926, 996, 997, 1007, 1066, 1085, 1086, 1115, 1140, 1184, 1192], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 59, 60, 63, 68, 78, 79, 80, 82, 86, 88, 104, 114, 115, 116, 117, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 136, 141, 142, 143, 144, 146, 152, 153, 155, 157, 158, 159, 161, 162, 163, 166, 170, 171, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 195, 196, 197, 198, 200, 202, 203, 204, 205, 208, 209, 210, 211, 214, 215, 216, 220, 224, 225, 226, 227, 228, 233, 235, 236, 237, 238, 244, 245, 246, 247, 248, 251, 254, 256, 257, 260, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 285, 291, 293, 294, 296, 299, 301, 302, 303, 304, 305, 306, 309, 310, 311, 324, 325, 328, 329, 331, 332, 333, 334, 335, 337, 342, 343, 344, 347, 348, 356, 359, 360, 363, 364, 366, 367, 368, 373, 377, 379, 380, 387, 388, 390, 391, 392, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 412, 413, 416, 418, 419, 423, 426, 427, 430, 431, 433, 434, 435, 436, 437, 439, 440, 442, 447, 448, 451, 452, 454, 456, 459, 461, 465, 467, 479, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 504, 509, 510, 512, 514, 520, 521, 522, 523, 525, 526, 528, 531, 532, 533, 535, 536, 537, 538, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 573, 574, 577, 578, 583, 584, 590, 591, 592, 593, 599, 600, 606, 612, 614, 623, 624, 625, 629, 630, 631, 633, 638, 639, 641, 645, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 664, 666, 670, 673, 679, 680, 683, 685, 688, 689, 693, 694, 695, 696, 700, 706, 707, 708, 709, 710, 711, 716, 720, 736, 739, 740, 741, 746, 748, 752, 753, 756, 757, 758, 759, 760, 761, 762, 765, 766, 769, 771, 772, 775, 779, 781, 782, 783, 787, 788, 793, 794, 796, 797, 805, 807, 809, 810, 811, 812, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 864, 869, 871, 872, 874, 876, 877, 879, 880, 881, 886, 887, 888, 890, 891, 892, 901, 904, 905, 909, 910, 911, 912, 913, 914, 916, 917, 921, 922, 926, 927, 928, 929, 936, 937, 939, 940, 941, 947, 949, 950, 951, 956, 960, 963, 965, 968, 973, 974, 976, 978, 980, 982, 983, 984, 985, 991, 992, 1002, 1005, 1007, 1010, 1012, 1016, 1030, 1034, 1035, 1040, 1044, 1045, 1056, 1060, 1061, 1062, 1069, 1070, 1071, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1082, 1090, 1094, 1095, 1096, 1100, 1101, 1105, 1106, 1111, 1112, 1115, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1140, 1142, 1158, 1159, 1161, 1166, 1167, 1171, 1173, 1174, 1184, 1192], "drop": [1, 106, 164, 165, 202, 252, 260, 285, 345, 347, 348, 453, 455, 535, 720, 747, 802, 807, 831, 889, 891, 892, 1004, 1006, 1060, 1184], "aaa": [1, 40, 285, 576, 621, 622, 1104], "bbb": [1, 40, 285, 621, 622, 834], "ccc": [1, 40, 285, 621, 622], "ddd": [1, 40, 285, 621, 622], "eee": [1, 40, 285, 834], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 69, 78, 79, 86, 88, 90, 92, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 144, 156, 157, 161, 163, 164, 165, 166, 168, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 189, 190, 195, 196, 198, 199, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 236, 237, 238, 242, 244, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 285, 294, 295, 297, 309, 315, 330, 336, 343, 351, 353, 354, 355, 359, 361, 362, 363, 365, 367, 369, 372, 375, 376, 379, 381, 382, 384, 393, 394, 396, 403, 405, 409, 411, 424, 439, 443, 449, 457, 477, 481, 482, 483, 494, 495, 501, 503, 505, 514, 516, 517, 518, 519, 527, 533, 535, 539, 541, 542, 546, 549, 550, 551, 552, 553, 555, 556, 557, 564, 571, 572, 575, 582, 603, 604, 612, 613, 614, 615, 617, 624, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 720, 737, 739, 746, 747, 748, 750, 754, 757, 758, 759, 760, 761, 762, 766, 767, 772, 773, 774, 775, 776, 778, 779, 780, 782, 784, 786, 787, 788, 789, 790, 791, 796, 797, 798, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 819, 831, 834, 838, 839, 856, 867, 869, 875, 887, 898, 899, 900, 904, 906, 907, 911, 913, 916, 918, 921, 924, 925, 928, 930, 931, 933, 942, 943, 945, 953, 962, 1000, 1008, 1028, 1032, 1033, 1060, 1066, 1091, 1103, 1110, 1131, 1132, 1140, 1141, 1142, 1143, 1145, 1153, 1161, 1162, 1184, 1192], "txt": [1, 17, 128], "utf8": [1, 25, 39, 106, 114, 115, 128, 141, 143, 146, 157, 166, 167, 168, 175, 227, 246, 285, 320, 381, 384, 462, 494, 575, 580, 582, 583, 584, 585, 587, 601, 602, 603, 604, 612, 613, 614, 615, 617, 620, 655, 720, 739, 748, 750, 787, 831, 834, 930, 933, 990, 1013, 1103, 1108, 1110, 1111, 1112, 1113, 1115, 1129, 1130, 1131, 1132, 1140, 1141, 1142, 1143, 1145, 1148, 1184], "register_lazyframe_namespac": [1, 79, 80, 82], "dtypeoper": [1, 81], "ldf": [1, 81, 812, 813, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826], "_ldf": [1, 81], "upcast_integer_typ": [1, 81], "with_column": [1, 17, 81, 181, 213, 222, 254, 261, 285, 292, 294, 310, 320, 325, 327, 330, 338, 341, 343, 345, 349, 355, 357, 358, 359, 367, 369, 374, 375, 376, 377, 378, 379, 381, 383, 384, 393, 394, 398, 399, 407, 408, 413, 416, 418, 419, 423, 424, 428, 432, 433, 435, 436, 437, 439, 442, 456, 471, 472, 473, 474, 475, 490, 492, 494, 495, 510, 512, 514, 515, 516, 517, 518, 519, 522, 523, 527, 528, 531, 532, 533, 535, 538, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 562, 576, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 623, 624, 631, 633, 640, 642, 644, 653, 655, 662, 665, 670, 680, 684, 687, 691, 700, 704, 708, 710, 716, 720, 758, 764, 780, 786, 808, 831, 834, 868, 887, 926, 1007, 1060, 1184], "tp": [1, 81], "cast": [1, 39, 80, 81, 103, 137, 138, 139, 140, 175, 181, 182, 184, 185, 213, 222, 247, 260, 285, 298, 327, 340, 341, 350, 381, 384, 494, 526, 531, 540, 546, 586, 587, 620, 625, 631, 655, 700, 720, 758, 759, 761, 762, 780, 786, 807, 831, 834, 868, 870, 884, 885, 895, 930, 933, 1064, 1114, 1115, 1148, 1154, 1162, 1167, 1184], "int64": [1, 2, 39, 40, 43, 80, 81, 86, 114, 166, 175, 181, 182, 184, 185, 200, 213, 222, 227, 241, 247, 285, 312, 313, 314, 316, 340, 341, 385, 386, 387, 388, 389, 390, 391, 403, 531, 540, 546, 586, 625, 631, 647, 671, 679, 680, 682, 696, 702, 720, 741, 748, 758, 759, 761, 762, 764, 769, 780, 786, 787, 790, 831, 853, 854, 855, 857, 884, 885, 934, 935, 936, 937, 938, 939, 940, 1064, 1084, 1154, 1165, 1166, 1167, 1184], "int8": [1, 81, 175, 285, 315, 340, 341, 482, 625, 693, 696, 711, 720, 856, 884, 885, 889, 1033, 1041, 1067, 1154, 1171, 1184], "int16": [1, 81, 340, 341, 625, 720, 834, 884, 885, 1041, 1154, 1163, 1184], "int32": [1, 81, 86, 103, 106, 119, 143, 144, 181, 182, 184, 185, 197, 222, 285, 325, 362, 396, 546, 596, 631, 696, 720, 758, 759, 761, 762, 786, 831, 834, 907, 945, 1040, 1124, 1167, 1184], "b": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 81, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 152, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 186, 187, 189, 190, 192, 194, 195, 196, 197, 198, 200, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 221, 223, 224, 225, 226, 227, 228, 232, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 285, 292, 294, 295, 297, 298, 311, 317, 318, 320, 321, 322, 325, 327, 336, 343, 346, 403, 405, 407, 408, 409, 411, 414, 419, 421, 423, 424, 426, 430, 433, 435, 436, 437, 439, 443, 449, 456, 462, 471, 472, 473, 474, 492, 495, 500, 511, 514, 515, 516, 517, 524, 525, 527, 531, 533, 535, 538, 543, 545, 564, 570, 572, 582, 586, 597, 624, 635, 639, 641, 642, 643, 644, 646, 650, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 670, 671, 672, 673, 674, 677, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 697, 698, 701, 702, 703, 704, 705, 709, 720, 735, 737, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 763, 766, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 787, 788, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 837, 840, 867, 868, 869, 870, 887, 888, 890, 947, 948, 954, 957, 969, 977, 990, 1007, 1022, 1023, 1025, 1060, 1065, 1084, 1110, 1114, 1125, 1153, 1166, 1170, 1184, 1191], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 128, 136, 146, 152, 154, 156, 157, 158, 159, 162, 165, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 204, 206, 207, 209, 210, 212, 213, 214, 215, 219, 222, 224, 225, 231, 232, 236, 239, 240, 241, 242, 243, 244, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 296, 298, 311, 312, 313, 314, 315, 317, 323, 325, 328, 329, 330, 336, 337, 338, 339, 340, 341, 342, 344, 346, 351, 355, 375, 376, 377, 378, 381, 384, 386, 389, 391, 392, 394, 398, 399, 404, 405, 407, 408, 411, 412, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 436, 437, 439, 442, 443, 444, 452, 453, 455, 456, 457, 460, 470, 471, 472, 473, 474, 475, 476, 480, 482, 487, 490, 492, 494, 495, 510, 512, 514, 515, 516, 517, 518, 519, 522, 523, 526, 527, 529, 530, 531, 532, 533, 536, 538, 542, 543, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 562, 566, 570, 571, 572, 573, 576, 578, 584, 588, 589, 594, 595, 596, 597, 601, 602, 603, 604, 610, 611, 612, 620, 621, 622, 623, 624, 626, 627, 628, 631, 632, 633, 640, 642, 644, 646, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 668, 670, 672, 673, 677, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 716, 720, 735, 737, 739, 740, 741, 742, 743, 747, 749, 750, 751, 752, 753, 755, 757, 758, 763, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 786, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 840, 843, 850, 853, 854, 855, 856, 863, 872, 873, 875, 886, 888, 890, 904, 911, 913, 916, 918, 919, 920, 921, 925, 926, 927, 930, 933, 935, 938, 940, 941, 942, 943, 954, 956, 957, 964, 965, 968, 969, 971, 977, 982, 983, 984, 985, 989, 1004, 1006, 1007, 1008, 1011, 1021, 1022, 1023, 1025, 1026, 1027, 1031, 1033, 1041, 1048, 1056, 1057, 1058, 1062, 1066, 1069, 1074, 1076, 1077, 1078, 1079, 1080, 1082, 1084, 1089, 1094, 1098, 1099, 1104, 1106, 1112, 1116, 1117, 1122, 1123, 1124, 1129, 1131, 1132, 1138, 1139, 1140, 1148, 1153, 1155, 1156, 1157, 1163, 1166, 1167, 1168, 1175, 1184, 1192], "c": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 79, 81, 86, 104, 106, 108, 110, 119, 128, 142, 152, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 172, 173, 175, 176, 178, 179, 180, 181, 187, 189, 190, 197, 198, 200, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 221, 223, 226, 227, 228, 235, 236, 237, 238, 239, 241, 244, 245, 246, 247, 248, 250, 251, 254, 255, 257, 258, 260, 264, 267, 268, 269, 270, 272, 273, 275, 278, 279, 285, 292, 294, 295, 297, 299, 317, 343, 424, 439, 449, 462, 492, 495, 514, 515, 527, 531, 535, 564, 603, 612, 635, 642, 644, 646, 652, 653, 655, 656, 657, 658, 659, 660, 662, 672, 673, 674, 677, 681, 684, 686, 687, 688, 689, 690, 691, 692, 701, 703, 704, 705, 709, 716, 720, 737, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 754, 757, 758, 766, 769, 776, 779, 781, 784, 785, 787, 788, 794, 795, 796, 801, 804, 807, 809, 812, 815, 816, 817, 818, 820, 821, 823, 826, 827, 831, 834, 869, 887, 888, 969, 990, 1060, 1131, 1140, 1170, 1184], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 66, 68, 70, 78, 79, 81, 82, 86, 103, 106, 107, 108, 109, 110, 112, 115, 136, 137, 139, 144, 157, 158, 159, 162, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 187, 188, 190, 191, 193, 195, 196, 199, 200, 201, 202, 204, 206, 209, 210, 212, 214, 215, 216, 219, 222, 225, 231, 232, 236, 239, 240, 241, 242, 243, 244, 246, 249, 254, 255, 256, 259, 260, 262, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 285, 292, 293, 296, 323, 325, 327, 329, 330, 342, 343, 344, 345, 346, 351, 352, 377, 379, 381, 384, 385, 391, 399, 402, 403, 406, 408, 412, 413, 416, 418, 420, 421, 424, 428, 432, 433, 435, 436, 437, 439, 442, 444, 452, 456, 457, 460, 464, 467, 470, 471, 472, 473, 474, 475, 478, 480, 510, 512, 514, 523, 526, 527, 528, 529, 530, 531, 535, 536, 538, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 566, 572, 578, 587, 588, 589, 596, 623, 626, 628, 632, 633, 646, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 669, 670, 671, 672, 673, 677, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 701, 703, 704, 705, 709, 716, 720, 739, 740, 741, 742, 743, 749, 750, 751, 752, 753, 755, 757, 758, 763, 765, 767, 768, 769, 770, 774, 775, 776, 781, 786, 792, 794, 795, 796, 797, 798, 799, 800, 804, 806, 807, 810, 812, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 840, 843, 847, 850, 863, 868, 873, 875, 882, 886, 887, 888, 889, 890, 896, 897, 898, 899, 900, 926, 928, 930, 931, 933, 934, 940, 942, 943, 951, 954, 955, 964, 965, 968, 969, 975, 981, 1007, 1008, 1011, 1015, 1021, 1022, 1023, 1025, 1026, 1031, 1040, 1041, 1048, 1056, 1057, 1058, 1060, 1061, 1062, 1066, 1069, 1071, 1072, 1073, 1075, 1076, 1079, 1082, 1084, 1094, 1100, 1106, 1115, 1116, 1124, 1155, 1168, 1171, 1175, 1184, 1192], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 66, 68, 69, 70, 79, 81, 86, 87, 88, 103, 106, 107, 108, 109, 136, 157, 160, 163, 164, 165, 166, 168, 169, 172, 173, 176, 177, 178, 179, 181, 187, 189, 190, 191, 193, 195, 196, 198, 202, 203, 204, 205, 206, 208, 211, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 232, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 251, 253, 254, 256, 257, 258, 260, 262, 269, 278, 279, 285, 292, 296, 317, 325, 340, 341, 346, 351, 355, 369, 374, 375, 376, 393, 394, 397, 399, 407, 408, 414, 420, 421, 423, 444, 445, 446, 457, 471, 472, 473, 474, 495, 523, 526, 534, 537, 538, 539, 542, 544, 546, 549, 550, 551, 552, 553, 555, 556, 557, 560, 572, 578, 582, 588, 589, 596, 623, 626, 628, 640, 659, 660, 661, 670, 673, 684, 685, 703, 716, 720, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 758, 763, 765, 766, 768, 770, 772, 776, 779, 781, 784, 786, 787, 788, 790, 792, 794, 795, 796, 799, 800, 803, 806, 807, 810, 817, 826, 827, 831, 834, 873, 879, 881, 884, 885, 890, 923, 943, 965, 996, 997, 1008, 1022, 1023, 1025, 1048, 1062, 1066, 1068, 1074, 1076, 1078, 1080, 1084, 1106, 1110, 1116, 1124, 1154, 1184, 1191, 1192], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 79, 81, 86, 157, 160, 161, 162, 163, 164, 166, 168, 172, 173, 176, 181, 187, 189, 191, 198, 203, 204, 205, 207, 208, 211, 214, 216, 218, 220, 222, 223, 225, 226, 227, 228, 232, 235, 237, 238, 239, 240, 245, 246, 247, 248, 254, 256, 257, 258, 285, 292, 296, 314, 341, 351, 355, 375, 377, 378, 392, 394, 404, 420, 423, 444, 471, 472, 473, 474, 494, 526, 538, 542, 546, 556, 572, 615, 626, 628, 659, 660, 667, 673, 684, 685, 703, 720, 739, 744, 746, 748, 750, 754, 758, 763, 765, 766, 770, 777, 779, 782, 784, 786, 787, 788, 792, 799, 800, 831, 834, 847, 855, 896, 900, 907, 926, 927, 941, 943, 991, 1022, 1023, 1025, 1041, 1066, 1079, 1143, 1184, 1192], "float32": [1, 15, 37, 57, 81, 157, 175, 245, 246, 285, 682, 739, 831, 834, 972, 1040, 1184], "lazi": [1, 63, 64, 65, 66, 68, 81, 86, 128, 144, 199, 213, 214, 285, 495, 675, 693, 696, 711, 720, 766, 767, 809, 812, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 834, 1191, 1192], "i16": [1, 81, 564, 720, 834, 1041, 1163, 1184, 1192], "i32": [1, 81, 103, 106, 110, 143, 144, 228, 285, 325, 362, 396, 544, 564, 596, 710, 720, 788, 831, 907, 945, 1040, 1068, 1124, 1184, 1192], "f32": [1, 81, 157, 165, 245, 285, 564, 720, 739, 747, 831, 834, 1040, 1184], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 60, 63, 65, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 128, 156, 158, 159, 160, 163, 165, 166, 168, 169, 171, 172, 177, 178, 179, 180, 181, 187, 189, 190, 192, 194, 198, 199, 202, 203, 206, 207, 208, 212, 213, 214, 215, 218, 219, 220, 221, 222, 226, 228, 232, 235, 236, 238, 239, 240, 242, 248, 250, 251, 252, 253, 254, 255, 256, 258, 260, 262, 263, 264, 265, 268, 269, 270, 271, 272, 275, 278, 279, 285, 292, 294, 298, 312, 313, 314, 316, 317, 323, 327, 330, 338, 339, 340, 341, 343, 345, 346, 358, 383, 385, 386, 387, 388, 389, 390, 391, 403, 405, 406, 408, 409, 410, 411, 413, 414, 417, 420, 421, 422, 423, 424, 428, 432, 433, 435, 436, 437, 439, 441, 444, 453, 455, 456, 457, 458, 459, 460, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 485, 489, 492, 493, 495, 510, 511, 512, 514, 515, 516, 517, 518, 519, 527, 528, 531, 532, 533, 534, 535, 538, 539, 540, 542, 543, 544, 545, 546, 559, 561, 562, 564, 565, 566, 570, 571, 572, 597, 598, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 634, 636, 639, 647, 653, 655, 659, 660, 661, 662, 669, 670, 671, 672, 673, 677, 679, 680, 681, 682, 684, 685, 686, 687, 690, 691, 695, 699, 700, 703, 704, 705, 710, 716, 720, 737, 740, 742, 743, 745, 746, 747, 750, 751, 753, 754, 755, 757, 758, 763, 766, 767, 768, 770, 772, 773, 776, 777, 778, 780, 781, 784, 785, 786, 788, 790, 792, 795, 796, 798, 799, 800, 801, 802, 803, 804, 807, 810, 812, 813, 816, 817, 818, 819, 820, 823, 826, 827, 831, 834, 837, 840, 853, 854, 855, 857, 863, 868, 875, 878, 882, 883, 884, 885, 887, 888, 903, 932, 934, 935, 936, 937, 938, 939, 940, 954, 955, 957, 958, 964, 977, 1004, 1006, 1007, 1008, 1011, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1034, 1042, 1047, 1060, 1065, 1066, 1068, 1072, 1075, 1079, 1082, 1085, 1086, 1089, 1093, 1094, 1098, 1099, 1153, 1155, 1156, 1157, 1162, 1168, 1169, 1175, 1184, 1191, 1192], "register_series_namespac": [1, 79, 80, 81], "math": [1, 15, 82, 344, 648, 649, 720, 879, 881, 1095, 1158, 1184], "mathshortcut": [1, 82], "": [1, 2, 16, 37, 40, 45, 57, 63, 66, 70, 82, 103, 104, 110, 114, 115, 116, 117, 119, 125, 129, 130, 133, 134, 146, 156, 157, 165, 167, 180, 181, 183, 184, 190, 198, 199, 206, 212, 214, 219, 220, 225, 228, 229, 236, 240, 244, 250, 252, 253, 254, 255, 260, 261, 285, 358, 381, 384, 403, 440, 460, 462, 476, 480, 493, 495, 504, 511, 520, 521, 527, 528, 540, 544, 572, 576, 583, 584, 585, 597, 601, 602, 604, 612, 613, 614, 617, 618, 621, 622, 641, 642, 643, 644, 650, 656, 661, 662, 671, 674, 675, 684, 685, 686, 687, 690, 691, 699, 700, 702, 703, 704, 716, 720, 737, 739, 746, 747, 757, 758, 760, 761, 767, 776, 788, 789, 796, 801, 802, 803, 804, 807, 808, 814, 819, 831, 834, 837, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 863, 864, 866, 867, 869, 870, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 896, 900, 902, 903, 906, 908, 909, 913, 915, 919, 920, 924, 927, 928, 930, 933, 941, 943, 944, 945, 948, 949, 950, 951, 955, 956, 957, 958, 960, 963, 964, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 1004, 1006, 1008, 1011, 1013, 1015, 1021, 1026, 1027, 1028, 1031, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1093, 1094, 1095, 1096, 1098, 1099, 1101, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1122, 1123, 1124, 1125, 1129, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1184], "_": [1, 78, 82, 214, 244, 285, 462, 584, 588, 589, 602, 603, 869, 1112, 1116, 1117, 1131, 1161, 1184], "squar": [1, 82, 271, 440, 573, 720, 819, 992, 1100, 1184], "cube": [1, 82, 328, 532, 720, 871, 1184], "s2": [1, 69, 87, 88, 139, 140, 175, 285, 873, 890, 977, 991, 1034, 1048, 1084, 1166, 1175, 1184], "renam": [1, 106, 114, 115, 153, 155, 182, 183, 184, 185, 228, 229, 260, 261, 264, 266, 285, 294, 299, 427, 431, 434, 439, 451, 454, 461, 465, 479, 484, 491, 492, 507, 515, 516, 517, 533, 547, 577, 590, 591, 592, 593, 599, 600, 606, 622, 624, 645, 683, 699, 702, 720, 736, 759, 760, 761, 762, 771, 783, 788, 789, 807, 808, 811, 812, 814, 831, 837, 841, 887, 974, 980, 1002, 1005, 1012, 1016, 1030, 1035, 1060, 1070, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1151, 1162, 1184], "n2": [1, 483], "in_plac": [1, 189, 234, 258, 285, 1063, 1092, 1099, 1184], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 63, 65, 67, 84, 85, 86, 103, 104, 108, 110, 112, 114, 115, 116, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 150, 152, 156, 157, 158, 159, 162, 171, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 190, 192, 193, 194, 196, 199, 200, 204, 209, 210, 212, 214, 215, 222, 223, 224, 225, 226, 228, 236, 242, 244, 246, 247, 250, 251, 252, 253, 254, 255, 256, 260, 265, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 293, 294, 295, 296, 297, 298, 299, 310, 318, 319, 321, 322, 325, 337, 338, 339, 340, 341, 343, 350, 352, 355, 358, 361, 363, 370, 371, 374, 375, 377, 378, 379, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 416, 417, 418, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 440, 442, 445, 446, 450, 477, 481, 483, 490, 495, 499, 500, 501, 502, 503, 504, 506, 507, 522, 523, 524, 526, 529, 530, 535, 540, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 564, 569, 571, 572, 575, 576, 578, 579, 581, 586, 587, 596, 602, 603, 605, 612, 613, 614, 617, 621, 622, 627, 634, 637, 640, 641, 642, 643, 644, 645, 647, 650, 651, 656, 657, 664, 665, 666, 667, 668, 673, 679, 680, 685, 693, 696, 702, 707, 708, 710, 711, 720, 737, 739, 740, 741, 742, 743, 749, 751, 753, 757, 758, 759, 760, 761, 762, 766, 767, 769, 771, 772, 776, 781, 786, 788, 790, 794, 796, 801, 802, 803, 804, 807, 813, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 831, 834, 838, 839, 840, 841, 851, 859, 864, 867, 870, 873, 874, 887, 894, 895, 897, 900, 902, 903, 904, 906, 910, 911, 913, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 947, 949, 950, 951, 958, 962, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 992, 996, 997, 1028, 1032, 1042, 1048, 1054, 1057, 1058, 1060, 1064, 1077, 1084, 1097, 1099, 1103, 1104, 1106, 1107, 1109, 1114, 1115, 1124, 1130, 1131, 1133, 1140, 1141, 1142, 1145, 1165, 1166, 1174, 1175, 1184, 1191, 1192], "s3": [1, 39, 118, 129, 130, 133, 134, 285, 1034, 1184], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 56, 63, 68, 75, 77, 78, 79, 81, 82, 86, 136, 142, 157, 160, 161, 162, 163, 164, 165, 166, 168, 172, 173, 176, 179, 187, 189, 198, 202, 203, 204, 205, 208, 216, 218, 220, 223, 225, 226, 227, 228, 232, 235, 237, 238, 239, 240, 245, 246, 247, 248, 254, 257, 258, 260, 285, 296, 298, 311, 336, 338, 341, 342, 351, 423, 443, 453, 456, 465, 471, 472, 473, 474, 512, 526, 532, 542, 543, 548, 564, 570, 572, 590, 593, 594, 595, 612, 628, 640, 646, 652, 656, 657, 658, 660, 662, 670, 672, 677, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 701, 704, 705, 709, 720, 739, 744, 746, 747, 748, 750, 754, 763, 766, 770, 772, 781, 784, 787, 788, 792, 799, 800, 807, 831, 834, 840, 881, 886, 907, 965, 991, 1004, 1007, 1016, 1022, 1023, 1025, 1056, 1066, 1069, 1071, 1074, 1076, 1078, 1080, 1118, 1121, 1122, 1123, 1140, 1184, 1192], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 63, 68, 78, 86, 136, 161, 162, 175, 182, 187, 191, 202, 222, 224, 225, 228, 239, 254, 258, 260, 278, 285, 292, 296, 298, 311, 324, 336, 338, 341, 344, 351, 423, 429, 439, 443, 453, 469, 477, 514, 526, 537, 542, 546, 548, 554, 556, 566, 570, 584, 615, 628, 654, 659, 660, 708, 720, 759, 763, 765, 770, 786, 788, 799, 807, 826, 831, 834, 888, 900, 911, 913, 921, 927, 941, 942, 977, 991, 1004, 1028, 1066, 1071, 1077, 1079, 1081, 1094, 1112, 1143, 1184], "27": [1, 82, 278, 341, 369, 376, 393, 720, 826, 1184, 1192], "16": [1, 40, 53, 72, 80, 181, 222, 260, 285, 338, 341, 423, 512, 532, 546, 596, 659, 669, 670, 673, 720, 758, 786, 794, 807, 831, 834, 927, 941, 1056, 1095, 1124, 1158, 1184], "64": [1, 52, 55, 74, 80, 82, 135, 152, 335, 512, 532, 720, 1056, 1184], "25": [1, 32, 40, 82, 110, 144, 162, 181, 199, 222, 256, 260, 285, 345, 355, 357, 375, 378, 392, 394, 535, 546, 549, 550, 551, 552, 553, 555, 556, 557, 633, 664, 665, 667, 668, 669, 675, 685, 707, 708, 720, 758, 767, 774, 786, 805, 807, 831, 834, 888, 889, 902, 927, 941, 947, 965, 1056, 1060, 1184], "125": [1, 40, 82, 285, 292, 720, 1056, 1184], "arg": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 172, 213, 247, 285, 531, 650, 674, 720, 754, 780, 831, 1042, 1165, 1166, 1184], "ani": [2, 3, 4, 5, 9, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 70, 71, 72, 73, 74, 75, 76, 77, 83, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 141, 143, 144, 146, 150, 153, 161, 165, 169, 171, 172, 175, 195, 196, 197, 202, 212, 213, 223, 224, 225, 242, 243, 246, 247, 252, 254, 255, 285, 292, 295, 296, 299, 325, 379, 398, 399, 408, 413, 416, 418, 429, 442, 449, 456, 490, 491, 493, 494, 495, 507, 510, 512, 516, 517, 522, 523, 526, 527, 531, 533, 542, 547, 548, 560, 575, 596, 608, 609, 610, 611, 612, 613, 614, 617, 623, 624, 627, 633, 640, 641, 644, 645, 656, 672, 681, 682, 685, 710, 720, 747, 753, 754, 780, 802, 804, 831, 834, 838, 840, 841, 890, 928, 954, 957, 977, 991, 1000, 1007, 1041, 1042, 1066, 1070, 1071, 1083, 1086, 1103, 1124, 1140, 1141, 1142, 1145, 1156, 1164, 1165, 1166, 1184, 1191, 1192], "kwarg": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 116, 161, 172, 213, 247, 285, 531, 720, 754, 780, 831, 1166, 1184, 1191], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 720, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1184, 1191], "fix": [2, 15, 119, 142, 144, 395, 549, 550, 551, 552, 553, 555, 556, 557, 669, 720, 944], "length": [2, 60, 86, 128, 142, 179, 181, 182, 184, 185, 222, 235, 285, 342, 378, 392, 476, 483, 504, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 570, 588, 589, 591, 593, 594, 595, 599, 601, 620, 693, 696, 697, 698, 711, 720, 758, 759, 761, 762, 781, 786, 795, 831, 873, 886, 896, 927, 941, 1027, 1034, 1053, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1098, 1116, 1117, 1119, 1121, 1122, 1123, 1127, 1129, 1148, 1184], "inner": [2, 60, 143, 198, 255, 285, 312, 313, 314, 315, 316, 346, 462, 482, 541, 631, 720, 766, 790, 804, 831, 853, 854, 855, 856, 857, 890, 1013, 1033, 1167, 1184], "polarsdatatyp": [2, 60, 114, 115, 121, 127, 128, 141, 142, 143, 144, 146, 153, 157, 166, 202, 285, 299, 325, 403, 491, 493, 494, 495, 586, 645, 671, 682, 683, 684, 685, 693, 696, 711, 716, 720, 739, 748, 831, 834, 841, 864, 1041, 1042, 1114, 1184], "pythondatatyp": [2, 60], "none": [2, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 57, 58, 59, 61, 63, 65, 66, 68, 78, 85, 88, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 153, 158, 162, 165, 170, 171, 179, 181, 182, 184, 185, 186, 191, 195, 198, 199, 200, 202, 204, 206, 210, 211, 214, 222, 223, 226, 232, 233, 235, 236, 242, 244, 247, 251, 252, 253, 254, 255, 256, 285, 295, 297, 298, 299, 311, 317, 330, 336, 338, 341, 343, 347, 348, 374, 377, 378, 392, 399, 400, 401, 402, 403, 406, 407, 408, 414, 419, 423, 424, 433, 435, 436, 437, 443, 445, 446, 455, 459, 464, 470, 471, 472, 473, 474, 476, 483, 491, 493, 494, 495, 503, 506, 508, 523, 524, 525, 528, 532, 535, 538, 539, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 562, 563, 564, 565, 566, 570, 571, 575, 576, 578, 580, 581, 584, 586, 587, 588, 589, 592, 594, 595, 596, 600, 601, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 617, 620, 621, 622, 631, 641, 642, 643, 644, 645, 653, 655, 657, 662, 664, 665, 666, 667, 668, 669, 671, 672, 681, 682, 683, 684, 685, 687, 691, 696, 697, 698, 701, 702, 704, 706, 707, 708, 709, 710, 720, 740, 741, 743, 747, 752, 753, 758, 759, 761, 762, 765, 766, 767, 769, 771, 772, 776, 779, 786, 790, 792, 793, 794, 795, 796, 802, 803, 804, 809, 811, 814, 819, 831, 834, 838, 839, 840, 841, 848, 849, 874, 875, 887, 888, 890, 891, 892, 908, 909, 910, 915, 926, 927, 941, 946, 947, 949, 950, 951, 955, 956, 957, 959, 963, 965, 967, 968, 969, 979, 984, 985, 988, 991, 992, 993, 996, 997, 1006, 1010, 1015, 1021, 1022, 1023, 1025, 1027, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1050, 1060, 1061, 1062, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1085, 1086, 1088, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1103, 1104, 1106, 1108, 1109, 1112, 1114, 1115, 1116, 1117, 1120, 1122, 1123, 1124, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1145, 1148, 1162, 1163, 1164, 1166, 1167, 1173, 1174, 1184, 1191], "width": [2, 31, 40, 114, 115, 128, 285, 312, 313, 314, 315, 316, 482, 831, 853, 854, 855, 856, 857, 1033], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 40, 45, 49, 57, 59, 65, 68, 80, 106, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 153, 156, 158, 167, 170, 171, 173, 179, 186, 187, 188, 190, 195, 196, 197, 199, 201, 202, 203, 204, 208, 209, 210, 220, 223, 226, 231, 232, 233, 235, 237, 238, 239, 240, 245, 248, 250, 254, 257, 259, 262, 269, 279, 285, 292, 317, 323, 342, 345, 400, 401, 402, 406, 407, 408, 414, 417, 419, 420, 444, 450, 453, 459, 460, 470, 475, 476, 480, 481, 482, 483, 526, 528, 531, 532, 535, 538, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 565, 570, 574, 583, 586, 591, 594, 595, 596, 597, 599, 601, 603, 604, 615, 620, 626, 627, 628, 632, 638, 640, 647, 656, 657, 663, 666, 669, 675, 677, 679, 680, 689, 692, 693, 696, 697, 698, 701, 702, 705, 706, 709, 711, 720, 737, 740, 751, 752, 753, 763, 767, 770, 781, 792, 793, 795, 797, 799, 800, 801, 805, 806, 810, 817, 827, 831, 848, 849, 863, 864, 873, 874, 886, 889, 948, 949, 950, 951, 955, 956, 957, 963, 964, 965, 991, 993, 994, 1001, 1002, 1003, 1004, 1010, 1011, 1021, 1026, 1027, 1031, 1032, 1033, 1034, 1044, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1059, 1060, 1062, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1089, 1090, 1093, 1098, 1101, 1111, 1114, 1119, 1122, 1123, 1124, 1125, 1127, 1129, 1131, 1132, 1143, 1148, 1154, 1155, 1156, 1157, 1163, 1168, 1173, 1184, 1191, 1192], "paramet": [2, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 78, 79, 80, 81, 82, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 156, 157, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 209, 210, 212, 213, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 235, 236, 237, 238, 239, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 269, 271, 277, 279, 285, 292, 294, 295, 296, 297, 298, 299, 309, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 330, 331, 332, 337, 338, 339, 340, 341, 342, 343, 345, 346, 350, 351, 352, 358, 374, 377, 378, 379, 381, 383, 384, 392, 395, 397, 398, 399, 400, 401, 402, 403, 406, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 429, 440, 442, 444, 449, 450, 451, 452, 453, 456, 459, 460, 462, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 490, 491, 492, 493, 494, 495, 506, 510, 512, 515, 516, 517, 522, 523, 526, 527, 528, 531, 532, 533, 535, 536, 538, 540, 541, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 620, 621, 622, 623, 624, 626, 627, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 720, 737, 739, 740, 742, 743, 745, 746, 747, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 770, 771, 772, 776, 777, 780, 781, 782, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 814, 817, 819, 825, 827, 831, 834, 837, 838, 839, 840, 841, 850, 857, 858, 859, 860, 861, 862, 863, 864, 868, 874, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 889, 890, 895, 896, 897, 903, 923, 926, 927, 928, 930, 932, 933, 941, 944, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 963, 964, 965, 968, 969, 979, 987, 988, 992, 994, 1000, 1001, 1002, 1003, 1004, 1007, 1010, 1011, 1013, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1036, 1041, 1042, 1056, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1093, 1097, 1098, 1099, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1145, 1148, 1149, 1151, 1155, 1156, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1172, 1173, 1174, 1175, 1184, 1191], "The": [2, 25, 38, 39, 40, 45, 59, 60, 63, 67, 69, 70, 78, 83, 84, 88, 103, 105, 106, 107, 109, 112, 114, 115, 116, 117, 119, 123, 124, 126, 128, 132, 134, 137, 138, 139, 140, 148, 162, 164, 165, 166, 168, 169, 172, 179, 180, 181, 184, 186, 191, 196, 199, 202, 207, 212, 222, 223, 224, 225, 228, 229, 246, 253, 256, 260, 261, 264, 271, 285, 294, 317, 318, 319, 320, 343, 347, 348, 355, 369, 374, 375, 378, 381, 392, 393, 403, 406, 409, 414, 419, 455, 481, 493, 495, 527, 535, 538, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 566, 569, 575, 579, 580, 583, 586, 592, 594, 595, 600, 606, 607, 608, 609, 610, 611, 612, 671, 675, 685, 697, 698, 699, 702, 710, 712, 713, 715, 716, 720, 721, 722, 725, 727, 728, 729, 747, 750, 754, 758, 761, 763, 765, 767, 770, 772, 777, 781, 786, 788, 789, 790, 803, 807, 808, 812, 819, 831, 837, 840, 858, 859, 860, 874, 887, 888, 891, 892, 900, 918, 923, 924, 927, 930, 941, 942, 954, 955, 958, 963, 1006, 1032, 1042, 1060, 1062, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1086, 1094, 1097, 1103, 1107, 1108, 1114, 1120, 1122, 1123, 1128, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1176, 1178, 1180, 1184, 1185, 1188, 1189, 1190, 1192], "datatyp": [2, 37, 43, 57, 60, 76, 103, 105, 106, 107, 109, 111, 119, 121, 123, 124, 127, 132, 146, 166, 168, 175, 227, 285, 325, 403, 564, 631, 671, 682, 720, 732, 750, 787, 790, 831, 841, 864, 888, 979, 986, 988, 990, 1042, 1091, 1167, 1184], "valu": [2, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 57, 60, 61, 63, 67, 69, 76, 78, 86, 88, 106, 108, 114, 115, 116, 117, 119, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 156, 162, 165, 169, 170, 171, 172, 176, 179, 181, 184, 186, 187, 191, 195, 196, 199, 201, 202, 203, 204, 205, 206, 208, 210, 212, 214, 215, 216, 218, 222, 223, 224, 225, 226, 232, 233, 236, 237, 238, 239, 242, 243, 247, 250, 251, 254, 255, 256, 257, 267, 268, 270, 272, 273, 275, 276, 285, 291, 292, 293, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 341, 342, 343, 345, 347, 348, 351, 355, 369, 375, 393, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 438, 441, 442, 443, 445, 446, 447, 448, 451, 452, 453, 455, 458, 459, 460, 463, 464, 466, 467, 468, 470, 475, 478, 480, 485, 487, 489, 490, 493, 494, 495, 496, 497, 498, 509, 510, 511, 512, 513, 520, 521, 522, 523, 525, 527, 528, 531, 532, 535, 536, 538, 541, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 583, 586, 587, 594, 595, 597, 598, 601, 603, 604, 605, 620, 623, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 640, 641, 643, 646, 653, 655, 657, 659, 660, 661, 662, 672, 673, 678, 681, 682, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 703, 704, 710, 720, 735, 736, 737, 747, 752, 753, 754, 758, 761, 764, 765, 767, 773, 774, 775, 776, 778, 779, 782, 784, 786, 790, 792, 793, 796, 797, 798, 801, 804, 805, 815, 816, 818, 820, 821, 823, 824, 831, 834, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 859, 860, 861, 862, 868, 872, 875, 876, 877, 879, 880, 881, 886, 887, 888, 889, 891, 892, 896, 900, 918, 924, 942, 948, 949, 950, 951, 954, 955, 956, 957, 960, 962, 963, 964, 965, 966, 968, 969, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 989, 993, 994, 996, 997, 998, 999, 1002, 1003, 1004, 1006, 1009, 1010, 1011, 1014, 1015, 1017, 1018, 1019, 1021, 1026, 1031, 1036, 1041, 1043, 1044, 1046, 1047, 1049, 1051, 1052, 1053, 1055, 1056, 1059, 1060, 1061, 1062, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1089, 1090, 1094, 1095, 1096, 1097, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1122, 1123, 1125, 1126, 1129, 1131, 1132, 1133, 1148, 1154, 1155, 1156, 1157, 1158, 1159, 1165, 1166, 1167, 1170, 1172, 1174, 1175, 1184, 1192], "within": [2, 60, 137, 138, 139, 140, 180, 181, 182, 183, 184, 185, 199, 222, 256, 285, 538, 546, 572, 720, 758, 759, 761, 762, 767, 786, 831, 1191], "each": [2, 37, 40, 57, 60, 78, 115, 116, 132, 137, 138, 139, 140, 142, 179, 180, 181, 182, 183, 184, 185, 197, 199, 202, 212, 222, 226, 247, 253, 255, 256, 263, 264, 267, 269, 271, 279, 285, 343, 378, 392, 427, 428, 431, 432, 460, 464, 465, 470, 480, 488, 495, 535, 538, 545, 551, 553, 555, 557, 559, 565, 572, 584, 588, 589, 590, 593, 603, 604, 647, 650, 655, 679, 680, 702, 710, 720, 742, 758, 759, 761, 762, 767, 781, 786, 803, 804, 812, 814, 815, 817, 819, 827, 831, 873, 887, 927, 941, 974, 975, 980, 981, 1011, 1015, 1016, 1021, 1031, 1060, 1062, 1069, 1082, 1093, 1112, 1116, 1117, 1118, 1121, 1131, 1132, 1153, 1184, 1192], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 716, 720, 732, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 960, 963, 964, 965, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 993, 996, 997, 1004, 1006, 1007, 1008, 1011, 1013, 1015, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1031, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1093, 1094, 1095, 1096, 1098, 1099, 1101, 1103, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1122, 1123, 1124, 1125, 1126, 1129, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1184, 1191], "dtype": [2, 15, 40, 48, 69, 81, 87, 88, 103, 105, 107, 109, 110, 114, 115, 116, 117, 123, 124, 125, 128, 141, 142, 143, 144, 146, 152, 157, 181, 182, 184, 185, 199, 222, 245, 246, 247, 254, 285, 299, 325, 326, 340, 341, 395, 403, 449, 481, 489, 491, 493, 494, 495, 540, 541, 546, 549, 550, 551, 552, 553, 555, 556, 557, 564, 586, 612, 625, 627, 631, 636, 645, 647, 657, 671, 675, 679, 680, 682, 683, 684, 685, 693, 696, 702, 711, 720, 739, 758, 759, 761, 762, 767, 786, 831, 834, 853, 854, 856, 864, 866, 867, 869, 874, 884, 885, 888, 889, 944, 948, 972, 979, 988, 1000, 1032, 1033, 1040, 1041, 1067, 1084, 1091, 1114, 1140, 1154, 1163, 1165, 1166, 1167, 1171, 1184, 1192], "method": [2, 3, 4, 5, 9, 36, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 141, 150, 153, 155, 165, 169, 180, 182, 183, 184, 185, 191, 196, 202, 210, 216, 223, 224, 225, 232, 252, 260, 266, 271, 277, 285, 292, 295, 296, 299, 324, 330, 381, 384, 398, 399, 406, 413, 416, 418, 423, 427, 431, 434, 439, 442, 451, 454, 461, 465, 475, 479, 484, 490, 491, 492, 495, 510, 512, 514, 516, 517, 518, 519, 522, 523, 526, 532, 533, 536, 538, 547, 549, 550, 551, 552, 553, 555, 556, 557, 562, 577, 590, 591, 592, 593, 599, 600, 606, 608, 609, 610, 611, 615, 620, 623, 624, 633, 635, 640, 656, 664, 685, 694, 696, 707, 712, 713, 715, 716, 720, 721, 722, 725, 726, 727, 728, 729, 732, 736, 743, 745, 747, 756, 759, 760, 761, 762, 765, 771, 782, 783, 792, 802, 807, 811, 814, 819, 825, 831, 840, 841, 875, 930, 933, 954, 955, 968, 974, 980, 1002, 1005, 1012, 1016, 1026, 1030, 1035, 1042, 1061, 1062, 1070, 1076, 1089, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1143, 1148, 1167, 1176, 1178, 1180, 1184, 1185, 1188, 1189, 1190], "attribut": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 70, 71, 72, 73, 74, 75, 76, 77, 141, 285, 712, 713, 715, 716, 721, 722, 725, 727, 728, 729, 831, 1176, 1178, 1180, 1185, 1188, 1189, 1190], "A": [5, 18, 37, 40, 57, 63, 66, 84, 85, 110, 114, 115, 116, 117, 128, 130, 135, 148, 175, 181, 198, 199, 214, 242, 254, 255, 256, 260, 261, 285, 291, 347, 348, 351, 398, 399, 406, 416, 418, 426, 430, 433, 435, 442, 483, 490, 493, 504, 522, 523, 543, 548, 549, 550, 551, 552, 553, 555, 556, 557, 576, 577, 578, 583, 584, 585, 587, 597, 598, 620, 654, 669, 670, 674, 720, 758, 766, 767, 784, 804, 807, 808, 831, 834, 891, 892, 896, 955, 1071, 1072, 1073, 1075, 1078, 1079, 1080, 1104, 1105, 1106, 1111, 1112, 1113, 1115, 1125, 1126, 1148, 1184, 1191], "encod": [5, 77, 114, 115, 128, 244, 285, 319, 415, 579, 720, 859, 1107], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 57, 58, 59, 78, 79, 104, 106, 109, 114, 115, 116, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 160, 165, 174, 180, 181, 182, 183, 184, 185, 186, 196, 199, 206, 222, 226, 228, 235, 244, 246, 251, 252, 254, 260, 285, 295, 297, 299, 324, 330, 343, 395, 419, 429, 454, 461, 470, 471, 472, 473, 474, 476, 479, 481, 483, 484, 494, 495, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 565, 569, 570, 575, 592, 600, 601, 606, 607, 608, 609, 610, 611, 612, 613, 614, 617, 637, 641, 643, 647, 651, 664, 665, 667, 668, 679, 680, 693, 696, 697, 698, 702, 707, 708, 710, 711, 720, 732, 742, 747, 749, 757, 758, 759, 760, 761, 762, 766, 767, 771, 772, 776, 786, 788, 790, 795, 802, 807, 811, 814, 819, 831, 838, 839, 840, 870, 875, 887, 944, 963, 977, 1005, 1012, 1021, 1022, 1023, 1024, 1025, 1027, 1030, 1032, 1034, 1035, 1041, 1042, 1060, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1086, 1093, 1097, 1098, 1103, 1120, 1128, 1129, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1145, 1165, 1172, 1184, 1192], "string": [5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 57, 63, 69, 77, 87, 88, 110, 114, 115, 116, 117, 128, 137, 138, 139, 140, 141, 142, 143, 146, 149, 156, 175, 179, 180, 181, 183, 199, 212, 214, 222, 225, 228, 229, 236, 245, 250, 251, 254, 256, 260, 261, 264, 285, 292, 321, 327, 374, 378, 381, 384, 392, 403, 405, 411, 415, 424, 462, 494, 506, 527, 531, 546, 549, 550, 551, 552, 553, 555, 556, 557, 572, 575, 576, 578, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 620, 642, 644, 650, 653, 654, 655, 662, 664, 665, 667, 668, 674, 687, 691, 699, 702, 704, 707, 708, 710, 720, 737, 749, 756, 757, 758, 760, 767, 786, 788, 789, 790, 796, 801, 807, 808, 811, 812, 831, 834, 861, 867, 868, 923, 927, 930, 933, 941, 953, 969, 1013, 1102, 1103, 1104, 1106, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1146, 1147, 1148, 1163, 1184, 1192], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 415, 720, 745, 756, 783, 831], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 456, 584, 1007, 1112], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 78, 84, 85, 86, 87, 88, 103, 104, 108, 110, 114, 115, 119, 120, 122, 124, 125, 126, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 152, 156, 157, 158, 159, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 194, 199, 212, 214, 222, 225, 226, 230, 234, 236, 242, 244, 246, 247, 250, 251, 252, 253, 255, 256, 258, 260, 268, 270, 272, 275, 285, 294, 295, 296, 297, 298, 299, 309, 316, 318, 319, 321, 322, 325, 337, 338, 339, 340, 341, 342, 343, 361, 377, 379, 392, 397, 398, 399, 400, 401, 402, 416, 418, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 440, 442, 445, 446, 450, 456, 470, 477, 481, 485, 490, 491, 493, 495, 499, 500, 501, 502, 503, 506, 522, 523, 524, 526, 529, 530, 535, 538, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 564, 569, 571, 572, 575, 576, 578, 579, 581, 596, 597, 598, 602, 603, 605, 612, 613, 614, 617, 622, 634, 637, 640, 641, 642, 643, 644, 645, 647, 650, 651, 656, 659, 664, 665, 666, 667, 668, 679, 680, 682, 685, 693, 696, 702, 707, 708, 711, 720, 737, 739, 740, 742, 743, 749, 751, 753, 754, 757, 758, 759, 760, 761, 762, 766, 767, 771, 772, 776, 781, 786, 791, 794, 796, 801, 802, 803, 804, 807, 816, 818, 820, 823, 831, 834, 838, 839, 840, 841, 850, 857, 859, 864, 867, 870, 874, 882, 883, 884, 885, 886, 887, 906, 926, 928, 941, 947, 949, 950, 951, 958, 962, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 996, 997, 1001, 1002, 1003, 1007, 1021, 1028, 1032, 1036, 1042, 1054, 1057, 1058, 1060, 1062, 1063, 1064, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1084, 1085, 1086, 1087, 1092, 1097, 1099, 1103, 1104, 1106, 1107, 1109, 1124, 1125, 1126, 1130, 1131, 1133, 1140, 1141, 1142, 1145, 1164, 1165, 1166, 1169, 1172, 1174, 1184, 1191], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 57, 285, 558, 615, 720, 831, 1081, 1143, 1184], "temporari": 6, "remov": [6, 9, 89, 114, 115, 128, 152, 163, 244, 285, 299, 392, 403, 492, 495, 515, 592, 600, 606, 607, 608, 609, 610, 611, 671, 720, 746, 831, 840, 887, 927, 941, 1060, 1120, 1128, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1184], "onc": [6, 66, 114, 115, 119, 148, 202, 224, 226, 264, 285, 324, 470, 495, 559, 610, 611, 720, 738, 812, 831, 1021, 1042, 1082, 1138, 1139, 1184], "stabil": 6, "current": [6, 7, 8, 10, 11, 35, 65, 104, 110, 116, 117, 133, 158, 159, 198, 199, 285, 357, 378, 483, 528, 720, 732, 740, 741, 742, 766, 767, 831, 834, 874, 878, 894, 902, 927, 1056, 1184, 1191], "consid": [6, 85, 87, 88, 114, 115, 128, 134, 137, 138, 139, 140, 165, 176, 202, 206, 224, 252, 254, 255, 285, 299, 330, 342, 378, 493, 495, 549, 550, 551, 552, 553, 555, 556, 557, 659, 673, 716, 720, 743, 747, 763, 770, 776, 802, 819, 831, 867, 870, 875, 886, 927, 965, 979, 1042, 1060, 1084, 1085, 1086, 1184], "beta": 6, "cfg": [7, 9, 22, 150], "previous": [7, 8], "save": [7, 8, 11, 181, 199, 222, 256, 285, 349, 357, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 707, 708, 716, 720, 732, 758, 767, 786, 831, 902, 923, 927, 941], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 78, 114, 116, 118, 119, 120, 122, 126, 129, 130, 131, 133, 134, 136, 141, 142, 143, 144, 145, 146, 147, 181, 195, 199, 206, 242, 246, 251, 255, 285, 440, 547, 549, 550, 551, 552, 553, 555, 556, 557, 569, 601, 637, 682, 702, 710, 720, 732, 758, 766, 767, 776, 790, 804, 831, 834, 988, 992, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1097, 1129, 1162, 1172, 1184], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 40, 57, 63, 64, 65, 78, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 162, 163, 167, 169, 174, 179, 181, 184, 196, 197, 199, 200, 206, 214, 218, 222, 223, 225, 226, 228, 229, 244, 251, 252, 254, 255, 256, 285, 337, 343, 344, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 403, 415, 423, 440, 470, 483, 495, 520, 521, 523, 528, 531, 535, 537, 546, 548, 549, 550, 552, 555, 556, 557, 559, 572, 583, 584, 586, 596, 608, 609, 610, 611, 612, 613, 614, 617, 635, 648, 649, 653, 663, 664, 665, 666, 667, 669, 696, 701, 706, 707, 708, 716, 719, 720, 739, 745, 746, 751, 756, 758, 761, 767, 776, 783, 784, 786, 788, 789, 802, 804, 809, 831, 834, 840, 887, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 948, 954, 988, 992, 1021, 1034, 1051, 1052, 1053, 1056, 1060, 1071, 1082, 1111, 1112, 1114, 1124, 1138, 1139, 1140, 1141, 1142, 1145, 1175, 1184, 1191, 1192], "json": [7, 8, 10, 11, 43, 44, 123, 124, 130, 132, 285, 415, 508, 586, 587, 720, 732, 745, 756, 783, 790, 811, 831, 1114, 1115], "produc": [7, 8, 143, 144, 146, 451, 452, 503, 684, 771, 772, 831, 1002, 1003], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 285, 508, 745, 783, 790, 811, 831, 840, 954, 1184], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 285, 508, 561, 587, 720, 745, 783, 790, 794, 811, 831, 1087, 1115, 1184, 1192], "load": [8, 10, 11, 106, 108, 116, 118, 119, 125, 129, 130, 145, 147, 285, 720, 732, 763, 770, 831, 1192], "reset": [9, 150], "default": [9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 59, 78, 85, 86, 103, 105, 106, 107, 108, 109, 110, 114, 115, 117, 119, 123, 124, 125, 126, 128, 137, 139, 141, 142, 143, 144, 145, 146, 150, 162, 165, 167, 180, 181, 182, 183, 184, 185, 186, 196, 198, 199, 206, 212, 214, 222, 223, 224, 225, 226, 232, 237, 244, 252, 254, 255, 257, 262, 285, 294, 295, 297, 327, 343, 377, 378, 392, 397, 399, 400, 401, 402, 419, 470, 475, 476, 481, 483, 486, 494, 503, 520, 521, 523, 528, 535, 538, 546, 549, 550, 551, 552, 553, 555, 556, 557, 559, 562, 565, 574, 575, 583, 592, 596, 600, 601, 606, 607, 608, 609, 612, 613, 614, 617, 637, 638, 641, 643, 647, 651, 656, 664, 665, 666, 667, 668, 675, 679, 680, 682, 693, 696, 701, 702, 707, 708, 709, 711, 720, 742, 743, 747, 749, 757, 758, 759, 760, 761, 762, 766, 767, 776, 786, 790, 792, 797, 802, 805, 811, 831, 838, 839, 840, 868, 875, 887, 888, 926, 927, 941, 947, 948, 949, 950, 951, 963, 1021, 1026, 1027, 1032, 1034, 1041, 1051, 1052, 1056, 1060, 1062, 1082, 1089, 1093, 1101, 1103, 1104, 1111, 1120, 1124, 1128, 1129, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1145, 1172, 1173, 1184, 1192], "state": [9, 84, 85, 96, 659, 732, 742, 743, 749, 751, 781, 794, 831], "note": [9, 15, 25, 39, 40, 63, 67, 68, 69, 78, 85, 87, 88, 103, 104, 105, 107, 109, 110, 114, 116, 117, 118, 119, 123, 124, 126, 129, 130, 133, 134, 137, 139, 142, 144, 146, 148, 150, 152, 156, 161, 162, 170, 181, 182, 184, 185, 195, 196, 198, 199, 202, 210, 213, 214, 222, 223, 224, 225, 232, 243, 246, 250, 251, 255, 256, 260, 285, 330, 340, 341, 347, 348, 370, 371, 374, 378, 392, 424, 433, 435, 439, 456, 475, 481, 493, 495, 514, 516, 517, 518, 519, 533, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 569, 576, 583, 584, 585, 588, 589, 597, 607, 608, 609, 612, 620, 624, 625, 633, 659, 664, 665, 667, 668, 669, 673, 682, 693, 695, 696, 707, 708, 710, 711, 716, 720, 731, 737, 743, 751, 752, 758, 759, 761, 762, 763, 767, 770, 784, 786, 792, 794, 796, 801, 804, 807, 831, 875, 884, 885, 888, 891, 892, 919, 920, 923, 941, 962, 1007, 1026, 1032, 1042, 1077, 1085, 1086, 1089, 1092, 1097, 1104, 1111, 1112, 1113, 1116, 1117, 1125, 1135, 1136, 1137, 1140, 1148, 1154, 1165, 1184, 1191], "oper": [9, 40, 69, 86, 88, 93, 94, 103, 105, 106, 107, 108, 109, 114, 116, 126, 153, 159, 169, 172, 175, 180, 183, 190, 200, 202, 207, 210, 212, 213, 217, 222, 225, 226, 232, 241, 246, 247, 251, 254, 263, 264, 285, 292, 293, 296, 337, 338, 339, 340, 341, 342, 398, 399, 413, 416, 418, 439, 442, 470, 471, 472, 473, 474, 475, 483, 490, 507, 510, 512, 514, 516, 517, 522, 523, 526, 532, 533, 540, 546, 559, 562, 623, 624, 633, 640, 641, 643, 654, 655, 670, 720, 732, 741, 751, 757, 760, 763, 766, 770, 776, 777, 786, 792, 812, 831, 840, 878, 882, 883, 884, 885, 886, 954, 1021, 1022, 1023, 1024, 1025, 1026, 1064, 1082, 1089, 1160, 1164, 1165, 1166, 1174, 1184], "environ": [9, 35, 133, 145, 148], "local": [9, 39, 116, 118, 129, 130, 133, 146, 285, 392, 529, 530, 720, 867, 869, 898, 899, 931, 941, 1057, 1058, 1184], "non": [9, 37, 39, 40, 49, 57, 78, 108, 135, 182, 185, 197, 206, 222, 228, 229, 232, 251, 255, 260, 261, 285, 330, 424, 483, 494, 528, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 577, 578, 584, 588, 620, 642, 644, 653, 654, 655, 662, 669, 687, 691, 697, 698, 699, 702, 704, 720, 759, 762, 776, 786, 788, 789, 792, 804, 807, 808, 831, 875, 969, 1034, 1056, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1089, 1105, 1106, 1112, 1116, 1148, 1165, 1184], "env": [9, 147], "back": [9, 78, 169, 247, 285, 527, 618, 720, 790, 831, 840, 954, 1146, 1166, 1184], "contain": [10, 37, 38, 39, 40, 57, 78, 83, 104, 105, 108, 110, 116, 118, 129, 130, 137, 138, 143, 156, 165, 181, 184, 197, 210, 214, 250, 255, 285, 295, 297, 299, 321, 322, 429, 494, 495, 575, 581, 583, 585, 587, 604, 605, 620, 641, 643, 685, 720, 737, 747, 758, 761, 781, 801, 804, 831, 834, 838, 839, 887, 1041, 1048, 1060, 1103, 1109, 1111, 1113, 1115, 1132, 1133, 1148, 1160, 1184], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 57, 58, 59, 285, 790, 811, 831], "leav": [11, 206, 285, 483, 776, 831], "directli": [11, 35, 65, 85, 116, 144, 146, 150, 225, 285, 400, 401, 402, 696, 720, 743, 831, 949, 950, 951, 1184, 1192], "json_fil": 11, "ascii": [12, 25, 588, 589, 591, 599, 620, 1116, 1117, 1119, 1127, 1148], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 57, 114, 115, 128, 285, 374, 582, 584, 588, 589, 591, 592, 593, 594, 595, 599, 600, 602, 603, 606, 607, 608, 609, 610, 611, 620, 781, 831, 834, 923, 1110, 1112, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1127, 1128, 1130, 1131, 1134, 1135, 1136, 1137, 1148], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 179, 285], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 64, 65, 66, 68, 103, 110, 114, 115, 118, 119, 128, 129, 130, 214, 241, 247, 254, 255, 285, 804, 831, 1166, 1184, 1191], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 39, 40, 43, 45, 57, 58, 59, 63, 78, 84, 85, 104, 108, 110, 114, 115, 116, 119, 120, 122, 124, 125, 126, 128, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 156, 157, 158, 159, 162, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 194, 196, 199, 200, 204, 209, 210, 212, 214, 215, 222, 223, 224, 225, 226, 230, 234, 236, 242, 244, 246, 247, 250, 251, 252, 255, 256, 258, 260, 267, 268, 270, 272, 273, 275, 278, 285, 295, 296, 297, 299, 309, 316, 318, 321, 322, 337, 338, 339, 340, 341, 342, 343, 361, 377, 379, 392, 397, 398, 399, 400, 401, 402, 416, 418, 424, 425, 426, 428, 429, 430, 432, 433, 435, 436, 437, 438, 440, 442, 445, 446, 450, 456, 470, 477, 481, 485, 490, 491, 493, 495, 499, 502, 504, 506, 522, 523, 524, 526, 529, 530, 535, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 564, 569, 571, 572, 575, 576, 578, 581, 586, 596, 597, 598, 602, 603, 605, 612, 613, 614, 634, 637, 640, 641, 642, 643, 644, 647, 650, 651, 656, 659, 664, 665, 666, 667, 668, 679, 680, 682, 693, 696, 702, 707, 708, 710, 711, 720, 737, 739, 740, 741, 742, 743, 749, 751, 757, 758, 759, 760, 761, 762, 766, 767, 769, 771, 772, 781, 786, 791, 794, 796, 801, 802, 804, 807, 815, 816, 818, 820, 821, 823, 826, 831, 834, 838, 839, 840, 850, 857, 864, 867, 870, 873, 874, 882, 883, 884, 885, 886, 887, 906, 926, 928, 941, 947, 949, 950, 951, 958, 962, 969, 970, 971, 973, 975, 977, 978, 979, 981, 982, 983, 984, 985, 987, 988, 989, 992, 996, 997, 1007, 1021, 1028, 1032, 1036, 1048, 1054, 1057, 1058, 1060, 1062, 1063, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1084, 1087, 1092, 1097, 1099, 1103, 1104, 1106, 1109, 1114, 1124, 1125, 1126, 1130, 1131, 1133, 1140, 1141, 1142, 1165, 1166, 1169, 1172, 1174, 1175, 1184, 1191], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 110], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 57, 113, 114, 115, 116, 128, 134, 168, 179, 196, 206, 224, 225, 243, 283, 285, 378, 381, 384, 506, 612, 613, 614, 617, 669, 750, 756, 776, 790, 811, 831, 930, 933, 1140, 1141, 1142, 1145, 1183], "style": [12, 25, 40, 116, 126, 133, 214, 285], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 292, 584, 597, 608, 720, 834, 1112, 1125], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 292, 578, 584, 720, 1106, 1112, 1162, 1184], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 60, 63, 78, 80, 82, 86, 104, 106, 134, 144, 158, 159, 161, 162, 163, 166, 170, 171, 175, 178, 179, 180, 181, 190, 191, 198, 199, 204, 205, 214, 215, 216, 235, 236, 237, 257, 260, 264, 268, 270, 272, 273, 274, 275, 277, 278, 285, 291, 294, 301, 302, 303, 304, 305, 306, 325, 328, 329, 333, 334, 335, 342, 343, 344, 347, 348, 379, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 412, 413, 416, 418, 423, 433, 435, 436, 437, 439, 440, 442, 456, 467, 486, 487, 488, 490, 496, 497, 498, 509, 512, 514, 520, 521, 522, 523, 528, 532, 535, 536, 537, 538, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 567, 568, 569, 573, 574, 629, 630, 633, 638, 648, 649, 652, 653, 654, 656, 658, 670, 671, 685, 688, 689, 700, 701, 709, 716, 720, 740, 746, 752, 753, 757, 758, 765, 766, 767, 774, 775, 782, 796, 797, 805, 807, 809, 812, 816, 818, 820, 821, 822, 823, 825, 826, 831, 834, 842, 843, 844, 845, 846, 847, 871, 872, 879, 880, 881, 886, 887, 888, 891, 892, 928, 949, 950, 951, 956, 960, 965, 968, 1007, 1056, 1060, 1062, 1071, 1073, 1074, 1076, 1077, 1078, 1080, 1081, 1095, 1096, 1100, 1158, 1159, 1171, 1184, 1192], "multi": [13, 40, 114, 115, 285, 403, 583, 720, 1111], "automat": [13, 65, 68, 103, 105, 106, 107, 109, 110, 114, 115, 116, 117, 119, 123, 124, 128, 132, 144, 146, 148, 228, 260, 285, 324, 494, 607, 608, 609, 720, 788, 807, 831, 1041, 1135, 1136, 1137, 1184, 1191], "turn": [13, 57, 58, 59, 84, 85, 114, 115, 128, 618, 742, 743, 749, 751, 771, 772, 781, 831, 1146], "struct": [13, 110, 210, 228, 249, 253, 260, 285, 343, 483, 494, 535, 544, 545, 585, 586, 603, 604, 637, 659, 660, 662, 684, 720, 788, 803, 807, 819, 831, 887, 1034, 1060, 1068, 1113, 1114, 1129, 1131, 1132, 1184], "v": [13, 14, 45, 65, 66, 167, 285, 560, 720, 1083, 1184], "v2": [13, 120, 131], "out": [13, 19, 57, 58, 59, 110, 136, 222, 225, 285, 319, 459, 481, 576, 579, 710, 786, 831, 859, 1010, 1032, 1104, 1107], "separ": [14, 15, 29, 32, 37, 57, 112, 114, 115, 128, 212, 214, 244, 251, 253, 285, 299, 457, 462, 495, 582, 655, 659, 660, 720, 803, 831, 1008, 1013, 1110, 1153, 1161, 1184], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 59, 63, 115, 180, 181, 182, 183, 184, 185, 197, 210, 212, 214, 222, 225, 254, 256, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285, 293, 342, 405, 411, 417, 456, 495, 503, 505, 527, 538, 545, 546, 571, 572, 576, 583, 584, 585, 597, 627, 637, 685, 720, 757, 758, 759, 760, 761, 762, 786, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 834, 886, 1007, 1069, 1104, 1111, 1112, 1113, 1125, 1172, 1184], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 834], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 114, 115, 137, 138, 139, 140, 181, 182, 184, 185, 198, 199, 222, 255, 285, 343, 400, 401, 402, 424, 471, 472, 473, 474, 535, 546, 549, 550, 551, 552, 553, 555, 556, 557, 560, 569, 599, 653, 664, 665, 667, 668, 707, 708, 720, 758, 759, 761, 762, 766, 767, 786, 804, 831, 887, 949, 950, 951, 969, 1022, 1023, 1024, 1025, 1060, 1083, 1097, 1127, 1184], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 57, 285, 831], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 115, 136, 137, 139, 166, 179, 180, 197, 200, 245, 263, 285, 422, 506, 720, 742, 764, 831, 977, 1163, 1184, 1192], "876": 14, "543": 14, "010": [14, 596, 1124], "101": [14, 32, 351, 596, 1124, 1192], "000": [14, 15, 32, 40, 285, 1192], "123": [14, 578, 584, 598, 620, 834, 1106, 1112, 1126, 1148, 1162, 1184], "456": [14, 15, 351, 834, 896, 1162, 1184], "780": 14, "precis": [15, 16, 37, 39, 40, 48, 49, 57, 116, 196, 224, 225, 243, 285, 350, 615, 831, 834, 895, 1143], "control": [15, 16, 40, 68, 85, 86, 142, 285, 743, 749, 831], "number": [15, 16, 17, 18, 19, 22, 30, 37, 40, 45, 57, 59, 69, 78, 88, 97, 103, 105, 107, 109, 112, 114, 115, 117, 119, 123, 124, 125, 128, 132, 133, 135, 142, 144, 145, 147, 148, 156, 158, 167, 168, 170, 171, 179, 187, 196, 197, 200, 201, 209, 210, 226, 232, 233, 237, 239, 250, 254, 257, 267, 269, 279, 285, 310, 317, 323, 336, 342, 343, 345, 359, 362, 367, 369, 379, 393, 394, 396, 400, 401, 402, 406, 408, 414, 420, 433, 435, 443, 444, 453, 460, 464, 465, 470, 475, 480, 483, 531, 535, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 562, 563, 565, 574, 588, 589, 590, 593, 597, 603, 604, 615, 626, 632, 638, 656, 657, 669, 677, 697, 698, 701, 705, 709, 720, 737, 740, 750, 751, 752, 753, 763, 770, 781, 792, 793, 797, 799, 801, 805, 815, 817, 827, 831, 863, 874, 886, 887, 889, 904, 907, 916, 918, 928, 942, 943, 945, 948, 949, 950, 951, 955, 957, 964, 976, 993, 994, 1004, 1011, 1015, 1016, 1021, 1026, 1031, 1034, 1048, 1049, 1060, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1089, 1090, 1093, 1101, 1116, 1117, 1118, 1121, 1125, 1131, 1132, 1143, 1155, 1168, 1173, 1184, 1192], "place": [15, 16, 37, 57, 156, 164, 169, 189, 190, 214, 219, 225, 233, 236, 250, 258, 285, 309, 462, 563, 571, 720, 737, 793, 796, 801, 831, 840, 850, 954, 1013, 1063, 1090, 1099, 1184], "float": [15, 16, 37, 40, 51, 52, 57, 119, 134, 137, 138, 139, 140, 141, 144, 146, 152, 162, 167, 170, 199, 216, 226, 233, 277, 285, 329, 343, 347, 348, 379, 397, 398, 399, 400, 401, 402, 407, 412, 416, 418, 423, 426, 430, 433, 435, 436, 437, 442, 450, 470, 486, 490, 496, 509, 520, 521, 522, 523, 532, 535, 536, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 633, 652, 688, 689, 694, 696, 701, 709, 720, 752, 767, 782, 793, 794, 825, 831, 834, 864, 872, 887, 888, 890, 891, 892, 928, 947, 948, 949, 950, 951, 956, 960, 965, 976, 992, 1001, 1002, 1003, 1021, 1037, 1044, 1045, 1051, 1052, 1059, 1060, 1061, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1085, 1086, 1097, 1101, 1154, 1165, 1173, 1184, 1192], "point": [15, 16, 40, 51, 52, 144, 146, 170, 181, 184, 200, 285, 329, 343, 347, 379, 407, 412, 433, 435, 470, 495, 558, 559, 720, 752, 758, 761, 771, 772, 784, 831, 872, 887, 891, 928, 956, 960, 976, 1021, 1060, 1081, 1082, 1165, 1184], "standard": [15, 40, 237, 246, 285, 362, 401, 555, 569, 574, 587, 701, 716, 720, 797, 831, 907, 950, 1097, 1101, 1115, 1184, 1192], "behaviour": [15, 78, 86, 165, 285, 576, 583, 584, 597, 633, 720, 747, 831, 1104, 1111, 1112, 1125], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 57, 59, 68, 69, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 119, 120, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 144, 146, 153, 156, 166, 167, 169, 171, 175, 181, 182, 184, 185, 198, 202, 213, 222, 223, 225, 228, 229, 232, 236, 244, 246, 250, 252, 255, 261, 285, 330, 400, 401, 402, 408, 475, 483, 494, 504, 531, 545, 546, 562, 571, 572, 588, 589, 607, 608, 609, 612, 650, 659, 673, 720, 737, 753, 758, 759, 761, 762, 766, 771, 772, 786, 788, 789, 792, 796, 801, 802, 804, 808, 831, 840, 875, 948, 949, 950, 951, 954, 957, 1026, 1041, 1069, 1085, 1086, 1089, 1116, 1117, 1135, 1136, 1137, 1140, 1161, 1184], "larger": [15, 57, 58, 59, 656, 742, 831], "should": [15, 38, 40, 57, 58, 59, 86, 103, 105, 107, 109, 118, 123, 124, 126, 128, 132, 133, 134, 141, 142, 146, 156, 163, 196, 199, 202, 223, 224, 225, 243, 244, 250, 253, 271, 285, 293, 327, 342, 395, 403, 433, 435, 456, 495, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 560, 569, 637, 669, 671, 678, 682, 685, 697, 698, 710, 720, 737, 746, 751, 766, 767, 772, 790, 794, 796, 801, 803, 811, 831, 834, 868, 886, 944, 1007, 1042, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1083, 1097, 1172, 1184], "ensur": [15, 40, 117, 143, 144, 146, 180, 183, 212, 223, 285, 424, 720, 757, 760, 771, 772, 831, 834, 1165, 1184], "awar": [15, 196, 224, 225, 243, 285, 751, 831, 1142], "both": [15, 30, 37, 57, 69, 87, 88, 181, 182, 184, 185, 198, 199, 207, 222, 223, 255, 285, 298, 330, 343, 403, 424, 535, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 716, 720, 731, 758, 759, 761, 762, 766, 767, 777, 786, 804, 831, 875, 969, 979, 1184], "limit": [15, 16, 59, 116, 117, 128, 171, 285, 317, 331, 332, 408, 414, 720, 753, 763, 831, 876, 877, 957, 1184], "represent": [15, 43, 44, 245, 285, 327, 355, 359, 362, 363, 365, 367, 369, 372, 375, 376, 379, 393, 394, 396, 631, 720, 749, 769, 831, 868, 869, 900, 904, 906, 907, 911, 913, 916, 918, 921, 924, 925, 928, 942, 943, 945, 1163, 1167, 1184], "look": [15, 181, 285, 318, 483, 493, 720, 758, 831, 858], "appli": [15, 25, 37, 40, 57, 63, 86, 128, 141, 144, 146, 175, 202, 213, 271, 285, 353, 354, 355, 359, 361, 362, 363, 365, 367, 369, 372, 375, 376, 379, 382, 393, 394, 396, 401, 402, 491, 493, 495, 531, 547, 549, 550, 552, 556, 597, 612, 613, 614, 617, 659, 660, 673, 683, 684, 685, 695, 710, 720, 763, 770, 771, 772, 780, 819, 831, 875, 898, 899, 900, 904, 906, 907, 911, 913, 916, 918, 921, 924, 925, 928, 931, 942, 943, 945, 950, 951, 1042, 1070, 1072, 1073, 1075, 1079, 1125, 1140, 1141, 1142, 1145, 1184], "float64": [15, 37, 40, 57, 106, 114, 144, 166, 167, 175, 227, 247, 260, 285, 301, 302, 303, 304, 305, 306, 325, 333, 334, 335, 344, 379, 403, 433, 435, 537, 567, 568, 629, 630, 671, 693, 696, 711, 720, 748, 787, 807, 831, 834, 928, 1166, 1171, 1184], "doe": [15, 37, 39, 57, 78, 86, 97, 103, 105, 106, 107, 109, 110, 114, 115, 116, 118, 119, 123, 124, 128, 129, 132, 134, 159, 169, 197, 198, 223, 224, 225, 252, 260, 285, 324, 395, 483, 494, 608, 609, 635, 672, 681, 716, 720, 741, 751, 766, 772, 802, 807, 831, 840, 878, 944, 954, 962, 1041, 1092, 1174, 1184], "cover": 15, "nativ": [15, 114, 116, 119, 120, 122, 126, 142, 196, 202, 224, 225, 243, 271, 285, 495, 685, 720, 726, 819, 1042, 1184, 1192], "level": [15, 40, 45, 59, 128, 131, 132, 133, 144, 175, 202, 210, 285, 409, 720, 763, 770, 831], "larg": [15, 16, 19, 39, 78, 116, 285], "maximum": [15, 31, 37, 57, 114, 115, 128, 134, 142, 143, 144, 146, 179, 181, 203, 285, 447, 496, 520, 529, 538, 686, 687, 720, 758, 773, 831, 908, 998, 1043, 1051, 1057, 1062, 1184], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 78, 103, 104, 107, 108, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 162, 163, 165, 179, 181, 197, 199, 206, 212, 214, 244, 246, 247, 254, 256, 285, 344, 349, 350, 351, 352, 355, 357, 358, 359, 361, 362, 363, 367, 369, 370, 371, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 548, 549, 550, 552, 555, 556, 557, 648, 649, 664, 665, 667, 669, 707, 708, 716, 720, 732, 739, 743, 745, 746, 747, 758, 767, 772, 776, 790, 831, 879, 881, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 973, 978, 982, 983, 988, 1071, 1095, 1158, 1184, 1192], "pi": [15, 344, 720, 879, 881, 1095, 1158, 1184], "e": [15, 36, 37, 39, 41, 42, 45, 57, 104, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 134, 162, 179, 187, 239, 241, 246, 254, 285, 292, 299, 397, 403, 424, 486, 494, 495, 500, 501, 503, 504, 505, 506, 507, 564, 569, 608, 609, 671, 685, 710, 720, 745, 769, 783, 784, 831, 834, 947, 969, 1084, 1097, 1165, 1184, 1192], "const": 15, "15": [15, 40, 136, 143, 181, 190, 202, 222, 285, 342, 345, 359, 367, 371, 378, 392, 531, 546, 556, 660, 696, 707, 720, 758, 786, 831, 886, 889, 927, 941, 1184], "141592653589793": 15, "718281828459045": [15, 397, 486, 720, 947, 1037, 1184], "align": [15, 20, 21, 40, 78, 86, 285], "numer": [15, 21, 37, 40, 57, 157, 163, 199, 206, 214, 254, 285, 292, 330, 413, 424, 488, 510, 512, 532, 541, 564, 585, 620, 623, 633, 720, 732, 739, 746, 767, 776, 831, 834, 875, 888, 969, 986, 1084, 1091, 1113, 1148, 1165, 1184, 1192], "order": [15, 40, 57, 58, 59, 63, 65, 78, 84, 106, 116, 135, 137, 138, 156, 165, 172, 180, 181, 182, 183, 184, 185, 198, 212, 213, 214, 222, 226, 230, 236, 246, 250, 252, 256, 285, 309, 316, 327, 347, 348, 409, 455, 470, 477, 485, 538, 546, 550, 551, 552, 553, 555, 557, 559, 560, 561, 571, 572, 608, 609, 610, 611, 622, 634, 635, 637, 650, 720, 731, 737, 747, 754, 757, 758, 759, 760, 761, 762, 766, 776, 786, 791, 796, 801, 802, 831, 850, 857, 868, 870, 891, 892, 958, 987, 1006, 1021, 1028, 1036, 1062, 1067, 1082, 1083, 1087, 1099, 1151, 1169, 1170, 1172, 1184, 1192], "cleanli": [15, 179, 285], "line": [15, 25, 40, 114, 115, 119, 128, 179, 192, 194, 285, 583, 1111], "up": [15, 40, 70, 117, 196, 199, 224, 225, 243, 285, 299, 329, 495, 720, 766, 767, 772, 831, 834, 872, 1184], "xx": [15, 79, 81, 143, 146, 834], "yy": [15, 79, 81, 143, 146, 834], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 59, 104, 136, 144, 222, 285, 294, 370, 371, 374, 378, 392, 423, 528, 538, 546, 548, 556, 570, 640, 703, 708, 720, 742, 743, 763, 770, 781, 786, 799, 831, 834, 923, 927, 941, 1042, 1071, 1184], "111": 15, "100": [15, 22, 32, 40, 106, 109, 114, 115, 123, 128, 132, 232, 285, 562, 586, 615, 720, 792, 831, 1072, 1073, 1075, 1089, 1114, 1143, 1184, 1192], "988": 15, "44": [15, 207, 285, 346, 720, 777, 831], "444": 15, "23": [15, 136, 181, 222, 285, 351, 355, 359, 367, 375, 378, 394, 546, 549, 550, 552, 555, 556, 557, 666, 669, 706, 707, 708, 720, 758, 786, 831, 834, 896, 904, 1192], "789": [15, 834], "fmt": [16, 422, 674, 720, 764, 831], "floatfmt": 16, "mix": [16, 888, 1142, 1184], "how": [16, 39, 40, 78, 86, 106, 109, 117, 133, 165, 198, 214, 254, 255, 285, 327, 345, 377, 378, 392, 423, 451, 452, 453, 527, 541, 554, 586, 612, 614, 666, 710, 720, 747, 766, 804, 831, 868, 889, 926, 927, 941, 1002, 1003, 1004, 1077, 1114, 1140, 1142, 1184], "full": [16, 48, 78, 83, 86, 114, 115, 118, 128, 129, 130, 134, 181, 182, 184, 185, 222, 285, 546, 612, 613, 614, 617, 720, 758, 759, 761, 762, 771, 772, 786, 831, 834, 1140, 1141, 1142, 1145, 1192], "scientif": 16, "notat": [16, 40, 285], "small": [16, 117, 143, 200, 285, 378, 751, 831, 1192], "2304980958725870923": 16, "1e6": 16, "1e": [16, 137, 138, 139, 140], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 390, 939], "00000001": [16, 640, 720], "plai": [17, 655], "sam": 17, "As": [17, 69, 87, 88, 103, 105, 106, 107, 109, 119, 123, 124, 132, 285, 831], "time": [17, 39, 48, 50, 63, 68, 83, 84, 85, 126, 128, 169, 181, 182, 184, 185, 199, 222, 256, 285, 323, 349, 350, 351, 352, 353, 357, 358, 374, 377, 378, 381, 383, 384, 392, 395, 449, 450, 483, 546, 549, 550, 551, 552, 553, 555, 556, 557, 565, 612, 614, 617, 631, 632, 654, 655, 664, 665, 666, 667, 668, 669, 675, 707, 708, 720, 742, 743, 758, 759, 761, 762, 767, 781, 786, 831, 834, 840, 863, 894, 895, 896, 897, 902, 903, 923, 926, 927, 930, 932, 933, 941, 944, 954, 1000, 1002, 1003, 1093, 1140, 1142, 1145, 1167, 1168, 1184, 1192], "goe": 17, "By": [17, 19, 35, 78, 114, 115, 128, 181, 199, 222, 232, 237, 255, 256, 257, 285, 374, 378, 392, 475, 546, 549, 550, 551, 552, 553, 555, 556, 557, 562, 574, 638, 656, 664, 665, 667, 668, 669, 682, 701, 707, 708, 709, 720, 742, 758, 767, 786, 792, 797, 805, 831, 923, 927, 941, 1026, 1089, 1101, 1165, 1173, 1184], "begin": [17, 40, 285, 400, 401, 402, 583, 720, 949, 950, 951, 1111, 1184], "beauti": 17, "friendship": 17, "len_byt": [17, 589, 590, 1117, 1118], "len": [17, 40, 142, 144, 197, 285, 337, 465, 495, 720, 1016, 1184], "u32": [17, 63, 116, 154, 157, 211, 262, 267, 276, 278, 285, 293, 300, 307, 308, 309, 310, 311, 336, 337, 355, 359, 363, 367, 369, 375, 376, 379, 393, 394, 443, 447, 448, 452, 464, 494, 513, 525, 538, 545, 549, 550, 552, 555, 556, 557, 560, 578, 588, 589, 631, 635, 641, 646, 650, 651, 657, 692, 720, 735, 739, 779, 810, 815, 824, 826, 831, 850, 851, 852, 864, 869, 900, 904, 911, 913, 916, 918, 921, 924, 925, 928, 942, 943, 965, 1015, 1062, 1069, 1106, 1116, 1117, 1167, 1170, 1172, 1184], "37": 17, "beaut": 17, "48": [17, 222, 285, 546, 720, 786, 831], "fmt_str_length": 17, "50": [17, 32, 40, 162, 169, 179, 285, 330, 378, 392, 720, 875, 888, 941, 1184], "element": [18, 19, 30, 143, 146, 156, 195, 214, 223, 237, 250, 257, 285, 299, 301, 302, 303, 304, 305, 306, 323, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 347, 348, 404, 405, 409, 419, 429, 443, 451, 452, 454, 455, 456, 457, 461, 464, 465, 471, 472, 473, 474, 479, 484, 487, 488, 495, 527, 528, 538, 541, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 566, 567, 568, 573, 574, 603, 604, 615, 629, 630, 632, 638, 656, 697, 698, 701, 709, 720, 737, 796, 797, 801, 805, 831, 841, 842, 843, 844, 845, 846, 847, 863, 871, 874, 879, 880, 881, 882, 883, 884, 885, 886, 891, 892, 952, 953, 958, 964, 977, 991, 993, 994, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1015, 1016, 1022, 1023, 1024, 1025, 1030, 1035, 1038, 1039, 1042, 1056, 1062, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1094, 1095, 1096, 1100, 1101, 1131, 1132, 1143, 1155, 1158, 1159, 1163, 1168, 1169, 1173, 1184], "empti": [18, 36, 37, 57, 94, 106, 114, 115, 119, 125, 128, 158, 159, 181, 193, 206, 285, 682, 699, 740, 741, 758, 776, 831, 834, 874, 878, 972, 1184], "alwai": [18, 37, 39, 57, 63, 114, 137, 138, 139, 140, 143, 180, 183, 202, 271, 285, 503, 612, 664, 710, 772, 831, 840, 1042, 1140, 1184, 1191, 1192], "neg": [18, 49, 135, 181, 182, 184, 185, 187, 201, 222, 232, 233, 235, 239, 285, 475, 476, 531, 546, 562, 563, 570, 601, 720, 758, 759, 761, 762, 786, 792, 793, 795, 810, 831, 964, 994, 1026, 1027, 1089, 1090, 1098, 1129, 1155, 1184], "result": [18, 37, 43, 44, 45, 57, 58, 59, 78, 86, 107, 109, 116, 117, 118, 119, 128, 131, 133, 134, 146, 169, 181, 184, 198, 210, 214, 222, 225, 232, 233, 247, 256, 264, 285, 378, 381, 384, 392, 400, 401, 402, 406, 440, 482, 483, 493, 495, 527, 535, 542, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 561, 562, 563, 602, 603, 614, 633, 659, 660, 664, 665, 666, 667, 668, 669, 684, 693, 696, 697, 698, 711, 720, 738, 758, 759, 761, 762, 766, 771, 772, 781, 786, 790, 792, 793, 811, 812, 831, 840, 887, 927, 930, 933, 941, 949, 950, 951, 954, 992, 1033, 1042, 1060, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1087, 1089, 1090, 1130, 1131, 1142, 1165, 1184, 1191, 1192], "being": [18, 85, 114, 115, 116, 128, 134, 157, 168, 244, 254, 255, 285, 299, 342, 378, 549, 550, 551, 552, 553, 555, 556, 557, 670, 720, 739, 743, 750, 751, 831, 870, 886, 927, 965, 1060, 1184, 1192], "content": [18, 565, 720, 1093, 1184], "final": [18, 40, 78, 133, 285, 400, 401, 402, 720, 751, 831, 949, 950, 951, 1184], "item": [18, 86, 115, 179, 223, 226, 285, 345, 405, 450, 453, 459, 462, 470, 559, 604, 720, 889, 953, 1001, 1004, 1010, 1013, 1021, 1082, 1132, 1184], "num": [18, 40, 249, 285, 424, 720, 969, 1184], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 59, 63, 78, 86, 110, 117, 128, 136, 144, 146, 159, 169, 178, 179, 181, 187, 189, 190, 191, 209, 213, 214, 215, 219, 220, 222, 228, 239, 260, 264, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 294, 298, 307, 308, 309, 311, 330, 336, 338, 341, 345, 349, 351, 357, 370, 371, 377, 378, 392, 395, 419, 420, 423, 429, 439, 443, 444, 453, 454, 460, 461, 476, 479, 480, 484, 487, 503, 505, 514, 528, 531, 546, 570, 626, 640, 653, 659, 664, 667, 670, 673, 675, 677, 682, 684, 705, 708, 720, 742, 743, 758, 763, 765, 770, 780, 781, 786, 788, 798, 799, 807, 812, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 831, 834, 875, 889, 894, 896, 902, 926, 941, 944, 947, 964, 977, 994, 1004, 1005, 1011, 1012, 1027, 1030, 1031, 1035, 1038, 1042, 1056, 1085, 1086, 1155, 1184, 1192], "size": [19, 45, 59, 114, 115, 116, 142, 143, 144, 146, 148, 167, 254, 285, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 647, 679, 680, 697, 698, 720, 742, 831, 948, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1184, 1192], "overwrit": [19, 38, 39, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 132, 152, 255, 285, 294, 720, 751, 831], "chunk": [19, 59, 112, 114, 115, 126, 128, 131, 132, 133, 144, 146, 169, 197, 209, 285, 298, 539, 720, 831, 840, 873, 954, 961, 1048, 1063, 1160, 1184], "stream": [19, 41, 42, 57, 58, 59, 84, 85, 122, 156, 180, 183, 198, 250, 252, 285, 737, 742, 743, 749, 751, 757, 760, 766, 771, 772, 776, 781, 794, 796, 801, 802, 831], "engin": [19, 38, 116, 117, 119, 148, 180, 183, 198, 202, 252, 271, 285, 757, 760, 766, 771, 772, 776, 802, 819, 831, 1042, 1184], "determin": [19, 37, 40, 57, 76, 78, 86, 106, 109, 114, 115, 116, 119, 125, 126, 128, 133, 135, 153, 163, 175, 181, 184, 196, 197, 202, 214, 222, 251, 256, 285, 327, 361, 377, 378, 392, 483, 494, 503, 535, 541, 549, 550, 551, 552, 553, 555, 556, 557, 569, 586, 612, 614, 615, 666, 693, 696, 711, 720, 758, 761, 786, 831, 868, 906, 926, 927, 941, 965, 1034, 1041, 1060, 1097, 1114, 1140, 1142, 1143, 1184], "schema": [19, 33, 36, 39, 63, 79, 80, 81, 86, 98, 99, 101, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 133, 142, 144, 153, 158, 159, 166, 167, 197, 202, 207, 210, 246, 285, 312, 313, 314, 315, 316, 482, 483, 503, 586, 640, 702, 720, 740, 741, 748, 771, 772, 777, 790, 814, 819, 831, 834, 855, 878, 1114, 1184], "thread": [19, 37, 57, 85, 112, 114, 115, 117, 148, 285, 299, 456, 495, 720, 743, 831, 1007], "pool": [19, 85, 148, 743, 831], "For": [19, 39, 40, 117, 118, 119, 129, 130, 165, 169, 198, 199, 222, 271, 285, 400, 401, 402, 483, 495, 504, 540, 569, 576, 583, 584, 585, 597, 659, 669, 673, 674, 716, 720, 747, 767, 786, 819, 831, 840, 949, 950, 951, 954, 1064, 1097, 1104, 1111, 1112, 1113, 1125, 1165, 1184], "some": [19, 35, 39, 40, 69, 88, 106, 114, 115, 116, 119, 128, 152, 165, 285, 716, 747, 831, 977, 1184, 1192], "dataset": [19, 45, 114, 115, 126, 128, 133, 134, 198, 285, 440, 720, 732, 766, 771, 772, 831, 992, 1184], "esp": 19, "have": [19, 35, 39, 40, 48, 69, 78, 88, 104, 113, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 144, 146, 169, 196, 217, 222, 224, 225, 243, 285, 342, 400, 401, 402, 495, 504, 538, 546, 585, 720, 745, 776, 783, 786, 794, 810, 831, 834, 840, 886, 949, 950, 951, 954, 962, 1062, 1142, 1184, 1192], "too": [19, 545, 720, 751, 831], "optimist": 19, "lead": [19, 45, 110, 134, 181, 182, 184, 185, 222, 232, 285, 417, 475, 493, 495, 546, 561, 562, 592, 606, 607, 609, 627, 656, 720, 758, 759, 761, 762, 771, 772, 786, 792, 814, 819, 831, 1026, 1042, 1087, 1089, 1120, 1134, 1135, 1137, 1184], "memori": [19, 59, 86, 103, 104, 107, 108, 109, 114, 115, 116, 119, 120, 126, 128, 131, 132, 133, 152, 169, 202, 225, 234, 271, 285, 527, 539, 564, 720, 742, 831, 840, 954, 1042, 1063, 1091, 1092, 1184], "error": [19, 39, 85, 114, 115, 128, 157, 214, 223, 285, 294, 319, 325, 439, 462, 481, 514, 576, 579, 583, 585, 586, 587, 612, 613, 614, 617, 720, 739, 743, 814, 819, 831, 859, 864, 1013, 1032, 1104, 1107, 1111, 1113, 1114, 1115, 1140, 1141, 1142, 1145, 1184], "row": [19, 25, 30, 37, 40, 43, 45, 57, 59, 78, 79, 81, 86, 95, 97, 102, 106, 107, 109, 110, 114, 115, 116, 119, 120, 122, 123, 126, 128, 131, 132, 133, 134, 137, 138, 142, 144, 153, 156, 158, 165, 169, 172, 175, 179, 180, 181, 183, 186, 187, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 210, 225, 226, 235, 239, 240, 243, 245, 250, 252, 254, 255, 262, 269, 271, 279, 285, 310, 405, 420, 444, 457, 483, 527, 528, 542, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 570, 572, 582, 586, 626, 647, 650, 659, 660, 673, 677, 679, 680, 695, 697, 698, 705, 710, 720, 737, 740, 742, 747, 751, 754, 755, 758, 763, 766, 767, 768, 770, 772, 776, 795, 799, 800, 801, 802, 804, 810, 817, 819, 827, 831, 840, 953, 954, 964, 1008, 1056, 1066, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1098, 1110, 1114, 1155, 1184, 1192], "per": [19, 37, 40, 57, 142, 144, 156, 179, 210, 211, 229, 236, 250, 261, 274, 276, 277, 285, 299, 324, 456, 459, 481, 495, 572, 637, 650, 720, 737, 789, 796, 801, 808, 822, 824, 825, 831, 1007, 1010, 1032, 1172, 1184], "everi": [19, 37, 57, 114, 115, 128, 181, 184, 240, 243, 256, 285, 337, 338, 339, 340, 341, 342, 378, 392, 405, 447, 448, 453, 457, 459, 460, 471, 476, 480, 582, 628, 659, 660, 720, 751, 758, 761, 800, 831, 882, 883, 884, 885, 886, 927, 941, 953, 962, 998, 999, 1004, 1008, 1010, 1011, 1022, 1027, 1031, 1110, 1157, 1184], "process": [19, 37, 57, 58, 59, 114, 115, 116, 128, 148, 285, 742, 831], "liter": [20, 21, 25, 39, 63, 85, 116, 119, 125, 144, 145, 146, 147, 179, 196, 203, 204, 208, 209, 212, 223, 224, 228, 229, 232, 238, 242, 255, 260, 261, 285, 294, 318, 330, 351, 398, 399, 406, 413, 416, 418, 424, 442, 490, 494, 510, 512, 522, 523, 532, 576, 578, 597, 598, 623, 633, 642, 644, 647, 651, 653, 654, 655, 662, 663, 664, 665, 666, 667, 668, 679, 680, 682, 687, 691, 693, 696, 699, 702, 704, 706, 707, 708, 711, 720, 743, 753, 788, 789, 792, 804, 807, 808, 831, 834, 838, 839, 858, 875, 887, 896, 955, 969, 1060, 1085, 1086, 1089, 1104, 1106, 1125, 1126, 1184, 1191], "left": [20, 21, 40, 65, 78, 137, 138, 139, 140, 181, 182, 184, 185, 198, 199, 222, 255, 285, 343, 400, 401, 402, 423, 424, 535, 546, 549, 550, 551, 552, 553, 555, 556, 557, 560, 591, 631, 653, 659, 660, 664, 665, 667, 668, 673, 695, 707, 708, 710, 720, 758, 759, 761, 762, 766, 767, 786, 804, 831, 887, 949, 950, 951, 969, 1060, 1083, 1119, 1167, 1184], "center": [20, 21, 40, 285, 400, 401, 402, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 720, 949, 950, 951, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1184], "cell": [20, 21, 40, 285], "valueerror": [20, 25], "recognis": [20, 21, 25, 141], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 39, 40, 57, 78, 110, 119, 144, 157, 162, 179, 181, 182, 184, 185, 197, 199, 222, 256, 285, 349, 350, 351, 352, 353, 355, 357, 358, 359, 361, 362, 363, 365, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 450, 546, 549, 550, 551, 552, 553, 555, 556, 557, 612, 614, 631, 664, 665, 667, 668, 669, 675, 682, 707, 708, 720, 739, 758, 759, 761, 762, 767, 786, 831, 834, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 988, 1001, 1002, 1003, 1051, 1052, 1086, 1140, 1142, 1167, 1184], "date": [21, 40, 48, 78, 114, 115, 117, 119, 125, 128, 134, 137, 138, 139, 140, 144, 157, 162, 179, 181, 182, 184, 185, 197, 199, 222, 285, 350, 351, 352, 355, 358, 361, 362, 363, 369, 370, 371, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 450, 546, 549, 550, 551, 552, 553, 555, 556, 557, 612, 613, 631, 664, 665, 667, 668, 675, 682, 706, 720, 739, 758, 759, 761, 762, 767, 786, 831, 834, 895, 896, 897, 900, 903, 904, 906, 907, 908, 909, 910, 911, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 988, 1001, 1002, 1003, 1051, 1052, 1086, 1140, 1141, 1167, 1184], "333": [21, 1184], "mno": [21, 25], "2023": [21, 40, 110, 136, 197, 285, 351, 669, 682, 834, 896], "29": [21, 144, 349, 370, 894, 919], "2001": [21, 350, 355, 358, 359, 361, 367, 369, 374, 375, 376, 378, 383, 392, 393, 394, 395, 549, 550, 552, 555, 556, 557, 612, 720, 834, 895, 900, 903, 904, 906, 908, 909, 910, 911, 913, 915, 916, 918, 921, 923, 924, 925, 927, 932, 941, 942, 943, 944, 945, 1140], "null": [21, 37, 39, 57, 65, 78, 86, 106, 114, 115, 124, 128, 134, 152, 156, 158, 162, 165, 171, 175, 176, 191, 198, 204, 205, 211, 214, 216, 232, 233, 236, 237, 238, 242, 247, 250, 253, 255, 257, 260, 267, 285, 295, 297, 298, 299, 309, 317, 319, 330, 336, 338, 341, 345, 347, 348, 374, 385, 386, 387, 388, 389, 390, 391, 399, 400, 401, 402, 403, 406, 407, 408, 414, 423, 433, 435, 436, 437, 443, 445, 446, 453, 455, 458, 459, 463, 464, 471, 472, 473, 474, 475, 481, 483, 494, 495, 523, 524, 525, 528, 539, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 562, 563, 564, 566, 571, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 594, 595, 596, 601, 603, 604, 605, 620, 621, 622, 631, 641, 642, 643, 644, 653, 654, 655, 657, 662, 671, 682, 687, 691, 697, 698, 702, 704, 710, 720, 737, 740, 747, 753, 765, 766, 779, 790, 792, 793, 796, 801, 803, 804, 807, 809, 815, 831, 838, 839, 841, 850, 859, 874, 875, 889, 891, 892, 934, 935, 936, 937, 938, 939, 940, 949, 950, 951, 955, 957, 962, 968, 984, 985, 993, 996, 997, 1004, 1006, 1015, 1023, 1025, 1026, 1032, 1034, 1042, 1055, 1056, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1084, 1089, 1090, 1094, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1122, 1123, 1124, 1129, 1131, 1132, 1133, 1148, 1163, 1165, 1166, 1167, 1174, 1184, 1191, 1192], "07": [21, 351, 377, 378, 392, 612, 664, 667, 675, 834, 896, 926, 1140], "05": [21, 134, 137, 138, 139, 140, 144, 157, 199, 256, 285, 351, 352, 377, 379, 381, 384, 385, 664, 667, 739, 767, 831, 834, 896, 897, 898, 899, 926, 927, 930, 931, 933, 934, 941], "visibl": [22, 167, 285, 948, 1184], "eg": [22, 30, 40, 86, 117, 150, 285, 378, 612, 614, 633, 720, 962, 1140, 1142, 1184], "low": [22, 116, 148, 535, 720, 1060, 1184], "rang": [22, 40, 116, 117, 162, 167, 181, 197, 285, 344, 355, 369, 375, 376, 378, 392, 393, 423, 647, 654, 663, 664, 665, 666, 667, 668, 679, 680, 706, 707, 708, 720, 758, 831, 888, 900, 918, 924, 925, 927, 941, 942, 948, 1056, 1184], "98": [22, 190, 285, 323, 417, 571, 615, 627, 632, 720, 1143], "99": [22, 40, 170, 171, 190, 193, 255, 285, 293, 323, 406, 408, 417, 571, 627, 632, 720, 752, 753, 804, 831, 947, 955, 1184], "tbl_col": 22, "95": [22, 293, 720], "96": [22, 293, 720], "97": [22, 190, 285, 293, 720], "move": [23, 225, 285, 400, 401, 402, 549, 550, 552, 556, 720, 949, 950, 951, 1072, 1073, 1075, 1079, 1184], "inlin": [23, 225, 285, 576, 583, 584, 597, 1104, 1111, 1112, 1125], "parenthes": 23, "inform": [24, 28, 39, 83, 118, 129, 130, 133, 137, 139, 161, 285, 440, 569, 576, 583, 584, 597, 720, 781, 831, 869, 992, 1097, 1104, 1111, 1112, 1125, 1184], "below": [24, 39, 118, 129, 130, 165, 181, 214, 285, 408, 664, 665, 667, 668, 707, 708, 710, 716, 720, 747, 758, 831], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 78, 110], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 324, 583, 587, 720, 1111, 1115], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 57, 83, 116, 118, 129, 130, 144, 156, 162, 167, 212, 225, 250, 251, 254, 255, 285, 343, 379, 424, 535, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 602, 603, 607, 608, 659, 697, 698, 720, 737, 801, 804, 831, 834, 887, 888, 928, 948, 969, 1060, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1130, 1131, 1135, 1174, 1184], "divid": [25, 343, 378, 392, 400, 401, 402, 440, 535, 720, 887, 927, 941, 949, 950, 951, 992, 1060, 1184], "same": [25, 39, 40, 67, 69, 78, 84, 85, 86, 87, 88, 120, 128, 137, 138, 139, 140, 142, 150, 180, 202, 214, 225, 236, 252, 260, 261, 264, 271, 285, 291, 298, 315, 347, 348, 417, 482, 499, 502, 527, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 572, 588, 622, 627, 720, 742, 743, 757, 771, 772, 796, 802, 807, 808, 812, 831, 836, 840, 841, 856, 887, 891, 892, 896, 1033, 1042, 1060, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1116, 1175, 1184], "dens": [25, 179, 285, 538, 720, 1062, 1184], "space": [25, 181, 285, 758, 831], "horizont": [25, 86, 175, 189, 254, 285, 642, 644, 654, 655, 659, 660, 662, 670, 673, 687, 691, 695, 704], "markdown": 25, "compat": [25, 40, 45, 59, 285, 576, 577, 578, 583, 584, 585, 597, 598, 831, 834, 1104, 1105, 1106, 1111, 1112, 1113, 1125, 1126], "No": [25, 618, 1146], "round": [25, 40, 80, 110, 116, 285, 329, 335, 412, 629, 720, 872, 960, 1184], "corner": [25, 40, 110, 285], "op": [25, 146, 285, 541, 720, 831, 1142, 1184], "one": [25, 37, 38, 40, 57, 68, 78, 95, 103, 105, 106, 107, 108, 109, 114, 115, 119, 123, 124, 125, 128, 145, 146, 147, 150, 171, 172, 179, 180, 181, 182, 184, 185, 196, 206, 214, 222, 223, 224, 230, 232, 246, 249, 265, 285, 293, 343, 408, 417, 475, 483, 488, 546, 562, 571, 584, 627, 685, 700, 710, 716, 720, 753, 754, 757, 758, 759, 761, 762, 776, 786, 791, 792, 809, 813, 831, 840, 887, 957, 988, 1026, 1034, 1039, 1060, 1089, 1112, 1149, 1184], "more": [25, 40, 43, 45, 59, 68, 78, 86, 87, 88, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 123, 124, 125, 126, 129, 130, 137, 139, 144, 146, 150, 161, 162, 196, 200, 202, 206, 210, 223, 224, 226, 246, 252, 271, 285, 296, 299, 316, 440, 470, 485, 488, 493, 495, 526, 559, 569, 584, 588, 612, 613, 614, 634, 700, 710, 720, 776, 802, 831, 834, 841, 857, 869, 888, 988, 992, 1021, 1036, 1042, 1082, 1097, 1112, 1116, 1140, 1141, 1142, 1169, 1184, 1192], "semigraph": 25, "box": [25, 202, 285], "draw": [25, 30, 143, 1192], "found": [25, 37, 40, 57, 65, 90, 99, 101, 106, 110, 166, 285, 560, 587, 610, 611, 612, 614, 720, 831, 1083, 1115, 1138, 1139, 1140, 1142, 1184, 1191], "unicod": 25, "block": [25, 85, 180, 183, 252, 285, 710, 743, 757, 760, 784, 802, 810, 819, 831, 1085, 1086, 1184], "http": [25, 40, 41, 42, 104, 116, 117, 152, 161, 285, 583, 585, 1111, 1113], "en": [25, 40, 285], "wikipedia": 25, "org": [25, 41, 42, 104, 116, 117, 152, 161, 285], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 285], "etc": [26, 39, 40, 114, 118, 120, 122, 126, 129, 130, 131, 285, 720, 834, 1085, 1086, 1184], "between": [29, 86, 141, 142, 144, 146, 161, 216, 277, 285, 325, 345, 346, 424, 453, 454, 461, 462, 471, 472, 473, 474, 479, 484, 528, 535, 536, 553, 575, 648, 649, 656, 658, 694, 697, 698, 720, 782, 825, 831, 864, 869, 889, 890, 969, 1004, 1005, 1012, 1013, 1022, 1023, 1024, 1025, 1030, 1035, 1056, 1060, 1061, 1076, 1103, 1184], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 59, 63, 148, 162, 171, 180, 214, 222, 285, 331, 338, 408, 483, 527, 538, 546, 549, 561, 604, 687, 700, 720, 753, 757, 786, 831, 876, 882, 888, 957, 1034, 1062, 1072, 1087, 1132, 1184], "tbl_row": 30, "also": [32, 37, 40, 57, 68, 69, 106, 116, 119, 125, 128, 142, 143, 144, 145, 146, 150, 166, 180, 181, 182, 184, 185, 207, 210, 222, 224, 228, 236, 255, 260, 285, 338, 341, 374, 377, 424, 495, 538, 549, 550, 551, 552, 553, 555, 556, 557, 572, 607, 608, 659, 660, 664, 673, 675, 695, 710, 719, 720, 726, 757, 758, 759, 761, 762, 777, 786, 788, 796, 804, 807, 809, 831, 834, 926, 969, 1062, 1105, 1106, 1135, 1184], "char": [32, 584, 1112], "omit": [32, 106, 110, 142, 144, 146, 150, 210, 225, 285, 707, 708, 834], "set_decimal_separ": 32, "x": [32, 65, 66, 78, 86, 104, 110, 114, 115, 117, 128, 142, 144, 152, 167, 189, 192, 194, 198, 206, 214, 224, 225, 254, 285, 292, 294, 296, 344, 398, 399, 413, 416, 418, 419, 442, 449, 462, 488, 490, 492, 493, 495, 510, 512, 515, 516, 517, 518, 519, 522, 523, 526, 532, 533, 541, 545, 566, 569, 603, 623, 624, 631, 633, 640, 642, 644, 648, 649, 659, 660, 662, 673, 682, 684, 687, 691, 695, 704, 720, 766, 772, 776, 795, 831, 834, 869, 957, 990, 1042, 1094, 1097, 1131, 1167, 1184, 1191], "1234567": 32, "987654": [32, 834], "10101": 32, "y": [32, 78, 86, 104, 110, 142, 144, 152, 167, 192, 194, 198, 206, 214, 224, 225, 254, 285, 292, 294, 296, 381, 384, 398, 399, 416, 418, 442, 449, 462, 490, 492, 495, 515, 516, 517, 518, 519, 522, 523, 526, 533, 541, 545, 612, 613, 614, 624, 633, 640, 642, 644, 648, 649, 662, 669, 682, 687, 691, 704, 720, 766, 776, 795, 831, 834, 869, 930, 933, 1140, 1141, 1142], "1234": 32, "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 144, 181, 199, 256, 285, 349, 350, 352, 357, 359, 363, 367, 370, 371, 374, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 549, 550, 552, 555, 556, 557, 612, 614, 617, 667, 669, 707, 708, 720, 758, 767, 831, 834, 894, 895, 897, 898, 899, 902, 903, 904, 910, 911, 916, 919, 920, 921, 923, 926, 927, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 944, 1140, 1142, 1145], "321": [32, 1192], "strip": [33, 592, 600, 607, 608, 609, 610, 611, 1120, 1128, 1135, 1136, 1137], "trail": [33, 179, 285, 600, 606, 607, 608, 1128, 1134, 1135, 1136], "zero": [33, 40, 103, 104, 113, 114, 115, 120, 122, 126, 143, 152, 171, 196, 223, 241, 246, 247, 285, 408, 483, 488, 560, 569, 620, 633, 720, 740, 753, 831, 874, 957, 1034, 1097, 1148, 1160, 1165, 1166, 1184], "enabl": [33, 34, 69, 87, 88, 137, 138, 139, 140, 149, 228, 260, 285, 295, 297, 561, 637, 716, 720, 742, 788, 807, 831, 838, 839, 1087, 1172, 1184], "d": [33, 36, 37, 39, 40, 41, 42, 45, 106, 134, 162, 179, 181, 186, 187, 190, 198, 239, 241, 254, 258, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 292, 294, 358, 381, 384, 424, 531, 564, 578, 584, 603, 612, 613, 614, 653, 669, 675, 720, 758, 766, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 831, 869, 903, 930, 933, 969, 1106, 1112, 1131, 1140, 1141, 1142, 1184], "01": [33, 78, 144, 157, 162, 179, 181, 222, 256, 285, 349, 350, 351, 352, 358, 359, 362, 363, 367, 369, 370, 371, 374, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 546, 549, 550, 552, 555, 556, 557, 612, 613, 614, 617, 664, 665, 667, 669, 720, 739, 758, 786, 831, 834, 895, 896, 897, 898, 899, 903, 904, 910, 911, 916, 919, 920, 921, 923, 926, 927, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 944, 1140, 1141, 1142, 1145], "6789": 33, "scale": [33, 49, 167, 285, 495, 531, 615, 720, 948, 1143, 1184], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 106, 118, 119, 129, 130, 142, 163, 165, 168, 180, 183, 212, 228, 229, 230, 236, 253, 260, 261, 264, 285, 292, 357, 403, 406, 527, 572, 576, 583, 584, 597, 650, 653, 654, 655, 671, 699, 702, 720, 746, 750, 757, 760, 788, 789, 791, 796, 803, 807, 808, 812, 831, 894, 902, 955, 1104, 1111, 1112, 1125, 1184], "verbos": [34, 137, 139, 150, 584, 1112], "debug": [34, 742, 751, 771, 772, 831, 1192], "log": [34, 80, 323, 397, 488, 512, 532, 632, 720, 863, 947, 1168, 1184], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 66, 79, 81, 83, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 174, 196, 212, 218, 223, 224, 225, 227, 242, 243, 251, 285, 494, 545, 720, 784, 787, 831, 1041, 1184], "show": [35, 40, 67, 165, 179, 200, 211, 285, 747, 781, 794, 831], "variabl": [35, 60, 65, 133, 145, 148, 206, 244, 285, 776, 831, 1161, 1184, 1191], "chang": [35, 78, 85, 114, 115, 116, 134, 254, 255, 256, 285, 299, 342, 343, 345, 378, 495, 528, 535, 549, 550, 551, 552, 553, 555, 556, 557, 720, 743, 831, 840, 869, 870, 886, 887, 927, 965, 1056, 1060, 1092, 1184], "restrict": [35, 604, 1132], "dictionari": [35, 40, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 196, 212, 223, 224, 225, 242, 243, 285, 494, 720, 831, 1041, 1184], "those": [35, 40, 114, 119, 225, 255, 285, 538, 583, 685, 720, 804, 831, 834, 1062, 1111, 1184], "been": [35, 40, 152, 153, 155, 182, 183, 184, 185, 266, 285, 299, 324, 427, 431, 434, 439, 451, 454, 461, 465, 479, 484, 491, 492, 495, 533, 538, 547, 549, 550, 551, 552, 553, 555, 556, 557, 577, 590, 591, 592, 593, 599, 600, 606, 624, 645, 683, 720, 736, 759, 760, 761, 762, 771, 783, 811, 814, 831, 841, 974, 980, 1002, 1005, 1012, 1016, 1030, 1035, 1062, 1070, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1184], "set_fmt_float": 35, "via": [35, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 196, 224, 285, 299, 495, 585, 720, 745, 783, 831, 1113], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 113, 114, 119, 120, 121, 122, 125, 126, 127, 285], "bytesio": [36, 37, 40, 41, 42, 45, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 285, 745, 783, 831], "compress": [36, 41, 42, 45, 58, 59, 285, 831], "avrocompress": [36, 285], "uncompress": [36, 41, 42, 45, 59, 120, 131, 285, 831], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 57, 58, 59, 115, 120, 150, 285, 330, 508, 720, 769, 794, 831, 875, 1184], "apach": [36, 41, 42, 45, 113, 116, 117, 130, 285, 732], "avro": [36, 113, 285, 732], "writeabl": [36, 37, 41, 42, 43, 44, 45, 285], "like": [36, 37, 39, 41, 42, 43, 44, 45, 85, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 181, 192, 194, 198, 246, 285, 336, 349, 443, 456, 464, 507, 538, 583, 608, 609, 637, 716, 720, 743, 745, 758, 783, 831, 840, 894, 993, 1007, 1015, 1062, 1111, 1172, 1184], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 86, 104, 105, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 142, 144, 146, 152, 180, 181, 183, 184, 199, 200, 222, 225, 246, 247, 285, 664, 665, 667, 668, 682, 707, 708, 732, 745, 758, 759, 761, 762, 767, 783, 786, 831, 834, 865, 893, 995, 1102, 1160, 1184], "snappi": [36, 45, 59, 285, 831], "deflat": [36, 285], "pathlib": [36, 37, 41, 42, 45, 128, 285], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 67, 157, 160, 161, 163, 164, 165, 166, 169, 172, 173, 175, 176, 177, 178, 186, 187, 188, 189, 190, 191, 193, 198, 202, 203, 204, 205, 208, 211, 214, 216, 218, 219, 220, 223, 226, 227, 228, 231, 235, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 251, 252, 253, 257, 258, 259, 263, 285, 326, 343, 374, 420, 422, 444, 450, 458, 459, 463, 499, 502, 503, 504, 505, 506, 507, 535, 542, 575, 578, 580, 582, 584, 585, 602, 604, 607, 608, 609, 610, 611, 616, 619, 626, 628, 646, 652, 656, 657, 658, 672, 676, 677, 681, 686, 688, 689, 690, 692, 694, 699, 701, 705, 709, 710, 716, 720, 739, 744, 746, 747, 748, 754, 764, 765, 766, 779, 784, 787, 788, 802, 803, 806, 809, 831, 834, 866, 887, 923, 1013, 1060, 1066, 1106, 1108, 1110, 1112, 1113, 1132, 1138, 1139, 1144, 1147, 1184], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 67, 157, 160, 161, 163, 164, 165, 166, 169, 172, 173, 175, 176, 177, 178, 187, 189, 190, 191, 193, 198, 202, 203, 204, 205, 208, 211, 214, 216, 218, 219, 220, 223, 226, 227, 228, 235, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 252, 253, 257, 258, 263, 285, 326, 422, 499, 500, 501, 502, 503, 504, 505, 506, 507, 569, 578, 580, 582, 584, 585, 602, 604, 610, 611, 646, 652, 656, 657, 658, 672, 677, 681, 686, 688, 689, 690, 692, 699, 701, 705, 709, 710, 716, 720, 739, 744, 746, 747, 748, 754, 764, 765, 766, 779, 784, 787, 788, 802, 803, 806, 831, 834, 866, 1013, 1097, 1106, 1108, 1110, 1112, 1113, 1132, 1138, 1139, 1184], "ham": [36, 37, 39, 41, 42, 45, 157, 160, 161, 163, 164, 165, 166, 172, 173, 176, 186, 187, 189, 198, 203, 204, 205, 208, 211, 216, 218, 220, 223, 226, 227, 228, 235, 237, 238, 239, 244, 245, 246, 247, 248, 252, 257, 258, 285, 326, 506, 739, 744, 746, 747, 748, 754, 766, 779, 784, 787, 788, 802, 809, 831, 866], "dirpath": [36, 37, 41, 42, 45, 128, 285], "new_fil": [36, 37, 41, 42, 45, 285], "has_head": [37, 40, 57, 114, 115, 119, 128, 285, 831], "line_termin": [37, 57, 285, 831], "quote_char": [37, 57, 114, 115, 128, 285, 831], "batch_siz": [37, 57, 114, 115, 116, 132, 134, 285, 831], "1024": [37, 57, 59, 114, 115, 116, 132, 285, 831], "datetime_format": [37, 57, 285, 831], "date_format": [37, 57, 285, 831], "time_format": [37, 57, 285, 831], "null_valu": [37, 57, 114, 115, 128, 285, 831], "quote_styl": [37, 57, 285, 831], "csvquotestyl": [37, 57, 285, 831], "textiowrapp": [37, 285], "comma": [37, 285], "csv": [37, 57, 58, 59, 114, 115, 119, 128, 285, 732, 831], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 59, 63, 69, 83, 85, 86, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 145, 152, 153, 156, 165, 169, 179, 181, 182, 184, 185, 187, 195, 196, 199, 201, 202, 210, 214, 222, 224, 225, 226, 232, 235, 239, 243, 244, 246, 250, 251, 252, 254, 255, 285, 295, 297, 299, 351, 370, 371, 409, 440, 470, 475, 476, 483, 493, 494, 495, 506, 527, 535, 538, 540, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 562, 565, 569, 570, 575, 584, 585, 586, 592, 600, 601, 602, 603, 604, 606, 607, 608, 609, 612, 613, 614, 617, 620, 637, 641, 643, 645, 647, 651, 656, 657, 659, 664, 665, 667, 668, 669, 673, 679, 680, 682, 685, 693, 696, 697, 698, 702, 707, 708, 710, 711, 720, 737, 742, 743, 747, 749, 758, 759, 761, 762, 766, 767, 772, 776, 784, 786, 790, 792, 795, 801, 802, 804, 811, 814, 819, 831, 834, 838, 839, 840, 841, 875, 887, 896, 919, 920, 954, 962, 964, 965, 991, 992, 994, 1021, 1026, 1027, 1034, 1042, 1060, 1062, 1064, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1087, 1089, 1093, 1097, 1098, 1103, 1112, 1113, 1114, 1120, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1140, 1141, 1142, 1145, 1148, 1155, 1160, 1165, 1172, 1174, 1184, 1191], "instead": [37, 43, 44, 63, 67, 78, 85, 86, 114, 115, 116, 119, 125, 126, 128, 133, 134, 144, 179, 181, 196, 202, 210, 212, 223, 224, 225, 228, 229, 232, 233, 247, 260, 261, 285, 309, 331, 332, 343, 356, 360, 364, 366, 368, 373, 377, 380, 392, 403, 475, 493, 535, 562, 563, 588, 589, 592, 600, 606, 607, 608, 609, 610, 611, 612, 614, 620, 647, 651, 652, 664, 665, 666, 667, 668, 669, 679, 680, 693, 696, 702, 707, 708, 711, 720, 743, 752, 758, 788, 789, 790, 792, 793, 804, 807, 808, 811, 831, 834, 850, 876, 877, 887, 901, 905, 912, 914, 917, 922, 926, 929, 941, 1026, 1060, 1085, 1086, 1089, 1090, 1116, 1117, 1120, 1128, 1134, 1135, 1136, 1137, 1140, 1142, 1148, 1166, 1184, 1191], "whether": [37, 57, 107, 109, 146, 149, 156, 230, 250, 285, 295, 297, 361, 379, 445, 446, 500, 501, 561, 720, 737, 771, 772, 791, 796, 801, 831, 834, 838, 839, 867, 870, 906, 928, 996, 997, 1184, 1191], "header": [37, 40, 45, 57, 59, 110, 114, 115, 119, 128, 166, 214, 251, 285, 831], "field": [37, 39, 57, 70, 99, 101, 106, 246, 253, 285, 483, 494, 544, 584, 585, 586, 603, 604, 622, 659, 660, 684, 702, 720, 803, 831, 887, 1034, 1060, 1068, 1113, 1129, 1131, 1132, 1151, 1153, 1184], "symbol": [37, 57, 285, 720, 831], "end": [37, 40, 57, 114, 115, 126, 128, 181, 285, 318, 321, 322, 349, 378, 403, 424, 476, 576, 581, 584, 594, 601, 605, 608, 611, 647, 664, 665, 667, 668, 671, 679, 680, 707, 708, 710, 720, 758, 763, 770, 781, 831, 834, 861, 894, 927, 969, 1027, 1109, 1112, 1122, 1129, 1133, 1184], "byte": [37, 57, 59, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 167, 285, 588, 590, 831, 948, 1116, 1118, 1184], "quot": [37, 38, 57, 114, 115, 128, 285, 831], "specifi": [37, 40, 57, 78, 90, 99, 101, 119, 125, 144, 156, 157, 163, 167, 168, 171, 180, 181, 182, 183, 184, 185, 198, 212, 222, 223, 225, 228, 229, 230, 232, 236, 250, 253, 260, 261, 264, 285, 330, 400, 401, 402, 403, 408, 494, 527, 541, 549, 550, 551, 552, 553, 555, 556, 557, 562, 572, 650, 653, 654, 655, 664, 665, 667, 668, 671, 699, 702, 707, 708, 720, 737, 739, 746, 750, 753, 757, 758, 759, 760, 761, 762, 766, 786, 788, 789, 791, 792, 796, 801, 803, 807, 808, 812, 831, 875, 948, 949, 950, 951, 957, 1089, 1184], "defin": [37, 40, 48, 57, 116, 141, 142, 144, 153, 157, 165, 168, 181, 182, 184, 185, 202, 210, 213, 222, 255, 266, 271, 285, 299, 424, 481, 495, 531, 535, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 645, 664, 665, 667, 668, 682, 685, 702, 707, 708, 720, 739, 747, 750, 758, 759, 761, 762, 780, 786, 804, 814, 819, 831, 834, 841, 969, 1032, 1042, 1060, 1069, 1184], "chrono": [37, 57, 285, 381, 384, 612, 613, 614, 617, 831, 930, 933, 1140, 1141, 1142, 1145], "rust": [37, 45, 57, 96, 116, 120, 122, 126, 202, 271, 285, 585, 831, 1042, 1113, 1184], "crate": [37, 57, 285, 576, 577, 578, 583, 584, 585, 597, 598, 612, 613, 614, 617, 831, 834, 1104, 1105, 1106, 1111, 1112, 1113, 1125, 1126, 1140, 1141, 1142, 1145], "fraction": [37, 57, 137, 138, 139, 140, 226, 285, 379, 470, 528, 559, 612, 614, 720, 831, 928, 1021, 1056, 1082, 1140, 1142, 1184], "second": [37, 57, 137, 138, 139, 140, 143, 181, 199, 222, 256, 285, 374, 378, 391, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 612, 614, 664, 665, 666, 667, 668, 669, 706, 707, 708, 710, 720, 758, 767, 786, 831, 834, 923, 927, 940, 941, 1140, 1142, 1192], "infer": [37, 57, 103, 105, 106, 107, 108, 109, 114, 115, 116, 119, 123, 124, 128, 132, 133, 153, 202, 285, 392, 542, 586, 612, 613, 614, 615, 617, 696, 720, 831, 927, 941, 1066, 1114, 1140, 1141, 1142, 1143, 1145, 1184], "timeunit": [37, 48, 50, 57, 285, 350, 351, 383, 395, 614, 664, 665, 666, 667, 668, 669, 831, 834, 895, 896, 932, 944, 1142], "frame": [37, 38, 40, 57, 63, 64, 65, 66, 67, 68, 78, 85, 86, 106, 115, 119, 125, 137, 138, 144, 157, 158, 196, 197, 202, 207, 210, 213, 223, 224, 225, 247, 254, 255, 285, 739, 740, 777, 780, 804, 831, 834, 874, 1184, 1191, 1192], "repres": [37, 40, 57, 61, 76, 103, 105, 107, 108, 109, 116, 119, 237, 257, 263, 285, 433, 435, 493, 574, 638, 641, 656, 669, 671, 682, 684, 685, 697, 698, 701, 709, 716, 720, 797, 805, 831, 1086, 1101, 1173, 1184], "necessari": [37, 57, 69, 88, 119, 285, 831], "non_numer": [37, 57, 285, 831], "never": [37, 57, 116, 223, 285, 831], "strategi": [37, 57, 78, 86, 114, 141, 142, 143, 144, 146, 171, 181, 184, 198, 199, 209, 255, 285, 299, 408, 483, 495, 720, 753, 758, 761, 766, 767, 804, 831, 957, 1034, 1184], "put": [37, 57, 285, 831], "around": [37, 57, 285, 831], "thei": [37, 39, 40, 57, 69, 85, 86, 87, 88, 106, 128, 150, 200, 225, 285, 608, 609, 720, 743, 831, 834], "record": [37, 42, 57, 122, 134, 199, 246, 285, 767, 831], "termin": [37, 57, 285, 831], "indistinguish": [37, 57, 285, 831], "even": [37, 57, 114, 285, 531, 535, 720, 831, 1060, 1184], "invalid": [37, 57, 114, 115, 128, 285, 586, 587, 596, 633, 720, 831, 1114, 1115, 1124], "g": [37, 57, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 134, 152, 246, 254, 285, 292, 299, 403, 495, 564, 671, 720, 745, 783, 784, 831, 1084, 1165, 1184, 1192], "pars": [37, 57, 63, 114, 115, 119, 124, 128, 131, 132, 156, 180, 183, 228, 229, 232, 236, 250, 260, 261, 264, 285, 330, 424, 494, 527, 572, 586, 596, 615, 642, 644, 650, 653, 654, 655, 662, 675, 687, 691, 699, 700, 702, 704, 710, 720, 737, 757, 760, 788, 789, 792, 796, 801, 807, 808, 812, 831, 875, 969, 1089, 1114, 1124, 1142, 1143, 1184], "valid": [37, 40, 48, 57, 63, 116, 120, 122, 126, 146, 150, 167, 198, 285, 342, 576, 577, 578, 583, 584, 585, 587, 597, 598, 710, 720, 766, 831, 834, 886, 948, 962, 1104, 1105, 1106, 1111, 1112, 1113, 1115, 1125, 1126, 1184], "integ": [37, 39, 40, 53, 54, 55, 56, 57, 72, 73, 74, 75, 135, 142, 144, 145, 147, 165, 181, 222, 244, 285, 296, 329, 379, 412, 413, 526, 535, 540, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 596, 640, 647, 675, 679, 680, 696, 720, 747, 758, 786, 831, 834, 872, 928, 960, 979, 1060, 1064, 1077, 1086, 1124, 1184, 1191, 1192], "aren": [37, 57, 285, 831], "t": [37, 57, 65, 66, 86, 114, 119, 125, 128, 181, 202, 213, 252, 254, 285, 299, 342, 349, 357, 377, 397, 400, 401, 402, 456, 495, 527, 531, 583, 609, 612, 614, 710, 720, 758, 780, 802, 831, 834, 886, 926, 947, 949, 950, 951, 1007, 1042, 1084, 1111, 1136, 1137, 1140, 1142, 1165, 1174, 1184], "strictli": [37, 57, 69, 88, 285, 751, 831], "table_nam": [38, 40, 285], "connect": [38, 114, 116, 117, 120, 122, 126, 131, 133, 134, 285, 733], "if_exist": [38, 285], "dbwritemod": [38, 285], "fail": [38, 39, 104, 118, 120, 124, 129, 133, 137, 138, 152, 252, 285, 310, 382, 483, 612, 613, 614, 617, 720, 802, 831, 1042, 1140, 1141, 1142, 1145, 1184], "dbwriteengin": [38, 285], "sqlalchemi": [38, 116, 136, 285], "databas": [38, 116, 117, 285, 732], "creat": [38, 40, 69, 88, 103, 107, 109, 116, 117, 129, 130, 142, 143, 144, 145, 146, 147, 158, 159, 181, 182, 185, 211, 214, 222, 256, 260, 285, 351, 378, 392, 483, 539, 546, 549, 550, 552, 555, 556, 557, 601, 654, 663, 664, 665, 666, 667, 668, 669, 706, 707, 708, 716, 720, 740, 741, 749, 758, 759, 762, 786, 807, 831, 874, 878, 887, 896, 927, 941, 1053, 1060, 1063, 1129, 1165, 1184, 1191, 1192], "append": [38, 39, 144, 169, 198, 199, 285, 539, 710, 720, 766, 767, 831, 954, 1184], "your": [38, 40, 69, 78, 88, 114, 115, 116, 119, 134, 196, 202, 224, 225, 228, 243, 260, 264, 271, 285, 299, 495, 585, 612, 613, 614, 620, 685, 720, 763, 770, 772, 788, 807, 812, 819, 831, 1042, 1113, 1140, 1141, 1142, 1148, 1184, 1192], "special": [38, 114, 115, 128, 285, 548, 584, 720, 841, 1042, 1071, 1112, 1184], "uri": [38, 39, 116, 117, 118, 129, 130, 285], "postgresql": [38, 116, 117, 285, 527, 720], "user": [38, 116, 117, 153, 202, 213, 266, 271, 285, 299, 493, 495, 531, 561, 645, 685, 720, 780, 814, 819, 831, 841, 1042, 1087, 1184], "pass": [38, 39, 40, 45, 66, 78, 105, 116, 117, 119, 128, 133, 134, 137, 139, 142, 144, 146, 156, 161, 163, 180, 181, 184, 187, 201, 212, 213, 222, 228, 232, 236, 239, 250, 256, 260, 264, 285, 299, 358, 374, 377, 406, 422, 475, 495, 527, 531, 546, 549, 550, 551, 552, 553, 555, 556, 557, 562, 572, 607, 608, 609, 641, 650, 664, 675, 702, 710, 716, 720, 737, 746, 757, 758, 759, 761, 762, 764, 771, 772, 780, 786, 788, 792, 794, 796, 801, 807, 812, 819, 831, 841, 903, 926, 955, 964, 994, 1026, 1042, 1089, 1135, 1136, 1137, 1155, 1184], "server": [38, 116, 117, 285], "port": [38, 114, 116, 117, 120, 122, 126, 131, 285], "sqlite": [38, 116, 285], "db": [38, 117, 285], "replac": [38, 39, 114, 115, 128, 170, 171, 220, 251, 260, 261, 285, 351, 377, 494, 598, 720, 752, 807, 808, 831, 896, 926, 1041, 1085, 1086, 1126, 1184], "insert": [38, 114, 115, 120, 122, 126, 128, 131, 132, 133, 190, 219, 251, 253, 285, 560, 575, 620, 720, 803, 831, 1083, 1103, 1148, 1184], "mode": [38, 39, 57, 58, 59, 63, 137, 139, 214, 285, 584, 693, 696, 711, 720, 742, 831, 1112, 1184, 1191], "new": [38, 39, 40, 119, 128, 150, 189, 190, 202, 210, 211, 218, 219, 240, 251, 253, 254, 255, 260, 261, 285, 294, 351, 405, 423, 492, 515, 597, 598, 603, 604, 621, 622, 628, 716, 720, 732, 784, 800, 803, 804, 807, 808, 814, 819, 831, 837, 896, 953, 1053, 1065, 1125, 1126, 1131, 1132, 1149, 1151, 1157, 1162, 1184, 1191], "alreadi": [38, 39, 285, 342, 456, 637, 720, 886, 1007, 1172, 1184], "adbc": [38, 116, 117, 285], "deltalak": [39, 118, 129, 136, 285], "deltat": [39, 285], "ignor": [39, 143, 144, 146, 204, 238, 255, 285, 295, 297, 345, 377, 400, 401, 402, 453, 520, 521, 575, 641, 643, 720, 838, 839, 889, 926, 949, 950, 951, 1004, 1051, 1052, 1103, 1184], "overwrite_schema": [39, 285], "storage_opt": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 285], "delta_write_opt": [39, 285], "delta": [39, 50, 118, 129, 237, 257, 285, 555, 557, 574, 638, 656, 697, 698, 701, 709, 720, 732, 797, 805, 831, 1078, 1080, 1101, 1173, 1184], "handl": [39, 86, 110, 114, 115, 128, 134, 285, 345, 453, 620, 720, 742, 831, 889, 1004, 1148, 1184], "throw": [39, 157, 285, 325, 586, 587, 720, 739, 831, 864, 1114, 1115, 1184], "add": [39, 40, 115, 169, 181, 184, 202, 260, 261, 262, 285, 343, 516, 517, 533, 535, 624, 669, 673, 710, 720, 758, 761, 766, 807, 808, 809, 810, 831, 840, 954, 1184], "anyth": [39, 223, 285], "updat": [39, 285, 831], "extra": [39, 45, 59, 114, 115, 118, 119, 120, 122, 126, 128, 129, 130, 131, 169, 181, 285, 720, 758, 831, 840, 954, 1184], "storag": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 285], "backend": [39, 116, 117, 118, 129, 130, 285], "cloud": [39, 116, 118, 129, 130, 133, 134, 285], "configur": [39, 118, 129, 130, 150, 285], "authent": [39, 118, 129, 130, 285], "see": [39, 40, 41, 42, 48, 116, 117, 118, 119, 129, 130, 133, 137, 138, 139, 140, 144, 146, 161, 181, 198, 213, 214, 285, 330, 408, 440, 493, 569, 576, 583, 584, 597, 664, 665, 667, 668, 695, 707, 708, 716, 720, 742, 758, 831, 834, 869, 875, 992, 1097, 1104, 1111, 1112, 1125, 1184, 1192], "here": [39, 40, 45, 103, 105, 106, 107, 109, 116, 117, 118, 123, 124, 129, 130, 132, 133, 142, 144, 146, 285, 495, 585, 587, 720, 831, 1115], "gc": [39, 118, 129, 130, 285], "azur": [39, 118, 129, 130, 133, 285], "keyword": [39, 66, 118, 126, 129, 161, 213, 223, 228, 229, 260, 261, 264, 285, 531, 699, 702, 720, 780, 788, 789, 807, 808, 812, 831, 1184], "argument": [39, 45, 88, 114, 118, 126, 128, 129, 161, 163, 168, 180, 181, 182, 183, 184, 185, 204, 212, 213, 214, 222, 228, 229, 230, 236, 238, 247, 253, 256, 260, 261, 264, 285, 378, 392, 403, 424, 527, 531, 546, 549, 550, 551, 552, 553, 555, 556, 557, 572, 607, 608, 609, 641, 648, 649, 650, 653, 654, 655, 664, 671, 696, 699, 702, 707, 720, 746, 750, 757, 758, 759, 760, 761, 762, 780, 786, 788, 789, 791, 796, 803, 807, 808, 812, 831, 840, 927, 941, 969, 1135, 1136, 1137, 1166, 1184], "while": [39, 85, 115, 118, 119, 129, 144, 146, 150, 196, 206, 251, 255, 285, 589, 743, 776, 804, 831, 962, 1117, 1184], "lake": [39, 118, 129, 285, 732], "typeerror": [39, 285], "unsupport": [39, 285], "arrowinvaliderror": [39, 285], "could": [39, 76, 91, 157, 285, 325, 659, 669, 673, 720, 739, 747, 831, 864, 962, 1184], "primit": [39, 285, 429, 720, 1165, 1184], "categor": [39, 69, 87, 88, 104, 137, 138, 139, 140, 198, 244, 245, 285, 326, 327, 343, 494, 535, 631, 720, 834, 865, 866, 867, 868, 869, 870, 887, 1060, 1167, 1184], "protocol": [39, 104, 117, 152, 285], "associ": [39, 40, 64, 66, 78, 117, 143, 225, 285], "affect": [39, 285], "follow": [39, 40, 45, 83, 114, 115, 118, 128, 129, 130, 137, 181, 199, 202, 213, 222, 256, 285, 374, 378, 392, 531, 538, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 622, 633, 664, 665, 667, 668, 685, 707, 708, 710, 712, 713, 715, 720, 721, 722, 725, 727, 728, 729, 758, 767, 780, 786, 831, 923, 927, 941, 1062, 1085, 1086, 1176, 1178, 1180, 1184, 1185, 1188, 1189, 1190, 1192], "unsign": [39, 72, 73, 74, 75, 285, 540, 720, 834, 979, 1064, 1184], "millisecond": [39, 181, 199, 222, 256, 285, 374, 378, 388, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 707, 708, 720, 758, 767, 786, 831, 834, 923, 927, 937, 941], "nanosecond": [39, 181, 199, 222, 256, 285, 374, 378, 379, 390, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 707, 708, 720, 758, 767, 786, 831, 923, 927, 928, 939, 941], "zone": [39, 48, 285, 349, 352, 377, 614, 664, 665, 666, 667, 668, 834, 894, 897, 926, 1142], "binari": [39, 41, 116, 119, 285, 318, 320, 321, 322, 834, 858, 861, 862], "nullabl": [39, 285], "To": [39, 85, 170, 285, 330, 347, 348, 408, 576, 583, 584, 597, 608, 609, 610, 611, 618, 720, 752, 831, 875, 891, 892, 962, 1104, 1111, 1112, 1125, 1146, 1165, 1184], "pyarrow": [39, 45, 103, 104, 108, 114, 117, 118, 120, 122, 126, 129, 134, 136, 241, 246, 247, 285, 733, 1160, 1164, 1165, 1166, 1184], "ha": [39, 40, 78, 85, 116, 119, 128, 152, 153, 155, 181, 182, 183, 184, 185, 222, 256, 266, 285, 299, 323, 324, 342, 427, 431, 434, 439, 451, 454, 461, 465, 479, 484, 491, 492, 504, 533, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 577, 590, 591, 592, 593, 599, 600, 606, 624, 632, 645, 683, 716, 720, 736, 743, 758, 759, 760, 761, 762, 771, 783, 786, 811, 814, 819, 831, 841, 863, 874, 886, 888, 962, 974, 976, 980, 1002, 1005, 1012, 1016, 1030, 1035, 1070, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1168, 1184], "last": [39, 137, 138, 139, 140, 156, 187, 199, 201, 214, 225, 236, 239, 250, 252, 279, 285, 309, 342, 355, 370, 375, 393, 431, 432, 439, 459, 480, 514, 516, 517, 518, 519, 533, 571, 604, 624, 626, 705, 720, 737, 767, 796, 799, 801, 802, 827, 831, 834, 850, 886, 900, 919, 924, 942, 964, 980, 981, 994, 1010, 1031, 1132, 1155, 1184], "filesystem": [39, 118, 129, 130, 285], "table_path": [39, 118, 129, 130, 285], "match": [39, 40, 48, 86, 97, 103, 105, 106, 107, 109, 123, 124, 132, 137, 138, 139, 140, 171, 199, 223, 255, 285, 501, 554, 576, 577, 578, 581, 583, 584, 586, 587, 597, 598, 605, 612, 613, 614, 720, 753, 767, 804, 831, 834, 979, 988, 1077, 1104, 1105, 1106, 1109, 1111, 1112, 1114, 1115, 1125, 1126, 1133, 1140, 1141, 1142, 1184], "version": [39, 83, 88, 118, 119, 129, 136, 152, 153, 155, 181, 182, 183, 184, 185, 233, 266, 285, 299, 324, 331, 332, 356, 360, 364, 366, 368, 370, 371, 373, 377, 380, 392, 427, 431, 434, 439, 451, 454, 461, 465, 479, 484, 491, 492, 533, 547, 563, 577, 590, 591, 592, 593, 599, 600, 606, 612, 614, 624, 645, 652, 664, 666, 683, 695, 696, 707, 720, 736, 756, 758, 759, 760, 761, 762, 771, 783, 793, 811, 814, 831, 840, 841, 876, 877, 887, 901, 905, 912, 914, 917, 919, 920, 922, 926, 927, 929, 941, 974, 980, 1002, 1005, 1012, 1016, 1030, 1035, 1060, 1070, 1090, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1140, 1142, 1184], "old": [39, 218, 285, 784, 831], "existing_table_path": [39, 285], "store": [39, 114, 126, 130, 169, 196, 224, 285, 326, 840, 866, 954, 1184], "bucket": [39, 118, 129, 130, 133, 285, 378, 392, 927, 941, 965, 1184], "prefix": [39, 150, 285, 294, 322, 492, 515, 517, 518, 519, 605, 609, 610, 620, 624, 720, 834, 862, 1133, 1138, 1148], "aws_region": [39, 129, 133, 285], "the_aws_region": [39, 285], "aws_access_key_id": [39, 118, 129, 133, 285], "the_aws_access_key_id": [39, 118, 129, 130, 285], "aws_secret_access_kei": [39, 118, 129, 133, 285], "the_aws_secret_access_kei": [39, 118, 129, 130, 285], "pa": [39, 103, 134, 285], "workbook": [40, 119, 285], "worksheet": [40, 119, 125, 285], "posit": [40, 163, 168, 180, 183, 212, 228, 229, 230, 232, 236, 253, 260, 261, 264, 285, 400, 401, 402, 403, 475, 527, 535, 562, 572, 585, 596, 648, 649, 650, 653, 654, 655, 671, 699, 702, 720, 746, 750, 757, 760, 788, 789, 791, 792, 796, 803, 807, 808, 812, 831, 949, 950, 951, 1026, 1060, 1089, 1113, 1124, 1184], "tupl": [40, 117, 119, 125, 153, 196, 202, 223, 224, 225, 231, 263, 285, 542, 720, 781, 794, 831, 834, 1066, 1184], "a1": [40, 79, 81, 285], "table_styl": [40, 285], "column_format": [40, 285], "columnformatdict": [40, 285], "dtype_format": [40, 285], "oneormoredatatyp": [40, 142, 285, 988, 1184], "conditional_format": [40, 285], "conditionalformatdict": [40, 285], "header_format": [40, 285], "column_tot": [40, 285], "columntotalsdefinit": [40, 285], "column_width": [40, 285], "columnwidthsdefinit": [40, 285], "row_tot": [40, 285], "rowtotalsdefinit": [40, 285], "row_height": [40, 285], "sparklin": [40, 285], "sequenc": [40, 70, 78, 84, 85, 103, 105, 106, 107, 109, 114, 115, 116, 119, 123, 124, 125, 128, 132, 142, 143, 144, 156, 162, 168, 169, 198, 199, 206, 210, 212, 213, 214, 225, 236, 244, 250, 254, 255, 256, 285, 343, 429, 483, 491, 493, 531, 535, 572, 610, 611, 622, 645, 650, 659, 660, 673, 675, 683, 684, 685, 695, 700, 720, 737, 750, 766, 767, 776, 780, 796, 801, 804, 831, 840, 887, 888, 890, 954, 1034, 1060, 1086, 1151, 1184], "formula": [40, 285, 397, 720, 947, 1184], "autofilt": [40, 285], "autofit": [40, 285], "hidden_column": [40, 285], "selectortyp": [40, 285, 834], "hide_gridlin": [40, 285], "sheet_zoom": [40, 285], "freeze_pan": [40, 285], "excel": [40, 119, 285], "open": [40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 133, 285, 745, 783, 831], "xlsxwriter": [40, 136, 285], "close": [40, 116, 181, 182, 184, 185, 222, 285, 343, 424, 488, 535, 546, 549, 550, 551, 552, 553, 555, 556, 557, 569, 664, 665, 667, 668, 707, 708, 720, 758, 759, 761, 762, 786, 831, 887, 969, 1060, 1097, 1184], "xlsx": [40, 119, 285], "work": [40, 49, 104, 115, 134, 219, 229, 261, 285, 295, 297, 299, 316, 329, 330, 403, 412, 456, 485, 495, 527, 545, 588, 589, 634, 720, 789, 808, 831, 834, 838, 839, 857, 872, 875, 960, 1007, 1036, 1116, 1117, 1169, 1184], "directori": [40, 45, 126, 133, 285], "sheet1": [40, 285], "medium": [40, 285], "kei": [40, 78, 83, 86, 130, 133, 181, 196, 198, 199, 207, 212, 214, 218, 221, 224, 225, 255, 285, 495, 702, 720, 751, 758, 766, 767, 777, 784, 785, 804, 831], "first_column": [40, 285], "last_column": [40, 285], "banded_column": [40, 285], "banded_row": [40, 285], "sheet": [40, 119, 125, 285], "chart": [40, 285, 781, 831], "subsequ": [40, 68, 217, 247, 285, 483, 710, 749, 831], "colnam": [40, 128, 144, 166, 285, 748, 831], "given": [40, 63, 64, 78, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 123, 124, 125, 128, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 153, 156, 167, 168, 170, 181, 182, 184, 185, 195, 202, 212, 213, 222, 223, 225, 232, 233, 236, 250, 255, 285, 330, 349, 352, 381, 383, 384, 397, 424, 450, 475, 483, 486, 495, 527, 531, 538, 541, 542, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 562, 563, 584, 585, 594, 595, 612, 614, 620, 622, 645, 671, 683, 684, 685, 696, 697, 698, 720, 737, 750, 758, 759, 761, 762, 771, 772, 780, 786, 792, 793, 796, 801, 804, 814, 819, 831, 834, 841, 875, 894, 897, 930, 932, 933, 947, 948, 965, 969, 991, 1001, 1026, 1034, 1037, 1040, 1042, 1053, 1062, 1066, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1089, 1090, 1112, 1113, 1122, 1123, 1140, 1142, 1148, 1171, 1175, 1184, 1191, 1192], "dd": [40, 285], "mm": [40, 285], "yyyi": [40, 285], "overridden": [40, 103, 105, 107, 109, 123, 124, 148, 285, 831], "basi": [40, 144, 285], "param": [40, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 143, 144, 146, 223, 285, 831], "It": [40, 69, 88, 207, 213, 271, 285, 324, 503, 545, 716, 720, 771, 772, 777, 819, 831, 1085, 1086, 1184], "float_dtyp": [40, 285], "simplifi": [40, 57, 58, 59, 84, 85, 285, 742, 743, 749, 751, 781, 794, 831], "uniform": [40, 285, 535, 720, 1060, 1184], "condit": [40, 165, 172, 223, 285, 581, 605, 651, 673, 710, 747, 754, 831], "suppli": [40, 103, 105, 106, 107, 109, 116, 123, 124, 132, 172, 223, 285, 531, 720, 754, 831], "typenam": [40, 285], "3_color_scal": [40, 285], "data_bar": [40, 285], "make": [40, 70, 86, 103, 108, 114, 115, 120, 122, 126, 131, 207, 210, 217, 256, 285, 401, 402, 494, 518, 519, 527, 541, 603, 720, 777, 831, 950, 951, 965, 1041, 1131, 1184, 1192], "icon": [40, 285], "multipl": [40, 66, 84, 85, 86, 114, 115, 119, 125, 128, 131, 132, 133, 142, 146, 156, 163, 167, 169, 172, 180, 181, 189, 197, 212, 214, 225, 228, 230, 236, 250, 255, 260, 264, 285, 481, 500, 504, 511, 512, 527, 542, 545, 549, 550, 551, 552, 553, 555, 556, 557, 572, 650, 659, 660, 673, 683, 684, 686, 690, 695, 700, 703, 710, 716, 720, 737, 742, 743, 746, 754, 757, 758, 788, 791, 796, 801, 804, 807, 812, 819, 831, 840, 948, 954, 1032, 1047, 1066, 1184], "singl": [40, 64, 78, 85, 86, 114, 115, 116, 117, 119, 126, 128, 133, 142, 157, 163, 164, 165, 169, 177, 195, 198, 202, 212, 223, 225, 236, 285, 299, 330, 374, 409, 417, 451, 452, 481, 493, 495, 539, 542, 572, 575, 627, 639, 645, 650, 654, 655, 680, 684, 685, 700, 708, 720, 739, 742, 746, 747, 766, 796, 831, 840, 875, 923, 954, 1002, 1003, 1032, 1063, 1066, 1103, 1160, 1184], "across": [40, 78, 285, 642, 644, 662, 687, 691, 704], "effect": [40, 175, 181, 184, 246, 285, 357, 495, 664, 665, 720, 758, 761, 810, 831, 894, 902], "heatmap": [40, 285], "min": [40, 45, 59, 162, 171, 214, 222, 285, 332, 339, 408, 527, 538, 546, 552, 691, 699, 720, 753, 786, 831, 877, 883, 888, 957, 1062, 1075, 1184, 1192], "entir": [40, 285, 742, 831], "made": [40, 116, 285, 1165, 1184], "abov": [40, 137, 214, 285, 710], "than": [40, 57, 58, 59, 102, 107, 109, 114, 115, 116, 119, 125, 128, 134, 144, 146, 158, 180, 183, 196, 199, 202, 212, 223, 224, 226, 254, 271, 285, 416, 418, 442, 470, 490, 495, 506, 535, 545, 559, 569, 588, 594, 595, 604, 620, 656, 664, 685, 720, 742, 757, 760, 767, 819, 831, 1021, 1042, 1060, 1069, 1082, 1097, 1116, 1122, 1123, 1132, 1148, 1184, 1192], "bold": [40, 285], "font_color": [40, 285], "702963": [40, 285], "total": [40, 167, 285, 356, 360, 364, 366, 368, 373, 380, 385, 386, 387, 388, 389, 390, 391, 901, 905, 912, 914, 917, 922, 929, 934, 935, 936, 937, 938, 939, 940, 948, 1184], "export": [40, 196, 197, 224, 225, 243, 246, 285, 716], "sum": [40, 63, 167, 175, 180, 181, 195, 214, 222, 264, 285, 340, 341, 397, 409, 483, 495, 503, 505, 506, 507, 546, 549, 552, 556, 639, 641, 659, 661, 662, 673, 685, 695, 704, 720, 742, 743, 745, 749, 751, 757, 758, 779, 781, 786, 790, 794, 812, 831, 834, 884, 885, 947, 948, 1072, 1073, 1075, 1078, 1079, 1080, 1184], "must": [40, 104, 105, 118, 129, 130, 134, 162, 168, 181, 182, 184, 185, 199, 207, 222, 223, 285, 343, 483, 493, 535, 546, 549, 550, 551, 552, 553, 555, 556, 557, 710, 720, 750, 758, 759, 761, 762, 767, 771, 772, 777, 786, 831, 887, 888, 1060, 1184], "funcnam": [40, 285], "averag": [40, 285, 400, 401, 402, 538, 720, 949, 950, 951, 1062, 1184], "count_num": [40, 285], "count": [40, 63, 114, 115, 120, 122, 126, 128, 131, 132, 133, 134, 154, 155, 162, 181, 199, 210, 211, 214, 222, 251, 255, 256, 262, 271, 276, 285, 300, 337, 374, 443, 451, 452, 495, 503, 505, 513, 525, 546, 549, 550, 551, 552, 553, 555, 556, 557, 577, 578, 635, 637, 646, 692, 720, 735, 736, 758, 767, 779, 786, 810, 819, 824, 831, 888, 923, 965, 1002, 1003, 1049, 1055, 1105, 1106, 1170, 1172, 1184], "std_dev": [40, 285], "var": [40, 147, 285, 557, 720, 831, 1184], "pixel": [40, 285], "unit": [40, 48, 50, 137, 138, 139, 140, 144, 146, 167, 285, 350, 351, 358, 383, 395, 489, 504, 612, 614, 636, 664, 665, 666, 667, 668, 669, 675, 720, 781, 831, 834, 895, 896, 903, 932, 944, 948, 1040, 1140, 1142, 1171, 1184, 1192], "hand": [40, 114, 115, 128, 285, 471, 472, 473, 474, 1022, 1023, 1024, 1025], "side": [40, 181, 182, 184, 185, 222, 285, 424, 471, 472, 473, 474, 546, 549, 550, 551, 552, 553, 555, 556, 557, 560, 664, 665, 667, 668, 707, 708, 720, 758, 759, 761, 762, 786, 831, 969, 1022, 1023, 1024, 1025, 1083, 1184], "call": [40, 67, 69, 88, 115, 116, 137, 138, 139, 140, 144, 146, 150, 180, 181, 184, 200, 202, 222, 284, 285, 299, 338, 341, 439, 495, 514, 516, 517, 518, 519, 533, 565, 624, 716, 720, 733, 757, 758, 759, 761, 762, 786, 830, 831, 834, 841, 1042, 1093, 1184], "ad": [40, 106, 119, 181, 184, 251, 255, 260, 261, 285, 298, 406, 659, 660, 720, 758, 761, 804, 807, 808, 831, 887, 955, 1060, 1184], "wise": [40, 78, 116, 175, 285, 301, 302, 303, 304, 305, 306, 333, 334, 335, 404, 487, 566, 567, 568, 629, 630, 659, 660, 673, 695, 720, 842, 843, 844, 845, 846, 847, 879, 880, 881, 952, 1038, 1039, 1094, 1095, 1096, 1158, 1159, 1184], "particip": [40, 285], "distinct": [40, 146, 212, 285, 316, 427, 428, 431, 432, 485, 538, 669, 720, 857, 974, 975, 980, 981, 1036, 1062, 1184, 1192], "referenc": [40, 285, 622], "differ": [40, 114, 134, 137, 139, 169, 181, 196, 222, 224, 225, 243, 251, 285, 345, 355, 374, 375, 377, 393, 399, 453, 471, 473, 479, 494, 495, 520, 521, 523, 612, 635, 672, 675, 681, 720, 749, 758, 786, 831, 834, 840, 869, 889, 900, 923, 924, 926, 942, 954, 1004, 1022, 1024, 1030, 1042, 1051, 1052, 1084, 1140, 1184], "row_index": [40, 285], "height": [40, 165, 285], "provid": [40, 66, 114, 115, 117, 118, 128, 129, 130, 133, 144, 146, 172, 195, 285, 319, 320, 403, 483, 493, 495, 579, 580, 583, 586, 587, 608, 609, 610, 611, 675, 702, 720, 732, 754, 831, 859, 860, 965, 991, 1042, 1107, 1108, 1111, 1114, 1115, 1184, 1191, 1192], "intersect": [40, 285, 472, 834, 1023], "bodi": [40, 285], "start": [40, 113, 114, 115, 116, 117, 120, 122, 125, 126, 128, 131, 132, 133, 148, 180, 181, 183, 184, 200, 235, 256, 262, 285, 318, 321, 322, 355, 369, 375, 378, 392, 393, 403, 424, 476, 549, 550, 552, 555, 556, 557, 570, 576, 581, 584, 595, 601, 605, 609, 610, 620, 647, 659, 664, 665, 667, 668, 671, 673, 679, 680, 707, 708, 710, 720, 757, 758, 760, 761, 781, 795, 810, 831, 834, 862, 895, 897, 900, 903, 904, 911, 913, 916, 918, 921, 924, 927, 932, 941, 942, 969, 1027, 1098, 1109, 1112, 1123, 1129, 1133, 1148, 1184, 1192], "unless": [40, 78, 105, 247, 285, 607, 608, 696, 831, 1135, 1166, 1174, 1184], "marker": [40, 285], "compliant": [40, 285], "case": [40, 69, 78, 85, 103, 105, 106, 107, 109, 116, 123, 124, 132, 133, 148, 153, 169, 181, 182, 184, 185, 196, 202, 222, 224, 225, 243, 285, 349, 492, 493, 503, 504, 515, 546, 576, 584, 597, 720, 743, 758, 759, 761, 762, 786, 831, 834, 840, 894, 954, 1104, 1112, 1125, 1184], "three": [40, 249, 285, 343, 483, 535, 560, 720, 887, 1034, 1060, 1184], "avail": [40, 112, 116, 117, 118, 129, 130, 142, 150, 214, 284, 285, 538, 712, 713, 715, 719, 720, 721, 722, 725, 726, 727, 728, 729, 732, 733, 751, 830, 831, 834, 1062, 1176, 1178, 1180, 1184, 1185, 1188, 1189, 1190], "insert_befor": [40, 285], "insert_aft": [40, 285], "respect": [40, 285, 834], "direct": [40, 117, 126, 130, 133, 137, 232, 254, 285, 475, 562, 720, 792, 831, 1026, 1089, 1184], "far": [40, 285], "strongli": [40, 148, 202, 223, 271, 285, 495, 720, 1042, 1184], "advis": [40, 69, 88, 200, 285], "structur": [40, 94, 98, 100, 169, 213, 225, 246, 285, 531, 720, 780, 831, 840, 954, 1184], "wherev": [40, 202, 271, 285, 495, 720, 1042, 1184], "possibl": [40, 114, 156, 180, 183, 196, 202, 224, 250, 252, 271, 285, 489, 495, 503, 548, 604, 636, 720, 737, 757, 760, 796, 801, 802, 831, 1042, 1071, 1132, 1184], "simpl": [40, 146, 210, 285], "colx": [40, 68, 285, 518, 519, 834, 1192], "coli": [40, 285, 518, 519, 834, 1192], "after": [40, 68, 86, 106, 113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 169, 253, 284, 285, 403, 494, 527, 538, 620, 720, 803, 831, 840, 954, 1041, 1062, 1148, 1184], "befor": [40, 114, 116, 119, 128, 134, 137, 138, 139, 140, 148, 150, 169, 181, 184, 199, 253, 285, 340, 341, 342, 494, 527, 528, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 620, 625, 697, 698, 720, 758, 761, 764, 767, 803, 831, 840, 884, 885, 886, 954, 1041, 1056, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1148, 1154, 1184], "most": [40, 65, 103, 114, 115, 117, 128, 137, 138, 139, 140, 285, 504, 511, 528, 604, 720, 1047, 1056, 1132, 1184, 1191], "mandatori": [40, 285], "return_dtyp": [40, 153, 202, 285, 299, 491, 493, 494, 495, 645, 683, 684, 685, 720, 841, 1041, 1042, 1184], "latter": [40, 169, 285, 840, 954, 1184], "appropri": [40, 134, 246, 285, 538, 720, 1062, 1184], "pure": [40, 285, 1165, 1184], "actual": [40, 106, 144, 146, 225, 285, 1092, 1184], "indic": [40, 113, 114, 115, 116, 120, 122, 126, 128, 141, 142, 146, 181, 182, 184, 185, 222, 225, 230, 232, 244, 285, 310, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 475, 481, 499, 502, 546, 549, 550, 551, 552, 553, 555, 556, 557, 560, 562, 566, 627, 650, 651, 720, 758, 759, 761, 762, 786, 791, 792, 831, 834, 973, 974, 975, 978, 980, 981, 982, 983, 984, 985, 1026, 1032, 1083, 1089, 1094, 1156, 1161, 1184, 1192], "calcul": [40, 78, 181, 237, 257, 285, 345, 400, 401, 402, 440, 453, 471, 489, 554, 569, 574, 636, 638, 656, 697, 698, 701, 709, 720, 758, 797, 805, 831, 889, 949, 950, 951, 992, 1004, 1022, 1077, 1097, 1101, 1173, 1184], "individu": [40, 59, 144, 150, 222, 246, 285, 495, 584, 720, 742, 786, 831, 873, 1112, 1184], "gridlin": [40, 285], "zoom": [40, 285], "freez": [40, 285], "pane": [40, 285], "top": [40, 156, 250, 285, 737, 801, 831], "index": [40, 104, 108, 111, 136, 152, 173, 181, 182, 184, 185, 190, 195, 196, 199, 214, 220, 222, 223, 224, 232, 235, 246, 248, 255, 256, 262, 285, 293, 307, 308, 309, 311, 374, 417, 447, 448, 459, 475, 476, 481, 483, 546, 549, 550, 551, 552, 553, 555, 556, 557, 560, 562, 570, 583, 601, 627, 720, 758, 759, 761, 762, 767, 786, 792, 795, 804, 810, 831, 848, 849, 850, 851, 852, 923, 991, 998, 999, 1010, 1026, 1027, 1032, 1034, 1053, 1083, 1086, 1089, 1098, 1111, 1129, 1156, 1184], "thu": [40, 169, 285, 656, 840, 954, 1184], "altern": [40, 285, 716, 1165, 1184], "a2": [40, 79, 81, 285], "occur": [40, 84, 85, 285, 451, 452, 511, 538, 720, 742, 743, 749, 751, 781, 794, 831, 1002, 1003, 1047, 1062, 1184], "equival": [40, 103, 105, 106, 107, 109, 118, 123, 124, 132, 181, 195, 210, 285, 292, 296, 398, 399, 413, 416, 418, 442, 490, 510, 512, 522, 523, 526, 532, 589, 623, 633, 640, 720, 758, 831, 991, 1117, 1144, 1146, 1147, 1184], "top_row": [40, 285], "top_col": [40, 285], "base": [40, 46, 165, 172, 181, 182, 184, 185, 222, 285, 349, 357, 397, 400, 401, 402, 486, 487, 535, 546, 596, 720, 747, 754, 758, 759, 761, 762, 786, 831, 834, 894, 902, 947, 949, 950, 951, 965, 1037, 1038, 1060, 1124, 1175, 1184, 1192], "scroll": [40, 285], "region": [40, 130, 285], "initit": [40, 285], "5th": [40, 285], "properti": [40, 152, 160, 166, 174, 188, 227, 231, 259, 285, 744, 748, 787, 806, 831, 834, 1192], "readthedoc": [40, 285], "io": [40, 130, 285, 745, 790, 831], "html": [40, 41, 42, 104, 116, 152, 161, 285], "definit": [40, 142, 285, 440, 720, 992, 1184], "take": [40, 119, 125, 144, 150, 175, 181, 184, 207, 213, 214, 240, 246, 285, 374, 572, 628, 664, 665, 670, 672, 681, 720, 758, 761, 777, 800, 831, 923, 1157, 1175, 1184], "care": [40, 285, 299, 495, 561, 720, 1087, 1184], "rel": [40, 117, 118, 129, 130, 137, 138, 139, 140, 285, 374, 400, 401, 402, 551, 553, 555, 557, 720, 923, 949, 950, 951, 1184], "working_with_conditional_format": [40, 285], "similarli": [40, 106, 181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "well": [40, 114, 115, 116, 128, 214, 285, 424, 720, 969, 1184], "adjac": [40, 285], "two": [40, 68, 69, 87, 88, 105, 107, 109, 117, 175, 206, 207, 214, 249, 265, 271, 285, 293, 346, 351, 417, 483, 535, 571, 627, 648, 649, 656, 658, 697, 698, 720, 776, 777, 813, 819, 831, 890, 896, 1034, 1060, 1184], "help": [40, 137, 138, 139, 140, 285, 751, 831], "where": [40, 63, 78, 116, 117, 143, 165, 169, 181, 196, 206, 224, 237, 255, 257, 285, 310, 394, 397, 399, 523, 541, 560, 569, 572, 574, 638, 651, 656, 697, 698, 701, 709, 710, 720, 747, 758, 776, 797, 804, 805, 831, 840, 851, 943, 947, 954, 1083, 1097, 1101, 1173, 1175, 1184, 1191], "appear": [40, 106, 285, 635, 720, 1170, 1184], "working_with_sparklin": [40, 285], "inject": [40, 78, 285], "locat": [40, 169, 220, 248, 253, 285, 560, 720, 803, 831, 840, 954, 1083, 1086, 1156, 1184], "syntax": [40, 172, 202, 210, 285, 576, 583, 584, 597, 716, 754, 794, 831, 1104, 1111, 1112, 1125, 1184], "correctli": [40, 119, 285], "microsoft": [40, 285], "com": [40, 117, 285, 400, 401, 402, 583, 584, 585, 720, 949, 950, 951, 1111, 1112, 1113, 1184], "u": [40, 48, 50, 66, 133, 285, 350, 351, 358, 383, 395, 612, 614, 664, 665, 666, 667, 668, 669, 675, 834, 895, 896, 903, 932, 944, 1140, 1142], "offic": [40, 285], "f5ed2452": [40, 285], "2337": [40, 285], "4f71": [40, 285], "bed3": [40, 285], "c8ae6d2b276": [40, 285], "instanti": [40, 116, 228, 260, 285, 788, 807, 831], "basic": [40, 285, 1192], "random": [40, 41, 135, 142, 144, 146, 186, 226, 285, 419, 470, 538, 559, 565, 637, 720, 732, 963, 1021, 1062, 1082, 1093, 1172, 1184], "dtm": [40, 285, 351, 834, 896], "500": [40, 196, 255, 285, 751, 804, 831, 911, 913, 921, 1072, 1073, 1075, 1184], "val": [40, 221, 285, 327, 495, 531, 631, 710, 720, 785, 831, 868], "10_000": [40, 285], "20_000": [40, 285], "30_000": [40, 285], "increas": [40, 78, 114, 126, 285, 342, 720, 886, 1184], "b4": [40, 285], "light": [40, 285], "twice": [40, 119, 285], "titl": [40, 63, 285], "explicit": [40, 116, 128, 142, 255, 285, 695, 804, 831], "integr": [40, 285, 1192], "multi_fram": [40, 285], "wb": [40, 285], "coordin": [40, 285], "advanc": [40, 119, 214, 285, 483, 1034, 1192], "min_color": [40, 285], "76933c": [40, 285], "mid_color": [40, 285], "c4d79b": [40, 285], "max_color": [40, 285], "ebf1d": [40, 285], "data_bar_2010": [40, 285], "bar_color": [40, 285], "9bbb59": [40, 285], "bar_negative_color_sam": [40, 285], "bar_negative_border_color_sam": [40, 285], "white": [40, 285], "w": [40, 65, 66, 181, 184, 225, 285, 578, 583, 585, 642, 644, 758, 761, 831, 834, 1106, 1111, 1113, 1136], "get_worksheet_by_nam": [40, 285], "fmt_titl": [40, 285], "add_format": [40, 285], "4f6228": [40, 285], "font_siz": [40, 285], "12": [40, 78, 110, 143, 144, 155, 181, 199, 222, 233, 256, 285, 294, 331, 332, 340, 349, 351, 355, 359, 367, 369, 370, 371, 374, 375, 376, 378, 392, 393, 394, 439, 492, 528, 533, 537, 546, 556, 563, 564, 578, 591, 599, 615, 624, 652, 660, 663, 664, 665, 666, 667, 668, 684, 707, 708, 720, 736, 756, 758, 763, 767, 770, 783, 786, 793, 794, 799, 811, 831, 834, 876, 877, 894, 896, 918, 927, 941, 1042, 1081, 1090, 1106, 1119, 1127, 1143, 1184, 1192], "ital": [40, 285], "customis": [40, 285], "trend": [40, 285], "win_loss": [40, 285], "subtl": [40, 285], "tone": [40, 285], "hidden": [40, 285], "id": [40, 86, 130, 251, 271, 285, 545, 597, 598, 635, 720, 819, 1069, 1170, 1184, 1192], "q1": [40, 285], "55": [40, 80, 285], "20": [40, 144, 169, 189, 190, 207, 213, 215, 219, 220, 285, 307, 308, 309, 345, 378, 392, 419, 423, 531, 549, 550, 552, 675, 682, 707, 720, 777, 780, 831, 834, 889, 927, 941, 1184], "35": [40, 285, 345, 720, 889, 1184], "q2": [40, 285], "30": [40, 169, 181, 189, 213, 219, 220, 242, 260, 285, 307, 308, 309, 345, 351, 359, 367, 369, 370, 376, 377, 378, 385, 392, 393, 419, 564, 682, 707, 720, 758, 780, 807, 831, 834, 889, 896, 919, 926, 927, 934, 941, 1184, 1192], "60": [40, 169, 285, 379, 391, 556, 612, 720, 924, 928, 940, 1140], "q3": [40, 285], "40": [40, 169, 213, 285, 378, 392, 419, 615, 720, 780, 831, 907, 941, 1143], "80": [40, 285], "q4": [40, 285], "75": [40, 162, 285, 296, 526, 535, 549, 550, 551, 552, 555, 556, 557, 685, 720, 888, 965, 1060, 1184, 1192], "account": [40, 110, 117, 130, 285, 374, 400, 401, 402, 720, 923, 949, 950, 951, 1184], "flavour": [40, 116, 285], "integer_dtyp": [40, 228, 285, 788, 831, 834], "0_": [40, 285], "just": [40, 128, 206, 285, 776, 831], "unifi": [40, 285, 834], "2_color_scal": [40, 285], "95b3d7": [40, 285], "ffffff": [40, 285], "standardis": [40, 285], "z": [40, 65, 86, 110, 142, 144, 167, 192, 194, 198, 206, 224, 225, 254, 285, 292, 294, 296, 327, 419, 449, 492, 495, 515, 516, 517, 518, 519, 526, 533, 541, 584, 612, 614, 624, 642, 644, 662, 687, 691, 696, 704, 720, 766, 776, 795, 831, 834, 868, 957, 1112, 1140, 1142, 1184, 1191], "score": [40, 285], "conjunct": [40, 87, 119, 125, 285], "a123": [40, 285], "b345": [40, 285], "c567": [40, 285], "d789": [40, 285], "e101": [40, 285], "45": [40, 136, 222, 285, 351, 359, 367, 378, 392, 546, 556, 578, 584, 648, 649, 682, 707, 720, 786, 831, 834, 896, 927, 941, 1106, 1112, 1192], "85": [40, 285, 1192], "font": [40, 285], "consola": [40, 285], "stdev": [40, 285], "ipccompress": [41, 42, 285], "arrow": [41, 42, 58, 103, 104, 116, 117, 120, 122, 131, 196, 224, 225, 241, 243, 285, 831, 1160, 1165, 1184], "ipc": [41, 42, 58, 120, 121, 122, 131, 134, 285, 732, 831], "feather": [41, 120, 131, 285, 732], "access": [41, 79, 80, 81, 82, 130, 133, 152, 196, 223, 224, 285, 494, 585, 720, 809, 831, 1113, 1192], "doc": [41, 42, 117, 137, 139, 161, 285], "python": [41, 42, 62, 104, 114, 115, 116, 136, 137, 139, 152, 196, 202, 224, 225, 243, 271, 285, 299, 351, 491, 493, 495, 585, 664, 665, 667, 668, 707, 708, 710, 720, 726, 819, 841, 896, 908, 909, 910, 915, 1042, 1113, 1164, 1184], "lz4": [41, 42, 45, 58, 59, 285, 831], "zstd": [41, 42, 45, 58, 59, 285, 831], "batch": [42, 112, 115, 116, 122, 132, 134, 285, 742, 771, 772, 831], "pretti": [43, 285], "row_ori": [43, 285], "iobas": [43, 44, 123, 124, 285, 508, 745, 783, 790, 811, 831], "serial": [43, 44, 285, 745, 811, 831], "orient": [43, 79, 81, 107, 109, 285, 831], "slower": [43, 107, 109, 119, 180, 183, 202, 212, 256, 271, 285, 495, 685, 720, 757, 760, 819, 831, 1042, 1184], "common": [43, 78, 84, 85, 86, 255, 285, 492, 515, 720, 726, 742, 743, 749, 751, 781, 794, 804, 831], "write_ndjson": [43, 285], "bit_set": [43, 285, 790, 831], "newlin": [44, 124, 132, 285], "delimit": [44, 57, 124, 132, 214, 244, 285, 575, 831, 1103, 1161, 1184], "parquetcompress": [45, 285], "compression_level": [45, 59, 285, 831], "statist": [45, 59, 114, 115, 126, 133, 162, 285, 401, 402, 440, 549, 550, 551, 552, 553, 554, 555, 556, 557, 569, 720, 831, 888, 950, 951, 992, 1077, 1097, 1184], "row_group_s": [45, 59, 285, 831], "use_pyarrow": [45, 114, 120, 122, 126, 285, 1164, 1165, 1184], "pyarrow_opt": [45, 118, 126, 129, 285], "parquet": [45, 59, 126, 127, 133, 285, 732, 831], "gzip": [45, 59, 285, 831], "lzo": [45, 59, 285, 831], "brotli": [45, 59, 285, 831], "choos": [45, 58, 59, 181, 214, 285, 758, 831], "good": [45, 58, 59, 196, 285, 831], "perform": [45, 58, 59, 78, 94, 104, 114, 115, 116, 120, 126, 128, 131, 132, 133, 152, 156, 180, 181, 182, 183, 184, 185, 199, 202, 217, 222, 225, 250, 271, 285, 299, 495, 527, 546, 588, 589, 612, 613, 614, 720, 737, 758, 759, 761, 762, 767, 786, 796, 801, 810, 831, 1042, 1116, 1117, 1140, 1141, 1142, 1184], "fast": [45, 58, 59, 145, 147, 285, 406, 561, 720, 831, 955, 1087, 1184, 1192], "decompress": [45, 58, 59, 285, 831], "backward": [45, 59, 171, 199, 285, 317, 371, 408, 720, 753, 767, 831, 920, 957, 1184], "guarante": [45, 59, 104, 114, 115, 252, 285, 751, 802, 831, 962, 1184], "deal": [45, 59, 196, 285, 295, 297, 377, 378, 392, 538, 612, 614, 641, 643, 666, 720, 831, 838, 839, 926, 927, 941, 1062, 1140, 1142, 1184], "older": [45, 59, 285, 831], "reader": [45, 59, 112, 114, 115, 120, 122, 126, 285, 733, 831], "higher": [45, 59, 216, 277, 285, 536, 553, 694, 720, 782, 825, 831, 1061, 1076, 1184], "mean": [45, 59, 114, 115, 120, 126, 128, 162, 171, 180, 181, 199, 214, 222, 256, 264, 285, 374, 378, 392, 405, 408, 546, 549, 550, 551, 552, 553, 555, 556, 557, 569, 583, 652, 664, 665, 667, 668, 669, 707, 708, 710, 720, 753, 757, 758, 767, 771, 772, 786, 812, 831, 888, 923, 927, 941, 953, 957, 962, 1073, 1097, 1111, 1184], "smaller": [45, 59, 167, 285, 751, 831, 948, 1184], "disk": [45, 57, 58, 59, 120, 285, 794, 831], "22": [45, 59, 136, 143, 285, 355, 375, 378, 392, 394, 395, 548, 549, 550, 552, 555, 556, 557, 612, 720, 831, 834, 927, 941, 944, 1071, 1140, 1184, 1192], "comput": [45, 59, 84, 86, 91, 167, 180, 199, 247, 252, 264, 277, 285, 291, 301, 302, 303, 304, 305, 306, 312, 313, 314, 328, 333, 334, 335, 337, 338, 339, 340, 341, 346, 397, 404, 440, 454, 461, 466, 467, 468, 471, 472, 473, 474, 479, 484, 486, 487, 488, 511, 527, 528, 534, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 566, 567, 568, 569, 573, 629, 630, 637, 642, 644, 648, 649, 650, 656, 658, 670, 697, 698, 710, 720, 742, 757, 764, 766, 767, 802, 809, 812, 825, 831, 836, 842, 843, 844, 845, 846, 847, 853, 854, 855, 871, 879, 880, 881, 882, 883, 884, 885, 890, 947, 948, 952, 992, 1005, 1012, 1017, 1018, 1019, 1022, 1023, 1024, 1025, 1030, 1035, 1037, 1038, 1039, 1047, 1056, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1094, 1095, 1096, 1097, 1100, 1158, 1159, 1166, 1172, 1184], "512": [45, 116, 285, 532, 720, 1056, 1184], "implement": [45, 104, 116, 152, 202, 271, 285, 439, 495, 514, 516, 517, 518, 519, 533, 624, 685, 720, 819, 1042, 1085, 1086, 1184], "At": [45, 285], "moment": [45, 161, 285, 440, 569, 720, 992, 1097, 1184], "write_t": [45, 285], "partition_col": [45, 117, 285], "write_to_dataset": [45, 285], "similar": [45, 148, 175, 199, 232, 285, 381, 384, 475, 527, 545, 562, 710, 720, 751, 767, 792, 831, 930, 933, 1026, 1069, 1089, 1184], "spark": [45, 285], "partit": [45, 117, 118, 126, 129, 133, 134, 197, 212, 285], "we": [45, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 133, 181, 199, 222, 256, 285, 374, 378, 392, 456, 493, 495, 546, 549, 550, 551, 552, 553, 555, 556, 557, 585, 596, 664, 665, 667, 668, 682, 707, 708, 710, 720, 745, 758, 767, 771, 772, 783, 786, 831, 841, 923, 927, 941, 965, 1007, 1042, 1113, 1124, 1184], "use_pyarrow_write_to_dataset": [45, 285], "first": [45, 78, 114, 115, 119, 123, 128, 132, 137, 138, 139, 140, 143, 153, 179, 181, 184, 187, 199, 201, 202, 209, 213, 214, 239, 244, 245, 251, 252, 256, 269, 285, 309, 311, 342, 345, 371, 374, 378, 420, 427, 428, 444, 453, 456, 459, 460, 483, 494, 504, 531, 560, 572, 583, 586, 587, 597, 598, 653, 659, 673, 677, 710, 720, 742, 758, 761, 763, 767, 770, 780, 802, 809, 817, 831, 834, 850, 886, 888, 889, 920, 923, 927, 964, 974, 975, 994, 1004, 1007, 1010, 1011, 1034, 1041, 1083, 1111, 1113, 1114, 1115, 1125, 1126, 1155, 1163, 1184, 1192], "watermark": [45, 285], "partitioned_object": [45, 285], "calendar": [47, 48, 181, 199, 222, 256, 285, 362, 374, 378, 392, 396, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 707, 708, 720, 758, 767, 786, 831, 907, 923, 927, 941, 945], "time_unit": [48, 50, 350, 351, 358, 383, 395, 614, 664, 665, 666, 667, 668, 669, 675, 834, 895, 896, 903, 932, 944, 1142], "time_zon": [48, 352, 377, 614, 664, 665, 666, 667, 668, 834, 894, 897, 902, 926, 1142], "timezon": [48, 834], "m": [48, 50, 66, 198, 285, 349, 350, 351, 357, 358, 381, 383, 384, 395, 583, 612, 613, 614, 617, 664, 665, 666, 667, 668, 669, 675, 766, 831, 834, 894, 895, 896, 902, 903, 930, 932, 933, 944, 1111, 1140, 1141, 1142, 1145], "zoneinfo": [48, 834], "run": [48, 57, 58, 59, 84, 85, 145, 147, 180, 183, 200, 202, 214, 229, 252, 261, 271, 285, 299, 342, 456, 495, 544, 545, 589, 699, 720, 742, 743, 749, 751, 757, 760, 771, 772, 776, 781, 789, 794, 802, 808, 831, 834, 886, 1007, 1042, 1068, 1069, 1117, 1184, 1191, 1192], "available_timezon": [48, 834], "check": [48, 114, 115, 128, 137, 138, 139, 140, 149, 176, 181, 182, 184, 185, 193, 195, 198, 222, 285, 318, 321, 322, 424, 429, 450, 546, 576, 581, 605, 720, 758, 759, 761, 762, 766, 771, 772, 786, 831, 858, 861, 862, 970, 972, 976, 977, 979, 986, 987, 988, 990, 991, 1001, 1084, 1104, 1109, 1133, 1184], "128": [49, 80, 1056, 1184], "bit": [49, 51, 52, 53, 54, 55, 56, 72, 73, 74, 75, 540, 576, 720, 1064, 1104, 1184], "experiment": [49, 85, 134, 228, 254, 255, 260, 285, 342, 378, 495, 549, 550, 551, 552, 553, 555, 556, 557, 720, 743, 788, 807, 831, 870, 886, 927, 965, 1060, 1184], "progress": 49, "expect": [49, 95, 97, 102, 114, 116, 128, 495, 682, 720, 769, 771, 772, 831], "32": [51, 54, 73, 80, 195, 222, 285, 512, 546, 564, 720, 786, 831, 890, 924, 1056, 1076, 1184], "sign": [53, 54, 55, 56, 374, 540, 620, 720, 834, 923, 979, 1064, 1148, 1184], "maintain_ord": [57, 58, 59, 156, 180, 183, 212, 214, 250, 252, 256, 265, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 293, 316, 417, 485, 495, 627, 634, 657, 720, 737, 743, 749, 751, 757, 760, 781, 794, 796, 801, 802, 813, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 831, 857, 1036, 1169, 1184], "type_coercion": [57, 58, 59, 84, 85, 742, 743, 749, 751, 781, 794, 831], "predicate_pushdown": [57, 58, 59, 84, 85, 742, 743, 749, 751, 771, 772, 781, 794, 831], "projection_pushdown": [57, 58, 59, 84, 85, 742, 743, 749, 751, 771, 772, 781, 794, 831], "simplify_express": [57, 58, 59, 84, 85, 742, 743, 749, 751, 781, 794, 831], "slice_pushdown": [57, 58, 59, 84, 85, 742, 743, 749, 751, 771, 772, 781, 794, 831], "no_optim": [57, 58, 59, 84, 85, 742, 743, 751, 771, 772, 781, 831], "evalu": [57, 58, 59, 170, 172, 199, 285, 296, 310, 342, 422, 445, 446, 483, 494, 526, 641, 643, 647, 651, 664, 665, 667, 668, 670, 679, 680, 693, 696, 702, 707, 708, 710, 711, 720, 742, 754, 764, 766, 767, 831, 851, 886, 996, 997, 1175, 1184], "queri": [57, 58, 59, 63, 65, 84, 85, 116, 117, 120, 128, 131, 132, 133, 169, 200, 213, 285, 493, 494, 495, 587, 720, 742, 743, 749, 751, 763, 770, 781, 794, 810, 814, 819, 831, 840, 954, 1042, 1115, 1184, 1191], "ram": [57, 58, 59, 831], "maintain": [57, 58, 59, 156, 250, 285, 316, 485, 560, 634, 720, 737, 796, 801, 831, 857, 1036, 1083, 1169, 1184], "slightli": [57, 58, 59, 119, 831], "faster": [57, 58, 59, 116, 169, 246, 254, 285, 299, 495, 635, 720, 831, 840, 841, 954, 1042, 1184], "coercion": [57, 58, 59, 84, 85, 541, 720, 742, 743, 749, 751, 781, 794, 831], "optim": [57, 58, 59, 84, 85, 126, 128, 131, 132, 133, 196, 200, 213, 217, 224, 252, 285, 742, 743, 749, 751, 771, 772, 781, 794, 802, 810, 819, 831, 871, 1184], "predic": [57, 58, 59, 84, 85, 128, 131, 132, 133, 134, 172, 195, 223, 285, 409, 639, 673, 720, 742, 743, 749, 751, 754, 771, 772, 781, 784, 794, 810, 831, 958, 1085, 1086, 1184], "pushdown": [57, 58, 59, 84, 85, 742, 743, 749, 751, 771, 772, 781, 784, 794, 810, 831, 1085, 1086, 1184], "project": [57, 58, 59, 84, 85, 128, 130, 131, 132, 133, 299, 571, 572, 720, 742, 743, 749, 751, 771, 772, 781, 784, 790, 794, 831], "slice": [57, 58, 59, 79, 84, 85, 167, 187, 197, 239, 285, 460, 480, 495, 503, 505, 547, 549, 550, 551, 552, 553, 555, 556, 557, 720, 742, 743, 749, 751, 771, 772, 781, 794, 831, 948, 964, 1011, 1031, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1155, 1184], "off": [57, 58, 59, 84, 85, 114, 115, 128, 742, 743, 749, 751, 771, 772, 781, 831], "certain": [57, 58, 59, 85, 93, 118, 129, 190, 256, 285, 608, 609, 742, 743, 781, 831, 1184], "lf": [57, 58, 59, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 763, 764, 765, 766, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 809, 810, 831, 1191, 1192], "scan_csv": [57, 58, 59, 114, 115, 831], "my_larger_than_ram_fil": [57, 58, 59, 831], "data_pagesize_limit": [59, 831], "reduc": [59, 114, 115, 126, 128, 131, 132, 133, 272, 273, 275, 278, 564, 673, 720, 820, 821, 823, 826, 831, 1044, 1059, 1091, 1154, 1184], "pressur": [59, 114, 115, 126, 128, 132, 133, 564, 720, 831, 1091, 1184], "improv": [59, 120, 131, 831], "speed": [59, 299, 495, 720, 831, 1192], "page": [59, 120, 126, 131, 133, 285, 720, 732, 831, 1184], "integer_list": 60, "float_list": 60, "wrap": [62, 110, 424, 720], "arbitrari": [62, 144, 834], "eager": [63, 64, 65, 66, 67, 68, 181, 214, 254, 285, 350, 352, 355, 358, 363, 370, 371, 374, 375, 377, 378, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 549, 550, 552, 555, 556, 557, 647, 651, 664, 665, 667, 668, 675, 679, 680, 693, 696, 702, 707, 708, 711, 719, 720, 758, 772, 831, 894, 895, 897, 900, 902, 903, 904, 910, 911, 913, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 1191], "against": [63, 116, 456, 831, 1007, 1191, 1192], "eagerli": [63, 483], "unset": [63, 143, 377, 483, 926], "init": [63, 150], "eager_execut": [63, 1191], "itself": [63, 142, 495, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 697, 698, 720, 769, 831, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1184, 1191], "impact": [63, 181, 184, 285, 758, 761, 831, 1191], "declar": [63, 103, 105, 106, 107, 109, 116, 123, 124, 132, 285, 831], "godfath": 63, "1972": 63, "6_000_000": 63, "134_821_952": 63, "dark": 63, "knight": 63, "2008": 63, "185_000_000": 63, "533_316_061": 63, "schindler": 63, "1993": 63, "22_000_000": 63, "96_067_179": 63, "pulp": 63, "fiction": 63, "1994": 63, "8_000_000": 63, "107_930_000": 63, "shawshank": 63, "redempt": 63, "25_000_000": 63, "28_341_469": 63, "release_year": 63, "budget": 63, "gross": 63, "imdb_scor": 63, "ctx": [63, 64, 65, 66, 67, 68], "film": 63, "1990": 63, "BY": [63, 65], "desc": [63, 65], "AS": [63, 700, 1191], "decad": 63, "total_gross": 63, "n_film": 63, "2000": [63, 361, 363, 370, 371, 374, 379, 834, 906, 919, 920, 923, 928], "533316061": 63, "232338648": 63, "1970": [63, 134], "134821952": 63, "register_glob": [64, 66, 68, 1191], "register_mani": [64, 65, 68], "unregist": [64, 65, 66, 1191], "frame_data": [64, 67], "execut": [64, 65, 67, 69, 86, 116, 200, 285, 324, 456, 637, 720, 738, 771, 772, 781, 831, 1007, 1172, 1184, 1191], "collect": [64, 65, 68, 81, 84, 85, 128, 129, 130, 134, 144, 146, 163, 165, 200, 214, 241, 252, 253, 285, 324, 403, 429, 495, 654, 671, 675, 702, 720, 735, 737, 739, 743, 745, 746, 747, 750, 751, 752, 753, 754, 755, 757, 758, 763, 765, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 788, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 809, 810, 812, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 834, 977, 1184, 1191, 1192], "global": [65, 69, 87, 88, 135, 144, 149, 246, 285, 494, 720, 867, 869, 1191], "scope": [65, 68, 150, 731, 834, 1191], "map": [65, 66, 105, 106, 114, 115, 116, 117, 120, 121, 126, 127, 128, 131, 157, 166, 174, 196, 202, 218, 223, 224, 225, 242, 285, 294, 378, 392, 492, 493, 494, 495, 514, 527, 545, 637, 684, 720, 739, 748, 784, 831, 834, 888, 927, 941, 1041, 1042, 1069, 1172, 1184, 1191], "recent": [65, 137, 138, 139, 140, 528, 720, 1056, 1184, 1191], "df1": [65, 67, 68, 78, 86, 137, 138, 169, 176, 207, 247, 258, 285, 777, 831], "df2": [65, 67, 68, 78, 86, 137, 138, 169, 176, 247, 258, 285], "join": [65, 69, 78, 84, 85, 86, 88, 199, 255, 285, 423, 527, 720, 742, 743, 749, 751, 767, 781, 794, 804, 809, 831], "named_fram": [66, 1191], "lf1": [66, 68], "o": [66, 120, 131, 323, 342, 582, 632, 720, 863, 886, 1110, 1135, 1168, 1184], "lf2": [66, 68, 831], "p": [66, 80, 213, 285, 531, 702, 720, 780, 831], "q": [66, 225, 285, 702], "r": [66, 114, 115, 128, 531, 578, 582, 583, 584, 585, 597, 720, 834, 1106, 1110, 1111, 1112, 1113, 1125], "lf3": [66, 831], "lf4": [66, 831], "either": [66, 144, 195, 199, 200, 204, 212, 222, 223, 238, 246, 285, 535, 546, 612, 641, 650, 702, 720, 767, 769, 786, 831, 834, 1060, 1140, 1184, 1192], "tbl1": [66, 68], "tbl2": [66, 68], "tbl3": 66, "tbl4": 66, "statement": [67, 710], "hello_world": 67, "baz": [67, 190, 191, 214, 253, 285, 585, 602, 604, 716, 765, 803, 831, 834, 1113, 1132], "hello_data": 67, "foo_bar": [67, 499, 502, 602, 682], "registr": [68, 732], "lifetim": [68, 150, 731], "context": [68, 69, 87, 88, 148, 210, 267, 285, 293, 299, 324, 336, 409, 443, 456, 464, 493, 495, 503, 571, 572, 637, 645, 657, 672, 675, 681, 685, 696, 699, 719, 720, 731, 732, 809, 815, 831, 993, 1007, 1015, 1172, 1184, 1191], "manag": [68, 69, 87, 88, 731, 732, 1191], "often": [68, 150, 181, 182, 184, 185, 222, 285, 451, 452, 541, 546, 720, 758, 759, 761, 762, 786, 831, 1002, 1003], "want": [68, 85, 106, 169, 202, 210, 285, 409, 493, 494, 495, 545, 549, 550, 551, 552, 553, 555, 556, 557, 588, 659, 664, 673, 693, 696, 711, 720, 743, 763, 770, 831, 834, 840, 954, 1042, 1069, 1116, 1165, 1184], "df0": [68, 207, 285, 777, 831], "exit": [68, 69, 87, 150, 1191], "construct": [68, 69, 87, 88, 103, 105, 106, 107, 108, 109, 116, 285, 415, 494, 693, 696, 711, 716, 720, 745, 756, 783, 831, 867, 1184], "persist": 68, "through": [68, 104, 116, 716, 834, 1184], "tbl0": 68, "remain": [68, 114, 115, 128, 165, 167, 172, 285, 347, 348, 409, 455, 603, 604, 720, 747, 754, 771, 772, 831, 891, 892, 948, 958, 1006, 1131, 1132, 1184], "text": [68, 116, 588, 589, 597, 598, 700, 1116, 1117, 1192], "misc": 68, "testing1234": 68, "test1": 68, "test2": 68, "test3": 68, "disabl": [69, 87, 88, 196, 285, 742, 831], "cach": [69, 84, 85, 87, 88, 120, 128, 131, 133, 137, 138, 139, 140, 149, 494, 549, 550, 551, 552, 553, 555, 556, 557, 612, 613, 614, 617, 720, 731, 742, 743, 749, 751, 781, 794, 831, 867, 1140, 1141, 1142, 1145], "under": [69, 79, 80, 81, 82, 87, 88, 712, 713, 715, 716, 721, 722, 725, 727, 728, 729, 1176, 1178, 1180, 1185, 1188, 1189, 1190], "physic": [69, 88, 114, 115, 199, 285, 327, 631, 720, 738, 766, 767, 831, 868, 869, 1167, 1184], "equal": [69, 88, 114, 115, 116, 128, 137, 138, 139, 140, 156, 176, 181, 184, 199, 207, 250, 285, 324, 343, 398, 399, 416, 442, 483, 523, 535, 541, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 594, 595, 620, 697, 698, 716, 720, 737, 758, 761, 767, 777, 796, 801, 831, 887, 1034, 1060, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1084, 1122, 1123, 1148, 1184, 1192], "concaten": [69, 86, 87, 88, 175, 213, 285, 531, 654, 655, 720, 780, 831, 873, 1048, 1184], "introduc": [69, 88, 612, 613, 614, 1140, 1141, 1142], "overhead": [69, 88, 128, 131, 132, 133], "amount": [69, 88, 299, 495, 669, 720], "depend": [69, 83, 88, 116, 136, 447, 448, 495, 503, 535, 538, 669, 672, 675, 681, 720, 998, 999, 1060, 1062, 1184, 1192], "categori": [69, 88, 244, 285, 326, 327, 343, 535, 720, 866, 868, 887, 965, 1060, 1184], "nest": [69, 110, 126, 133, 167, 285, 732, 948, 1184, 1191, 1192], "clear": [69, 87, 159, 285, 741, 831, 878, 1184], "outermost": 69, "s1": [69, 87, 88, 139, 140, 175, 285, 991, 1034, 1166, 1175, 1184], "color": [69, 87, 88, 271, 318, 320, 321, 322, 637, 720, 819, 1172, 1184], "red": [69, 87, 88, 271, 637, 720, 819, 1172, 1184], "green": [69, 87, 88, 271, 637, 720, 819, 1172, 1184], "blue": [69, 87, 88, 318, 320, 321, 322, 637, 720, 1172, 1184], "concat": [69, 87, 88, 115, 873, 1048, 1184], "cat": [69, 87, 88, 245, 285, 343, 535, 576, 578, 616, 619, 631, 655, 715, 720, 834, 887, 965, 1060, 1104, 1106, 1144, 1147, 1180, 1184], "decor": [69, 79, 80, 81, 82, 144, 146, 202, 285, 495, 720, 731, 732, 1042, 1184], "dure": [69, 114, 115, 128, 150, 169, 285, 840, 954, 1184], "afterward": [69, 710], "construct_categor": 69, "composit": [70, 143, 1192], "schemadict": [70, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 125, 128, 227, 285, 702, 771, 772, 787, 814, 819, 831], "struct_seri": [70, 819], "dai": [71, 181, 184, 197, 199, 222, 256, 285, 370, 371, 374, 375, 378, 385, 392, 394, 546, 549, 550, 551, 552, 553, 555, 556, 557, 663, 664, 665, 666, 667, 668, 669, 707, 708, 720, 758, 761, 767, 786, 831, 834, 919, 920, 923, 924, 927, 934, 941, 943], "static": [76, 814, 819], "utf": 77, "frametyp": [78, 1191], "joinstrategi": [78, 198, 285, 766, 831], "outer": [78, 86, 198, 255, 285, 766, 804, 831], "descend": [78, 156, 230, 236, 250, 285, 309, 477, 538, 561, 571, 572, 637, 650, 720, 737, 791, 796, 801, 831, 850, 987, 1028, 1062, 1087, 1099, 1172, 1184], "fill": [78, 86, 158, 170, 171, 232, 233, 254, 285, 317, 338, 341, 407, 408, 414, 423, 549, 550, 552, 556, 562, 563, 591, 599, 674, 693, 696, 711, 720, 752, 753, 792, 793, 809, 831, 956, 957, 968, 1053, 1072, 1073, 1075, 1078, 1079, 1080, 1089, 1090, 1119, 1127, 1184], "sort": [78, 79, 137, 138, 143, 156, 181, 182, 184, 185, 199, 207, 213, 214, 222, 230, 250, 256, 269, 279, 285, 309, 327, 409, 495, 527, 546, 550, 551, 552, 553, 555, 557, 561, 572, 637, 639, 650, 685, 720, 737, 749, 758, 759, 761, 762, 767, 777, 780, 781, 786, 791, 794, 801, 817, 827, 831, 834, 850, 868, 987, 1087, 1169, 1172, 1184, 1192], "origin": [78, 114, 115, 128, 165, 172, 252, 285, 347, 348, 377, 378, 392, 409, 439, 455, 494, 514, 527, 540, 541, 542, 577, 578, 583, 587, 648, 649, 720, 747, 754, 802, 831, 887, 891, 892, 926, 927, 941, 958, 1006, 1041, 1060, 1066, 1105, 1106, 1111, 1115, 1184], "In": [78, 85, 116, 118, 129, 130, 133, 144, 146, 150, 167, 169, 181, 182, 184, 185, 202, 210, 222, 246, 285, 495, 546, 664, 720, 743, 758, 759, 761, 762, 786, 831, 840, 948, 954, 1063, 1184], "duplic": [78, 92, 192, 198, 199, 252, 255, 285, 294, 425, 439, 514, 535, 720, 766, 767, 802, 804, 831, 971, 1060, 1184], "suitabl": [78, 86, 116, 142, 202, 285, 495, 560, 720, 1042, 1083, 1184, 1192], "get": [78, 85, 111, 121, 127, 134, 148, 156, 160, 166, 174, 177, 178, 181, 182, 184, 185, 187, 188, 192, 194, 195, 201, 209, 214, 222, 223, 227, 231, 235, 239, 250, 259, 269, 279, 285, 293, 307, 308, 309, 311, 316, 326, 337, 338, 339, 340, 341, 358, 410, 420, 438, 441, 444, 458, 463, 485, 496, 497, 498, 503, 505, 509, 520, 521, 529, 530, 536, 544, 546, 570, 574, 625, 626, 627, 634, 638, 672, 677, 681, 685, 686, 687, 688, 689, 690, 691, 701, 705, 709, 720, 737, 743, 744, 748, 755, 758, 759, 761, 762, 763, 768, 770, 786, 787, 795, 799, 801, 806, 817, 827, 831, 848, 849, 850, 851, 852, 857, 866, 873, 882, 883, 884, 885, 903, 961, 964, 969, 971, 989, 994, 1009, 1014, 1036, 1043, 1045, 1046, 1048, 1051, 1052, 1057, 1058, 1061, 1068, 1098, 1101, 1155, 1160, 1161, 1169, 1173, 1174, 1184], "speedup": [78, 196, 202, 285, 495, 720, 1042, 1184], "receiv": [78, 116, 128, 202, 213, 271, 285, 495, 531, 720, 780, 831, 1192], "now": [78, 222, 285, 324, 392, 720, 786, 831, 927, 941, 1142], "One": [78, 162, 210, 214, 285, 296, 526, 700, 720, 834, 888, 1184], "whose": [78, 199, 214, 285, 403, 671, 720, 767, 831, 834], "uniqu": [78, 141, 142, 143, 146, 154, 155, 194, 198, 210, 214, 225, 276, 285, 300, 311, 343, 438, 513, 535, 612, 613, 614, 617, 635, 637, 646, 692, 720, 735, 736, 766, 824, 831, 852, 887, 888, 989, 1049, 1060, 1140, 1141, 1142, 1145, 1170, 1172, 1184], "post": 78, "constrain": [78, 165, 285, 747, 831], "newli": 78, "boolean": [78, 156, 172, 175, 200, 236, 250, 285, 295, 296, 297, 318, 321, 322, 361, 409, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 445, 446, 450, 524, 526, 529, 530, 572, 586, 639, 640, 650, 651, 702, 710, 720, 737, 741, 754, 769, 796, 801, 831, 834, 838, 839, 851, 858, 860, 906, 958, 969, 970, 971, 973, 974, 975, 977, 978, 980, 981, 982, 983, 984, 985, 989, 996, 997, 1001, 1054, 1057, 1058, 1085, 1104, 1165, 1175, 1184], "know": [78, 116, 214, 285, 483, 1165, 1174, 1184], "2022": [78, 157, 162, 179, 285, 351, 359, 367, 378, 392, 612, 664, 665, 667, 669, 675, 739, 831, 834, 896, 907, 927, 941, 1140], "df3": [78, 285], "set_tbl_format": 78, "09": [78, 136, 144, 222, 285, 351, 370, 371, 546, 615, 664, 708, 720, 786, 831, 834, 1143], "02": [78, 157, 179, 181, 222, 256, 285, 350, 351, 358, 370, 371, 374, 377, 383, 386, 389, 391, 395, 546, 549, 550, 552, 555, 556, 557, 558, 612, 613, 614, 617, 664, 665, 667, 669, 720, 739, 758, 786, 831, 834, 895, 896, 898, 899, 903, 904, 910, 911, 916, 919, 920, 921, 926, 927, 931, 932, 935, 938, 940, 941, 1034, 1140, 1141, 1142, 1145], "03": [78, 110, 157, 181, 222, 256, 285, 350, 351, 352, 358, 370, 371, 374, 377, 378, 379, 381, 383, 384, 385, 386, 389, 391, 392, 395, 546, 549, 550, 552, 555, 556, 557, 613, 617, 664, 665, 667, 669, 720, 739, 758, 786, 831, 895, 896, 897, 903, 904, 910, 911, 919, 920, 921, 926, 927, 930, 932, 933, 934, 935, 938, 940, 1141, 1145], "af1": 78, "af2": 78, "af3": 78, "keep": [78, 114, 115, 128, 252, 255, 256, 285, 439, 494, 507, 515, 653, 720, 802, 804, 831, 1041, 1184], "easili": [78, 116, 228, 260, 264, 285, 702, 788, 807, 812, 831], "dot": [78, 720, 794, 831, 1184], "product": [78, 161, 285, 340, 346, 720, 751, 831, 884, 890, 1184], "fill_nul": [78, 170, 285, 720, 752, 809, 831, 1184], "sum_horizont": [78, 703], "167": 78, "47": 78, "callabl": [79, 80, 81, 82, 128, 153, 175, 202, 213, 266, 271, 285, 299, 483, 491, 492, 493, 495, 515, 531, 547, 548, 645, 659, 660, 673, 683, 684, 685, 695, 720, 771, 772, 780, 814, 819, 831, 841, 1034, 1042, 1070, 1071, 1184], "by_first_letter_of_column_nam": 79, "f": [79, 115, 162, 179, 197, 241, 251, 254, 285, 292, 483, 564, 582, 612, 614, 645, 654, 683, 720, 1034, 1110, 1140, 1142], "fromkei": [79, 81], "by_first_letter_of_column_valu": 79, "starts_with": [79, 318, 321, 576, 581, 834, 1109], "to_seri": [79, 177, 285, 612, 651, 696, 1140], "xy": [79, 81], "yz": [79, 81], "b1": [79, 81], "b2": [79, 81], "pow_n": 80, "powersofn": 80, "next": [80, 181, 199, 222, 256, 285, 317, 374, 378, 392, 538, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941, 1062, 1184], "ceil": [80, 720, 1184], "previou": [80, 150, 516, 517, 528, 533, 622, 624, 720, 840, 1056, 1184], "floor": [80, 720, 1184], "nearest": [80, 199, 216, 277, 285, 329, 412, 423, 536, 553, 694, 720, 767, 782, 825, 831, 872, 960, 968, 1061, 1076, 1184], "24": [80, 136, 167, 181, 199, 202, 222, 256, 285, 340, 342, 355, 374, 375, 378, 386, 392, 394, 512, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 707, 708, 720, 758, 767, 786, 831, 886, 923, 927, 935, 941, 991, 1184], "001": [80, 363, 387, 388, 390, 620, 669, 936, 937, 939, 1148], "next_pow2": 80, "prev_pow2": 80, "nearest_pow2": 80, "split_by_column_dtyp": 81, "collect_al": [81, 85, 742, 743, 831], "31": [82, 144, 351, 355, 359, 367, 370, 374, 385, 612, 663, 666, 675, 682, 834, 894, 896, 900, 919, 934, 1140, 1192], "42": [82, 186, 207, 222, 285, 546, 720, 777, 786, 831, 963, 1184], "961": 82, "1764": 82, "4160": 82, "build": [83, 104, 834, 1192], "wa": [83, 137], "compil": [83, 447, 448, 998, 999], "gate": 83, "info": [83, 118, 129, 130, 136], "otherwis": [83, 116, 119, 143, 148, 202, 207, 225, 228, 271, 285, 319, 330, 343, 400, 401, 402, 483, 495, 503, 531, 535, 540, 550, 551, 552, 553, 555, 557, 576, 579, 641, 685, 710, 720, 777, 788, 819, 831, 859, 875, 887, 949, 950, 951, 1034, 1042, 1060, 1064, 1085, 1086, 1104, 1107, 1184], "host": [83, 114, 120, 122, 126, 131], "git": 83, "lazy_fram": [84, 85], "comm_subplan_elim": [84, 85, 742, 743, 749, 751, 781, 794, 831], "comm_subexpr_elim": [84, 85, 324, 720, 742, 743, 749, 751, 781, 794, 831], "graph": [84, 200, 285, 742, 764, 809, 831], "parallel": [84, 86, 112, 117, 126, 133, 181, 184, 199, 200, 213, 229, 261, 285, 342, 456, 637, 710, 720, 732, 758, 761, 766, 767, 789, 808, 819, 831, 886, 1007, 1172, 1184], "threadpool": [84, 148], "Will": [84, 85, 742, 743, 749, 751, 781, 794, 831, 1184], "try": [84, 85, 98, 100, 114, 115, 120, 126, 128, 131, 133, 742, 743, 749, 751, 781, 794, 831], "branch": [84, 85, 742, 743, 749, 751, 781, 794, 831], "subplan": [84, 85, 742, 743, 749, 751, 781, 794, 831], "union": [84, 85, 86, 474, 742, 743, 749, 751, 781, 794, 831, 834, 1025], "subexpress": [84, 85, 742, 743, 749, 751, 781, 794, 831], "reus": [84, 85, 742, 743, 749, 751, 781, 794, 831], "part": [84, 85, 103, 119, 144, 584, 603, 604, 743, 749, 751, 781, 794, 809, 831, 1112, 1131, 1132], "fashion": [84, 85, 198, 285, 743, 749, 751, 781, 794, 831], "alpha": [84, 85, 299, 400, 401, 402, 720, 742, 743, 749, 751, 781, 794, 831, 949, 950, 951, 1184], "gevent": [85, 136, 743, 831], "_geventdataframeresult": [85, 743, 831], "await": [85, 743, 831], "asynchron": [85, 743, 831], "them": [85, 103, 105, 106, 107, 109, 123, 124, 125, 128, 132, 133, 168, 169, 181, 199, 207, 222, 256, 285, 424, 462, 520, 521, 527, 546, 654, 664, 665, 667, 668, 707, 708, 720, 743, 750, 758, 767, 777, 786, 831, 834, 840, 954, 1013, 1051, 1052, 1184], "schedul": [85, 743, 831], "insid": [85, 743, 831], "almost": [85, 202, 271, 285, 612, 613, 614, 743, 831, 1042, 1140, 1141, 1142, 1184], "instantli": [85, 743, 831], "asyncio": [85, 743, 831], "releas": [85, 299, 495, 720, 743, 831, 1192], "greenlet": [85, 743, 831], "task": [85, 743, 831], "wrapper": [85, 743, 831], "event": [85, 743, 831], "asyncresult": [85, 743, 831], "timeout": [85, 743, 831], "break": [85, 134, 254, 255, 285, 299, 342, 343, 378, 549, 550, 551, 552, 553, 555, 556, 557, 720, 743, 831, 870, 886, 887, 927, 965, 1060, 1184], "collect_async": [85, 831], "set_except": [85, 743, 831], "futur": [85, 152, 664, 743, 831], "rerais": [85, 743, 831], "iter": [86, 103, 116, 145, 147, 156, 172, 180, 181, 182, 183, 184, 185, 196, 197, 222, 223, 224, 225, 228, 229, 230, 236, 250, 251, 260, 261, 263, 264, 285, 342, 527, 572, 642, 644, 650, 653, 654, 655, 662, 687, 691, 699, 702, 704, 716, 720, 737, 754, 757, 758, 759, 760, 761, 762, 786, 788, 789, 791, 796, 801, 807, 808, 812, 831, 886, 1184, 1192], "polarstyp": 86, "concatmethod": 86, "vertic": [86, 169, 254, 258, 285, 575, 1103], "rechunk": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 169, 285, 720, 840, 873, 954, 1048, 1184], "combin": [86, 98, 100, 172, 181, 186, 199, 222, 256, 285, 296, 310, 392, 526, 546, 592, 600, 606, 607, 608, 609, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 794, 831, 927, 941, 1120, 1128, 1134, 1135, 1136, 1137], "vertical_relax": 86, "diagon": [86, 251, 285], "diagonal_relax": 86, "vstack": [86, 169, 285], "addition": [86, 223, 285], "coerc": [86, 541, 720], "supertyp": [86, 171, 285, 298, 720, 753, 831], "mismatch": [86, 98, 124, 137, 139], "find": [86, 173, 285, 560, 720, 1083, 1184], "miss": [86, 114, 115, 128, 170, 285, 317, 400, 401, 402, 414, 433, 435, 720, 752, 831, 949, 950, 951, 1174, 1184], "stack": [86, 189, 258, 285], "don": [86, 181, 202, 252, 254, 285, 299, 342, 456, 495, 527, 720, 758, 802, 831, 834, 886, 1007, 1042, 1084, 1174, 1184], "auto": [86, 103, 105, 106, 107, 109, 123, 124, 126, 132, 133, 251, 285, 392, 831, 927, 941, 1192], "logic": [86, 137, 138, 139, 140, 202, 271, 285, 295, 297, 495, 631, 641, 643, 685, 720, 745, 756, 766, 783, 790, 811, 819, 831, 838, 839, 1042, 1167, 1184], "align_fram": 86, "pattern": [86, 114, 115, 128, 131, 132, 133, 196, 285, 501, 576, 577, 578, 583, 584, 585, 597, 598, 819, 834, 1085, 1086, 1104, 1105, 1106, 1111, 1112, 1113, 1125, 1126, 1184], "collis": 86, "need": [86, 110, 114, 115, 117, 181, 182, 184, 185, 222, 225, 234, 246, 285, 483, 494, 546, 564, 615, 669, 693, 696, 711, 720, 758, 759, 761, 762, 786, 831, 1091, 1143, 1184, 1192], "sure": [86, 103, 108, 114, 115, 120, 122, 126, 181, 182, 184, 185, 217, 222, 285, 546, 720, 758, 759, 761, 762, 786, 831], "contigu": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 217, 285], "relev": 86, "df_h1": 86, "l1": 86, "l2": 86, "df_h2": 86, "r1": 86, "r2": 86, "r3": 86, "df_d1": 86, "df_d2": 86, "df_a1": 86, "df_a2": 86, "df_a3": 86, "enable_string_cach": 87, "stringcach": [87, 88, 198, 285, 732, 867, 869], "reliabl": [87, 88], "wai": [87, 88, 103, 105, 106, 107, 109, 123, 124, 132, 180, 197, 213, 236, 264, 285, 527, 531, 572, 583, 716, 720, 757, 780, 796, 812, 819, 831, 1111], "until": [87, 200, 285, 594, 595, 620, 1122, 1123, 1148], "deprec": [88, 89, 153, 155, 181, 182, 183, 184, 185, 233, 266, 285, 299, 324, 331, 332, 356, 360, 364, 366, 368, 373, 377, 380, 392, 427, 431, 434, 439, 451, 454, 461, 465, 479, 484, 491, 492, 533, 547, 563, 577, 590, 591, 592, 593, 599, 600, 606, 612, 614, 624, 645, 652, 664, 666, 683, 696, 707, 720, 736, 756, 758, 759, 760, 761, 762, 771, 783, 793, 811, 814, 831, 840, 841, 876, 877, 887, 901, 905, 912, 914, 917, 922, 926, 927, 929, 941, 974, 980, 1002, 1005, 1012, 1016, 1030, 1035, 1060, 1070, 1090, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1140, 1142, 1184], "sinc": [88, 118, 129, 153, 155, 156, 181, 182, 183, 184, 185, 233, 250, 266, 285, 299, 324, 331, 332, 356, 358, 360, 364, 366, 368, 373, 377, 380, 392, 427, 431, 434, 439, 451, 454, 461, 465, 479, 484, 491, 492, 533, 547, 563, 577, 590, 591, 592, 593, 599, 600, 606, 612, 614, 624, 645, 652, 664, 666, 675, 683, 696, 707, 720, 736, 737, 756, 758, 759, 760, 761, 762, 771, 783, 793, 796, 801, 811, 814, 831, 840, 841, 876, 877, 887, 901, 903, 905, 912, 914, 917, 922, 926, 927, 929, 941, 974, 980, 1002, 1005, 1012, 1016, 1030, 1035, 1060, 1070, 1090, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1140, 1142, 1184], "19": [88, 119, 136, 153, 181, 182, 183, 184, 185, 199, 222, 233, 266, 285, 299, 331, 332, 356, 360, 364, 366, 368, 373, 377, 378, 380, 392, 427, 431, 434, 439, 451, 465, 491, 492, 533, 546, 547, 550, 552, 563, 577, 590, 591, 592, 593, 599, 600, 606, 612, 614, 615, 624, 645, 664, 666, 683, 720, 758, 759, 760, 761, 762, 767, 771, 786, 793, 814, 831, 841, 876, 877, 887, 901, 905, 912, 914, 917, 922, 926, 927, 929, 941, 974, 980, 1002, 1016, 1060, 1070, 1090, 1105, 1118, 1119, 1120, 1121, 1127, 1128, 1134, 1140, 1142, 1143, 1184], "longer": [88, 114, 128], "accept": [88, 113, 114, 115, 118, 120, 122, 126, 156, 180, 183, 228, 229, 232, 236, 250, 260, 261, 264, 285, 292, 330, 403, 424, 494, 527, 572, 640, 642, 644, 650, 653, 654, 655, 662, 671, 687, 691, 699, 702, 704, 710, 720, 737, 757, 760, 788, 789, 792, 796, 801, 807, 808, 812, 831, 875, 969, 1089, 1184], "disable_string_cach": 88, "finish": [91, 169, 285, 840, 954, 1184], "least": [95, 144, 528, 720, 1056, 1184], "unexpect": [96, 285, 493, 495, 720, 1042, 1184], "caus": [96, 104, 114, 115, 128, 137, 152, 169, 285, 840, 954, 1184], "panic": 96, "incompat": 100, "arrai": [103, 107, 114, 115, 126, 167, 241, 246, 247, 285, 312, 313, 314, 315, 316, 331, 332, 337, 338, 339, 340, 341, 449, 466, 467, 468, 469, 478, 482, 487, 549, 550, 552, 556, 561, 670, 720, 831, 853, 854, 855, 856, 857, 876, 877, 882, 883, 884, 885, 890, 948, 1000, 1017, 1018, 1019, 1020, 1028, 1029, 1033, 1038, 1039, 1072, 1073, 1075, 1078, 1079, 1080, 1087, 1092, 1160, 1165, 1166, 1174, 1184], "chunkedarrai": [103, 209, 285, 890, 1184], "recordbatch": [103, 197, 285], "schemadefinit": [103, 105, 106, 107, 109, 123, 124, 132, 285, 831], "schema_overrid": [103, 105, 106, 107, 108, 109, 116, 117, 119, 123, 124, 125, 197, 246, 285, 831, 834, 857], "copi": [103, 104, 152, 158, 159, 197, 241, 246, 247, 260, 285, 406, 720, 740, 741, 807, 831, 874, 878, 955, 1160, 1165, 1166, 1184], "closest": 103, "pair": [103, 105, 106, 107, 109, 123, 124, 132, 143, 218, 285, 784, 831, 1192], "sever": [103, 105, 106, 107, 109, 123, 124, 132, 285, 831, 1192], "form": [103, 105, 106, 107, 109, 123, 124, 132, 196, 224, 254, 285, 528, 720, 831, 1056, 1184], "dimens": [103, 105, 107, 109, 123, 124, 132, 285, 542, 720, 831, 1066, 1184], "supportsinterchang": 104, "allow_copi": [104, 152], "interchang": [104, 152], "__dataframe__": 104, "convers": [104, 119, 152, 196, 197, 224, 225, 243, 247, 285, 612, 613, 614, 617, 732, 962, 1140, 1141, 1142, 1145, 1164, 1165, 1166, 1184], "detail": [104, 116, 117, 137, 139, 152, 285, 831, 1192], "latest": [104, 118, 129, 152, 377, 378, 392, 414, 504, 612, 614, 666, 720, 926, 927, 941, 1140, 1142], "from_panda": 104, "from_arrow": 104, "effici": [104, 116, 119, 197, 285], "reli": 104, "therefor": [104, 167, 285, 495, 710, 720, 948, 1184], "becaus": [104, 124, 167, 181, 184, 200, 202, 254, 271, 285, 456, 758, 761, 819, 831, 841, 948, 1007, 1042, 1184], "convert": [104, 108, 118, 119, 125, 129, 152, 242, 243, 244, 245, 246, 249, 285, 315, 344, 352, 381, 384, 482, 483, 492, 515, 537, 585, 596, 612, 613, 614, 615, 617, 720, 756, 831, 856, 869, 897, 930, 933, 1033, 1034, 1113, 1124, 1140, 1141, 1142, 1143, 1145, 1153, 1163, 1164, 1165, 1166, 1174, 1184], "panda": [104, 108, 136, 181, 247, 285, 370, 371, 631, 720, 758, 831, 919, 920, 1166, 1167, 1184], "pd": [104, 108, 631, 720, 1166, 1167, 1184], "df_pd": 104, "dfi": [104, 152], "clone": [105, 106, 107, 108, 109, 158, 246, 247, 285, 740, 831, 874, 1164, 1165, 1166, 1174, 1184], "dimension": [105, 107, 109, 246, 285, 831, 1184], "infer_schema_length": [106, 109, 114, 115, 119, 123, 128, 132, 285, 586, 831, 1114], "NOT": [106, 502, 1191], "typic": [106, 116, 202, 285, 357, 834, 902, 1042, 1184], "clearer": 106, "partial": [106, 114, 128, 285, 831], "mani": [106, 109, 116, 117, 169, 285, 586, 840, 954, 1114, 1184], "scan": [106, 109, 114, 115, 128, 129, 130, 131, 132, 133, 134, 181, 182, 184, 185, 222, 285, 546, 720, 751, 758, 759, 761, 762, 763, 770, 786, 831], "slow": [106, 109, 114, 115, 128, 299, 342, 495, 548, 720, 819, 886, 1071, 1184], "present": [106, 144, 429, 608, 609, 720, 751, 831, 1174, 1184], "np": [107, 172, 246, 285, 627, 720, 754, 831, 973, 978, 982, 983, 1156, 1184], "ndarrai": [107, 172, 246, 285, 627, 720, 754, 831, 890, 1083, 1086, 1156, 1165, 1184], "numpi": [107, 136, 161, 196, 224, 225, 243, 246, 247, 285, 520, 521, 548, 720, 831, 973, 978, 982, 983, 1051, 1052, 1071, 1165, 1166, 1174, 1184], "columnar": [107, 109, 196, 224, 285], "interpret": [107, 109, 114, 115, 128, 285, 831], "yield": [107, 109, 114, 115, 116, 128, 167, 169, 251, 285, 527, 720, 831, 840, 948, 954, 1184], "conclus": [107, 109, 285, 831], "nan_to_nul": [108, 285, 831, 1184], "include_index": 108, "instal": [108, 114, 115, 117, 120, 122, 126, 136, 161, 246, 247, 285, 794, 831, 1166, 1184], "nan": [108, 137, 138, 139, 140, 144, 152, 170, 247, 285, 347, 348, 398, 399, 407, 416, 418, 423, 433, 435, 436, 437, 442, 490, 496, 509, 520, 521, 522, 523, 548, 633, 656, 720, 752, 831, 843, 847, 891, 892, 956, 982, 983, 1051, 1052, 1071, 1165, 1166, 1184, 1192], "pd_df": 108, "pd_seri": 108, "tbl": [110, 112, 115], "reconstruct": 110, "repr": [110, 144, 146], "trim": 110, "whitespac": [110, 592, 600, 606, 607, 608, 609, 1120, 1128, 1134, 1135, 1136, 1137], "prompt": 110, "extract": [110, 353, 355, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 375, 376, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 531, 584, 585, 586, 587, 603, 720, 898, 899, 900, 901, 904, 905, 907, 911, 912, 913, 914, 916, 917, 918, 921, 922, 924, 925, 928, 929, 931, 934, 935, 936, 937, 938, 939, 940, 942, 943, 945, 1112, 1113, 1114, 1115], "to_init_repr": [110, 285, 1184], "truncat": [110, 114, 128, 179, 181, 184, 196, 224, 225, 243, 285, 758, 761, 781, 831], "identifi": [110, 206, 212, 252, 285, 776, 802, 831], "compound": [110, 225, 285, 834], "neither": [110, 119, 125, 226, 285, 483, 1034], "source_ac": 110, "source_cha": 110, "ident": [110, 158, 159, 285, 381, 544, 545, 720, 740, 741, 831, 874, 878, 930, 1068, 1069, 1184], "timestamp": [110, 181, 184, 285, 377, 378, 392, 675, 758, 761, 831, 926, 927, 941], "tor_id": 110, "nnel_id": 110, "\u03bc": [110, 144, 181, 196, 199, 222, 224, 225, 243, 256, 285, 349, 350, 351, 352, 357, 359, 363, 367, 370, 371, 374, 377, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 546, 549, 550, 552, 555, 556, 557, 612, 614, 667, 669, 675, 720, 758, 767, 786, 831, 834, 894, 895, 896, 897, 898, 899, 902, 903, 904, 910, 911, 916, 919, 920, 921, 923, 926, 927, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 944, 1140, 1142], "asia": [110, 834, 898, 899, 931], "tokyo": [110, 834], "123456780": 110, "9876543210": 110, "56": [110, 629, 720], "59": [110, 143, 351, 359, 367, 379, 666, 706, 707, 708, 834, 896, 916, 928], "663053": 110, "jst": [110, 834], "803065983": 110, "2055938745": 110, "38": [110, 144], "18": [110, 155, 207, 222, 285, 324, 341, 378, 392, 395, 423, 439, 454, 461, 479, 484, 514, 546, 652, 664, 707, 720, 736, 756, 777, 781, 783, 786, 811, 831, 834, 840, 944, 1005, 1012, 1030, 1035, 1142, 1184], "050545": 110, "source_actor_id": 110, "source_channel_id": 110, "to_list": [110, 222, 285, 1104, 1184], "datatypeclass": 111, "uint32": [111, 136, 157, 167, 285, 309, 355, 359, 363, 365, 367, 369, 372, 375, 376, 379, 393, 394, 417, 447, 448, 464, 541, 577, 578, 588, 589, 627, 631, 720, 739, 831, 834, 851, 864, 900, 904, 911, 913, 916, 918, 921, 924, 925, 928, 942, 943, 948, 979, 998, 999, 1015, 1084, 1105, 1106, 1116, 1117, 1167, 1184], "regular": [111, 196, 223, 224, 256, 285, 336, 403, 443, 464, 576, 577, 578, 583, 584, 585, 597, 598, 671, 720, 834, 993, 1015, 1104, 1105, 1106, 1111, 1112, 1113, 1125, 1126, 1184], "uint64": [111, 186, 285, 419, 447, 448, 540, 720, 963, 998, 999, 1064, 1184], "bigidx": 111, "read": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 285, 415, 493, 710, 720, 745, 751, 756, 783, 831, 840, 954, 1184], "over": [112, 114, 115, 116, 118, 128, 144, 153, 169, 196, 197, 202, 223, 224, 225, 251, 263, 266, 271, 285, 299, 342, 408, 492, 493, 495, 503, 505, 506, 507, 515, 538, 549, 550, 551, 552, 553, 555, 556, 557, 645, 659, 660, 673, 683, 684, 685, 695, 720, 814, 819, 834, 840, 841, 886, 954, 1042, 1072, 1073, 1075, 1079, 1184], "fetch": [112, 128, 200, 285, 740, 742, 763, 770, 831], "ideal": 112, "read_csv_batch": [112, 733], "tpch": [112, 115], "tables_scale_100": [112, 115], "lineitem": [112, 115, 117], "try_parse_d": [112, 114, 115, 128], "n_row": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 197, 285, 751, 831], "handler": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 745, 783, 831], "builtin": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 745, 783, 831], "stop": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 549, 550, 552, 555, 556, 557, 720, 895, 897, 903, 904, 911, 913, 916, 921, 927, 932], "textio": 114, "new_column": [114, 115, 119, 128, 219, 285], "comment_char": [114, 115, 128], "skip_row": [114, 115, 128], "missing_utf8_is_empty_str": [114, 115, 128], "ignore_error": [114, 115, 124, 128], "n_thread": [114, 115], "8192": 114, "csvencod": [114, 115, 128], "low_memori": [114, 115, 126, 128, 132, 133], "skip_rows_after_head": [114, 115, 128], "row_count_nam": [114, 115, 120, 122, 126, 128, 131, 132, 133], "row_count_offset": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sample_s": [114, 115], "eol_char": [114, 115, 128], "raise_if_empti": [114, 115, 119, 125, 128], "truncate_ragged_lin": [114, 128], "fsspec": [114, 115, 120, 122, 126, 129, 130, 131, 133, 136], "remot": [114, 115, 120, 122, 126], "autogener": [114, 115, 128], "column_x": [114, 115, 128], "enumer": [114, 115, 128, 197, 285], "shorter": [114, 115, 128], "comment": [114, 115, 128], "instanc": [114, 115, 128, 133, 144, 146, 150, 157, 169, 175, 285, 325, 504, 549, 550, 551, 552, 553, 555, 556, 557, 659, 673, 716, 720, 739, 772, 810, 831, 840, 864, 954, 1184], "escap": [114, 115, 128], "doesn": [114, 128, 181, 285, 397, 720, 758, 831, 947, 1174, 1184], "complet": [114, 116, 128, 1165, 1184], "wherea": [114, 116, 128, 222, 285, 378, 392, 520, 521, 546, 720, 763, 770, 786, 831, 927, 941, 1051, 1052, 1184], "would": [114, 115, 128, 309, 459, 495, 503, 538, 650, 720, 850, 1010, 1062, 1165, 1184], "prefer": [114, 115, 118, 128, 147, 169, 196, 202, 223, 224, 271, 285, 403, 495, 720, 831, 840, 954, 1042, 1184, 1192], "treat": [114, 115, 128, 336, 443, 464, 576, 578, 597, 598, 720, 993, 1015, 1104, 1106, 1125, 1126, 1184], "10000": [114, 197, 285], "might": [114, 115, 128, 148, 156, 246, 250, 285, 299, 495, 635, 720, 737, 796, 801, 831, 1166, 1184], "issu": [114, 115, 119, 128, 340, 341, 625, 720, 884, 885, 1154, 1184], "iso8601": [114, 115, 128], "succe": [114, 115, 128], "cpu": [114, 115], "system": [114, 115], "wrongli": 114, "done": [114, 115, 128, 134, 150, 154, 157, 199, 285, 298, 300, 325, 527, 646, 720, 735, 739, 767, 831, 864, 1184], "buffer": [114, 115, 116, 167, 196, 285, 948, 1184], "modifi": [114, 115, 128, 148, 150, 169, 189, 196, 258, 285, 310, 377, 395, 576, 583, 584, 597, 720, 840, 926, 944, 954, 1104, 1111, 1112, 1125, 1144, 1146, 1147, 1184], "upper": [114, 115, 116, 167, 181, 184, 285, 330, 331, 424, 483, 636, 647, 664, 665, 667, 668, 679, 680, 707, 708, 720, 758, 761, 831, 875, 876, 948, 969, 1040, 1171, 1184], "bound": [114, 115, 167, 181, 184, 285, 330, 331, 332, 424, 459, 481, 483, 489, 636, 647, 664, 665, 667, 668, 679, 680, 707, 708, 720, 758, 761, 831, 875, 876, 877, 948, 969, 1010, 1032, 1040, 1171, 1184], "lossi": [114, 115, 128], "decod": [114, 115], "expens": [114, 115, 126, 128, 132, 133, 145, 147, 181, 182, 184, 185, 196, 202, 222, 223, 224, 225, 251, 252, 285, 299, 495, 546, 720, 758, 759, 761, 762, 786, 802, 831, 840, 954, 1042, 1184, 1192], "aggreg": [114, 115, 126, 175, 180, 181, 183, 184, 203, 204, 205, 208, 210, 214, 215, 216, 222, 237, 238, 254, 257, 264, 265, 268, 270, 285, 293, 409, 421, 491, 493, 495, 527, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 641, 642, 643, 644, 659, 660, 661, 662, 673, 678, 686, 687, 690, 691, 695, 703, 704, 720, 758, 759, 761, 762, 772, 773, 774, 775, 778, 779, 782, 786, 797, 798, 805, 812, 813, 816, 818, 831, 966, 1070, 1071, 1072, 1073, 1075, 1078, 1079, 1080, 1184], "parser": 114, "regard": [114, 656], "sens": [114, 120, 122, 126, 131, 207, 256, 285, 527, 720, 777, 831], "particular": [114, 120, 122, 126, 131, 167, 285, 948, 1184], "usernam": [114, 117, 120, 122, 126, 131], "password": [114, 117, 120, 122, 126, 131], "skip": [114, 115, 119, 126, 128, 133, 254, 285, 841, 1042, 1184], "offset": [114, 115, 119, 120, 122, 126, 128, 131, 132, 133, 181, 182, 184, 185, 222, 235, 256, 262, 285, 349, 357, 370, 371, 374, 378, 392, 476, 546, 570, 601, 720, 758, 759, 761, 762, 786, 795, 810, 831, 894, 902, 919, 920, 923, 927, 941, 1027, 1098, 1129, 1142, 1184], "row_count": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sampl": [114, 115, 271, 285, 569, 720, 819, 1097, 1184], "estim": [114, 115, 154, 167, 285, 300, 401, 402, 440, 646, 720, 735, 831, 948, 950, 951, 992, 1184], "alloc": [114, 115, 167, 217, 285, 720, 948, 1184], "encount": [114, 115, 128, 181, 184, 285, 520, 521, 586, 587, 656, 659, 673, 720, 758, 761, 831, 1051, 1052, 1114, 1115, 1184], "window": [114, 115, 128, 181, 182, 184, 185, 222, 285, 342, 378, 392, 400, 401, 402, 493, 495, 527, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 654, 697, 698, 720, 758, 759, 761, 762, 786, 831, 886, 927, 941, 949, 950, 951, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1184], "rn": [114, 115, 128], "go": [114, 115, 128, 581, 1109], "nodataerror": [114, 115, 119, 125, 128, 732], "lazili": [114, 115, 128, 129, 130, 131, 132, 133, 494, 720, 743, 831], "glob": [114, 115, 128, 131, 132, 133], "continu": [114, 126, 343, 535, 569, 720, 887, 1060, 1097, 1184], "benchmark": [114, 126], "50000": 115, "batchedcsvread": [115, 732], "upon": 115, "creation": 115, "gather": 115, "next_batch": 115, "big": 115, "interest": 115, "seen_group": 115, "big_fil": 115, "df_current_batch": 115, "partition_df": 115, "partition_bi": [115, 197, 285], "as_dict": [115, 212, 285], "fh": 115, "write_csv": [115, 128, 285], "els": [115, 710], "connectionorcursor": 116, "iter_batch": 116, "cursor": 116, "client": 116, "odbc": 116, "driver": [116, 117], "packag": [116, 119], "establish": 116, "resultset": 116, "manner": 116, "veri": [116, 196, 251, 285, 495, 720, 819], "poor": 116, "trip": 116, "still": [116, 117], "intern": [116, 135, 196, 285], "exact": [116, 142, 144, 146, 234, 285, 610, 611, 612, 613, 614, 633, 720, 1140, 1141, 1142], "incom": 116, "execute_opt": 116, "read_arrow_batches_from_odbc": 116, "read_database_uri": 116, "wide": [116, 179, 206, 254, 285, 776, 831], "snowflak": [116, 117], "variou": [116, 285, 720, 831, 834, 1184], "facil": 116, "initialis": [116, 150, 831, 1191], "flight": 116, "flightsql": 116, "flight_sql": 116, "about": [116, 569, 576, 583, 584, 597, 720, 1097, 1104, 1111, 1112, 1125, 1184, 1192], "notabl": 116, "dremio": 116, "influxdb": 116, "notic": [116, 285, 831, 1184], "dbapi2": 116, "connectorx": [116, 117, 136], "optimis": [116, 202, 225, 271, 285, 831, 1042, 1085, 1086, 1184, 1192], "translat": 116, "conn": 116, "url": [116, 133, 583, 585, 1111, 1113], "test_data": 116, "user_conn": 116, "normalised_scor": 116, "uint8": [116, 141, 143, 157, 245, 246, 254, 285, 340, 341, 494, 625, 640, 720, 739, 831, 834, 884, 885, 1154, 1184, 1192], "parameteris": 116, "metric": 116, "alchemy_conn": 116, "qmark": 116, "variad": 116, "1000": [116, 119, 167, 245, 285, 363, 387, 936, 1163, 1184, 1192], "localhost": 116, "5432": 116, "uid": 116, "usr": 116, "pwd": 116, "max_text_s": 116, "max_binary_s": 116, "do_someth": 116, "partition_on": 117, "partition_rang": 117, "partition_num": 117, "dbreadengin": 117, "raw": 117, "warehous": 117, "role": 117, "transfer": 117, "document": [117, 119, 381, 384, 587, 612, 613, 614, 617, 716, 869, 930, 933, 1115, 1140, 1141, 1142, 1145], "redshift": 117, "mysql": 117, "mariadb": 117, "clickhous": 117, "oracl": 117, "bigqueri": 117, "pleas": [117, 181, 285, 664, 669, 758, 831], "github": 117, "sfu": 117, "connector": 117, "destin": 117, "develop": [117, 144, 146], "read_databas": 117, "explicitli": [117, 142, 144, 150, 494, 702, 720, 731], "test_tabl": 117, "compani": 117, "testdb": 117, "public": [117, 285, 720, 732, 831, 1184], "myrol": 117, "delta_table_opt": [118, 129], "root": [118, 129, 328, 439, 492, 505, 514, 515, 516, 517, 518, 519, 533, 573, 624, 719, 720, 871, 1100, 1184], "absolut": [118, 129, 130, 137, 138, 139, 140, 291, 400, 401, 402, 720, 836, 949, 950, 951, 1184], "avoid": [118, 224, 285, 294, 720], "year": [118, 129, 181, 199, 222, 256, 285, 361, 362, 374, 375, 378, 392, 393, 546, 549, 550, 551, 552, 553, 555, 556, 557, 663, 664, 665, 666, 667, 668, 707, 708, 720, 758, 767, 786, 831, 906, 907, 923, 924, 927, 941, 942], "2021": [118, 129, 157, 162, 179, 181, 256, 285, 612, 682, 739, 758, 831, 834, 898, 899, 907, 931, 988, 1140, 1184], "aw": [118, 129, 133], "googl": [118, 129, 130], "service_account": [118, 129], "service_account_json_absolute_path": [118, 129], "az": [118, 129, 130], "adl": [118, 129, 130], "abf": [118, 129, 130], "azure_storage_account_nam": [118, 129, 130], "azure_storage_account_kei": [118, 129, 130], "without_fil": [118, 129, 130], "track": [118, 129, 130, 202, 285, 483, 1191], "sheet_id": [119, 125], "sheet_nam": [119, 125], "xlsx2csv": [119, 136], "openpyxl": [119, 136], "pyxlsb": [119, 136], "xlsx2csv_option": 119, "read_csv_opt": 119, "noreturn": [119, 125], "spreadsheet": [119, 125, 214, 285, 732], "xlsb": 119, "sheetnam": [119, 125], "nor": [119, 125, 226, 285], "fastest": 119, "read_csv": [119, 128], "refin": 119, "significantli": [119, 202, 285, 1192], "potenti": [119, 128, 131, 132, 133, 196, 223, 225, 285, 514], "unabl": 119, "julian": 119, "skip_empty_lin": 119, "influenc": [119, 751, 772, 831], "pipelin": 119, "correct": [119, 125, 401, 402, 440, 550, 551, 552, 553, 554, 555, 557, 569, 720, 771, 772, 831, 950, 951, 992, 1077, 1097, 1184], "known": [119, 144, 483, 814, 819, 1034], "better": [119, 202, 246, 271, 285, 495, 589, 720, 819, 1085, 1086, 1117, 1184], "detect": 119, "memory_map": [120, 126, 131], "greatli": [120, 131], "repeat": [120, 131, 539, 541, 693, 711, 720], "give": [120, 122, 126, 131, 132, 133, 206, 252, 285, 358, 440, 541, 633, 720, 732, 776, 802, 831, 903, 992, 1184], "That": [120, 771, 772, 831], "filenam": 120, "my_fil": 120, "write_ipc": [120, 285], "read_ndjson": 123, "openoffic": 125, "od": 125, "parallelstrategi": [126, 133], "use_statist": [126, 133], "stabl": [126, 156, 161, 226, 250, 285, 488, 720, 737, 776, 796, 801, 831], "row_group": [126, 133], "read_tabl": 126, "scan_parquet": [126, 134], "scan_pyarrow_dataset": [126, 133], "hive": [126, 133], "contribut": [126, 551, 553, 555, 557, 720], "with_column_nam": 128, "push": [128, 131, 132, 133, 134], "down": [128, 131, 132, 133, 134, 412, 720, 960, 1184], "therebi": [128, 131, 132, 133], "realloc": [128, 131, 132, 169, 285, 840, 954, 1184], "headerless": 128, "my_long_fil": 128, "thing": [128, 135, 672, 681], "less": [128, 199, 285, 442, 490, 604, 720, 767, 831, 1132, 1192], "breezah": 128, "languag": [128, 181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "hard": [128, 771, 772, 831], "mydf": 128, "lambda": [128, 153, 175, 202, 213, 214, 271, 285, 299, 400, 401, 402, 483, 491, 492, 493, 495, 515, 659, 660, 673, 684, 685, 695, 720, 771, 772, 780, 819, 831, 841, 949, 950, 951, 1034, 1042, 1184], "lower": [128, 181, 184, 216, 277, 285, 330, 332, 424, 489, 492, 515, 536, 540, 553, 647, 664, 665, 667, 668, 679, 680, 694, 707, 708, 720, 758, 761, 782, 825, 831, 875, 877, 969, 1040, 1061, 1064, 1076, 1171, 1184], "simpli": [128, 527, 659, 673, 720], "idx": [128, 181, 197, 285, 483, 758, 831, 1034, 1086, 1184], "uint16": [128, 340, 341, 625, 720, 834, 884, 885, 1154, 1184], "u16": [128, 144, 1192], "eu": [129, 130], "central": [129, 130, 440, 569, 720, 992, 1097, 1184], "iceberg": [130, 732], "pyiceberg": [130, 136], "metadata": [130, 181, 182, 184, 185, 222, 285, 546, 720, 758, 759, 761, 762, 786, 831], "secret": [130, 133], "adlf": 130, "my": [130, 134, 618, 1146], "gcp": [130, 133], "oauth": 130, "token": 130, "ya29": 130, "dr": 130, "afm": 130, "py": 130, "impl": 130, "fsspecfileio": 130, "hive_partit": 133, "retri": 133, "prune": [133, 772, 831], "read_parquet": 133, "east": 133, "allow_pyarrow_filt": 134, "comparison": 134, "dset": 134, "folder": 134, "04": [134, 157, 181, 256, 285, 351, 352, 370, 371, 377, 378, 381, 384, 385, 386, 389, 391, 395, 612, 667, 669, 739, 758, 831, 834, 897, 911, 916, 919, 920, 921, 926, 930, 933, 934, 935, 938, 940, 944, 1140], "seed": [135, 186, 226, 285, 419, 470, 538, 559, 565, 720, 963, 1021, 1062, 1082, 1093, 1184], "shuffl": [135, 226, 271, 285, 470, 559, 720, 819, 1021, 1082, 1184], "stdout": [136, 150, 179, 285, 506], "platform": 136, "maco": 136, "13": [136, 144, 158, 159, 170, 171, 178, 190, 200, 209, 222, 260, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 294, 356, 360, 364, 366, 368, 373, 380, 503, 505, 546, 615, 654, 659, 662, 673, 704, 709, 720, 740, 741, 752, 753, 769, 786, 807, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 831, 901, 905, 912, 914, 917, 922, 927, 929, 941, 942, 1042, 1143, 1184], "arm64": 136, "arm": 136, "64bit": [136, 540, 720, 1064, 1184], "main": [136, 743, 831], "aug": 136, "clang": 136, "14": [136, 144, 202, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 349, 423, 538, 707, 720, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 834, 894, 927], "1403": 136, "adbc_driver_sqlit": 136, "cloudpickl": 136, "matplotlib": [136, 781, 794, 831], "26": [136, 357, 393, 902], "pydant": 136, "21": [136, 207, 238, 285, 549, 550, 552, 555, 556, 557, 675, 720, 777, 831, 834], "check_row_ord": [137, 138], "check_column_ord": [137, 138], "check_dtyp": [137, 138, 139, 140], "check_exact": [137, 138, 139, 140], "rtol": [137, 138, 139, 140], "atol": [137, 138, 139, 140], "08": [137, 138, 139, 140, 144, 222, 285, 351, 378, 546, 612, 667, 669, 720, 786, 831, 834, 927, 941, 1140], "categorical_as_str": [137, 138, 139, 140], "nans_compare_equ": [137, 138, 139, 140], "assert": [137, 138, 139, 140, 142, 144, 146, 222, 285, 732, 834], "assertionerror": [137, 138, 139, 140], "compar": [137, 138, 139, 140, 176, 285, 398, 399, 416, 418, 442, 490, 522, 523, 720, 869, 1084, 1184], "unsort": [137, 138], "exactli": [137, 138, 139, 140, 143, 144, 146, 603, 604, 610, 611, 669, 1092, 1131, 1132, 1138, 1139, 1184], "toler": [137, 138, 139, 140, 199, 285, 767, 831], "inexact": [137, 138, 139, 140], "share": [137, 138, 139, 140, 167, 285, 720, 948, 1184], "assert_series_equ": [137, 140, 1192], "assert_frame_not_equ": [137, 140], "pytest": [137, 139], "worthwhil": [137, 139], "shorten": [137, 139], "traceback": [137, 138, 139, 140], "tb": [137, 139, 167, 285, 948, 1184], "short": [137, 139], "tend": [137, 139], "unhelpfulli": [137, 139], "assert_frame_equ": [138, 139, 1192], "assert_series_not_equ": [138, 139], "check_nam": [139, 140], "searchstrategi": [141, 143, 144, 146], "null_prob": [141, 144, 146], "percentag": [141, 144, 146, 528, 720, 1056, 1184], "chanc": [141, 144, 146, 1192], "independ": [141, 142, 144, 146], "flag": [141, 285, 561, 576, 583, 584, 597, 720, 749, 771, 772, 831, 1087, 1104, 1111, 1112, 1125, 1184], "hypothesi": [141, 142, 143, 144, 145, 146, 1192], "sampled_from": [141, 1192], "unique_small_int": 141, "ccy": [141, 1192], "gbp": [141, 1192], "eur": [141, 162, 179, 285, 1192], "jpy": [141, 1192], "min_col": [142, 144], "max_col": [142, 144], "standalon": [142, 144, 834], "mincol": 142, "assign": [142, 181, 285, 483, 527, 538, 603, 604, 720, 758, 831, 1034, 1041, 1062, 1131, 1132, 1184], "minimum": [142, 143, 144, 146, 175, 208, 285, 400, 401, 402, 509, 521, 530, 538, 690, 691, 720, 778, 831, 915, 949, 950, 951, 1052, 1058, 1062, 1184, 1192], "especi": [142, 545, 720, 751, 831, 1069, 1184], "test_unique_xyz": 142, "assert_someth": 142, "punctuat": 142, "test_special_char_colname_init": 142, "inner_dtyp": [143, 146], "select_from": [143, 146], "min_siz": [143, 144, 146, 1192], "max_siz": [143, 144, 146, 1192], "anoth": [143, 180, 285, 342, 350, 481, 499, 502, 720, 757, 809, 831, 886, 895, 954, 1032, 1084, 1184], "randomli": 143, "innermost": 143, "2x": 143, "lst": 143, "11330": 143, "24030": 143, "116": 143, "zz": [143, 146], "uint8_pair": [143, 1192], "uint": [143, 1192], "zip": [143, 1192], "131": 143, "176": 143, "149": [143, 1192], "max_data_s": [144, 146], "include_col": 144, "allow_infin": [144, 146], "allowed_dtyp": [144, 146, 1192], "excluded_dtyp": [144, 146], "describ": [144, 179, 285, 1184], "desir": [144, 483, 1034], "n_chunk": [144, 146, 285, 840, 954, 1184], "randomis": 144, "onto": 144, "pct": 144, "preced": [144, 834], "disallow": [144, 146], "inf": [144, 146, 306, 343, 426, 430, 535, 633, 720, 847, 881, 887, 965, 973, 978, 1040, 1056, 1060, 1171, 1184], "exclud": [144, 146, 181, 285, 338, 341, 424, 720, 758, 831, 969, 988, 1184], "usag": [144, 146, 234, 285, 834, 1092, 1184], "deploi": [144, 146], "characterist": [144, 146], "concret": [144, 146], "test_repr": 144, "isinst": [144, 146, 285], "0x11f561580": 144, "0565": 144, "34715": 144, "5844": 144, "33": [144, 207, 285, 558, 720, 777, 831, 1076, 1184], "076854": 144, "3382": 144, "17": [144, 264, 548, 558, 675, 696, 707, 720, 812, 879, 881, 927, 1071, 1184, 1192], "48662": 144, "7540": 144, "836271": 144, "4063": 144, "06": [144, 157, 256, 285, 351, 369, 376, 377, 378, 392, 393, 739, 831, 834, 926, 927, 941], "39092": 144, "1889": 144, "41": [144, 556, 720, 1192], "874455": 144, "15836": 144, "1755e": 144, "575050513": 144, "profil": [145, 147, 742, 831], "balanc": [145, 147, 1192], "set_environ": 145, "polars_hypothesis_profil": [145, 147], "1500": 145, "constructor": 146, "normal": [146, 181, 285, 397, 440, 569, 720, 758, 831, 947, 992, 1097, 1184], "test_repr_is_valid_str": 146, "experi": 146, "create_list_strategi": [146, 1192], "polars_max_thread": 148, "behind": 148, "lock": 148, "reason": [148, 493, 720], "temporarili": [148, 150, 181, 182, 184, 185, 222, 285, 546, 720, 758, 759, 761, 762, 786, 831], "pyspark": 148, "udf": [148, 153, 202, 213, 266, 271, 285, 299, 495, 531, 645, 685, 720, 780, 814, 819, 831, 841, 1042, 1184], "recommend": [148, 196, 213, 285, 834], "easi": [150, 1192], "restor": 150, "restore_default": 150, "relat": [150, 834], "set_tbl_row": 150, "initi": [150, 659, 673, 710], "whatev": 150, "were": [150, 716], "enter": 150, "advantag": [150, 213, 285], "set_": 150, "set_verbos": 150, "do_various_th": 150, "cleaner": 150, "breviti": 150, "vein": 150, "durat": [150, 199, 256, 285, 349, 356, 357, 360, 364, 366, 368, 373, 380, 385, 386, 387, 388, 389, 390, 391, 395, 631, 664, 665, 667, 668, 707, 708, 720, 767, 831, 834, 894, 901, 902, 905, 912, 914, 917, 922, 929, 934, 935, 936, 937, 938, 939, 940, 944, 1167, 1184], "set_ascii_t": 150, "write_ascii_frame_to_stdout": 150, "sy": 150, "nan_as_nul": 152, "polarsdatafram": 152, "notimplementederror": 152, "num_row": 152, "get_column": [152, 248, 285], "dtypekind": 152, "inference_s": [153, 202, 285], "256": [153, 202, 285, 1056, 1184], "map_row": [153, 285], "tri": [153, 202, 285], "approxim": [154, 155, 285, 300, 646, 720, 735, 736, 831, 1192], "hyperloglog": [154, 285, 300, 646, 720, 735, 831], "algorithm": [154, 285, 300, 646, 720, 735, 831], "cardin": [154, 285, 300, 646, 720, 735, 831], "approx_n_uniqu": [155, 285, 720, 736, 831], "k": [156, 225, 250, 285, 323, 327, 440, 632, 720, 737, 801, 831, 863, 868, 992, 1168, 1184], "intoexpr": [156, 180, 181, 182, 183, 184, 185, 222, 228, 229, 232, 236, 250, 260, 261, 264, 285, 298, 318, 321, 322, 424, 451, 452, 454, 461, 462, 471, 472, 473, 474, 479, 484, 527, 560, 562, 563, 572, 602, 603, 604, 610, 611, 642, 644, 650, 653, 654, 655, 659, 662, 666, 673, 687, 691, 696, 699, 702, 704, 710, 720, 737, 757, 758, 759, 760, 761, 762, 786, 788, 789, 792, 796, 801, 807, 808, 812, 831, 858, 861, 862, 969, 1013, 1089, 1130, 1131, 1132, 1138, 1139, 1184], "nulls_last": [156, 236, 250, 285, 309, 571, 720, 737, 796, 801, 831, 850, 1184], "smallest": [156, 250, 285, 323, 720, 737, 801, 831, 863, 1184], "largest": [156, 250, 285, 632, 720, 737, 801, 831, 1168, 1184], "wors": [156, 250, 285, 737, 796, 801, 831], "search": [156, 199, 250, 285, 737, 767, 796, 801, 831], "top_k": [156, 285, 323, 720, 737, 831, 863, 1184], "columnnameorselector": [157, 163, 165, 206, 212, 214, 225, 244, 252, 253, 254, 285, 739, 746, 747, 776, 802, 803, 831], "strict": [157, 285, 319, 325, 576, 579, 596, 612, 613, 614, 617, 720, 739, 831, 859, 864, 1084, 1104, 1107, 1124, 1140, 1141, 1142, 1145, 1184], "due": [157, 181, 199, 222, 225, 256, 285, 294, 325, 357, 374, 378, 392, 439, 514, 516, 517, 518, 519, 533, 546, 549, 550, 551, 552, 553, 555, 556, 557, 624, 664, 665, 667, 668, 707, 708, 720, 739, 758, 767, 786, 831, 864, 902, 923, 927, 941, 1184], "overflow": [157, 285, 325, 340, 341, 596, 625, 720, 739, 831, 864, 884, 885, 1124, 1154, 1184], "2020": [157, 162, 179, 222, 285, 352, 357, 363, 377, 381, 384, 385, 386, 387, 388, 389, 390, 391, 546, 612, 613, 614, 720, 739, 786, 831, 834, 897, 902, 926, 930, 933, 934, 935, 936, 937, 938, 939, 940, 1140, 1141, 1142], "u8": [157, 244, 245, 254, 285, 494, 640, 720, 739, 831, 834, 1161, 1184, 1192], "to_dict": [157, 285, 739, 831], "as_seri": [157, 242, 285, 739, 831, 887, 1060, 1184], "tempor": [157, 181, 182, 184, 185, 196, 222, 224, 225, 243, 285, 330, 424, 546, 549, 550, 551, 552, 553, 555, 556, 557, 720, 732, 739, 758, 759, 761, 762, 786, 831, 834, 875, 969, 988, 1184], "greater": [158, 199, 285, 416, 418, 569, 594, 595, 604, 620, 720, 767, 831, 1097, 1122, 1123, 1132, 1148, 1184], "cheap": [158, 159, 229, 261, 285, 740, 741, 789, 808, 831, 840, 874, 878, 1184], "deepcopi": [158, 285, 740, 831, 874, 1184], "appl": [160, 189, 198, 218, 220, 242, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 543, 581, 605, 720, 766, 784, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826, 831, 1109, 1133], "banana": [160, 242, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 285, 543, 581, 605, 720, 815, 816, 818, 820, 821, 822, 823, 824, 825, 826], "orang": [160, 267, 268, 270, 272, 273, 275, 277, 278, 285, 815, 816, 818, 820, 821, 823, 825, 826], "pairwis": [161, 285], "pearson": [161, 285, 440, 569, 656, 720, 992, 1097, 1184], "correl": [161, 285, 656, 697], "coeffici": [161, 285, 569, 720, 1097, 1184], "corrcoef": [161, 285], "percentil": [162, 285, 888, 1184], "summari": [162, 285, 888, 1184], "glimps": [162, 187, 285], "median": [162, 214, 285, 408, 551, 720, 809, 831, 888, 1074, 1184], "usd": [162, 179, 285, 1192], "null_count": [162, 165, 285, 342, 720, 831, 886, 888, 962, 1184], "266667": [162, 285], "666667": [162, 191, 204, 257, 273, 285, 400, 720, 765, 805, 821, 831, 949, 1184], "std": [162, 285, 555, 720, 831, 888, 1078, 1184], "101514": [162, 285], "707107": [162, 285, 401, 555, 720, 950, 1184], "57735": [162, 285], "more_column": [163, 168, 230, 253, 285, 403, 671, 720, 746, 750, 791, 803, 831], "subset": [165, 210, 252, 285, 747, 802, 831], "preserv": [165, 172, 180, 183, 198, 202, 246, 247, 285, 347, 348, 409, 455, 566, 720, 747, 754, 766, 831, 891, 892, 958, 1006, 1094, 1166, 1184], "behavior": [165, 285, 481, 747, 831, 840, 887, 1032, 1060, 1184], "all_horizont": [165, 285, 641, 747, 831], "is_nul": [165, 285, 720, 747, 831, 1184], "sizeunit": [167, 285, 948, 1184], "heap": [167, 285, 720, 948, 1184], "its": [167, 285, 351, 378, 392, 572, 710, 720, 869, 896, 927, 941, 948, 1184], "bitmap": [167, 285, 948, 1184], "structarrai": [167, 285, 948, 1184], "constant": [167, 222, 285, 349, 406, 720, 786, 831, 894, 948, 955, 1184], "unchang": [167, 285, 631, 720, 771, 772, 814, 819, 831, 948, 1167, 1184], "capac": [167, 234, 285, 948, 1092, 1184], "ffi": [167, 285, 948, 1184], "kb": [167, 285, 948, 1184], "mb": [167, 285, 948, 1184], "gb": [167, 285, 948, 1184], "revers": [167, 285, 337, 338, 339, 340, 341, 492, 515, 516, 517, 533, 624, 720, 831, 882, 883, 884, 885, 1184], "1_000_000": [167, 285, 948, 1184], "25888898": [167, 285], "689577102661133": [167, 285], "long": [168, 206, 254, 285, 750, 776, 831], "letter": [168, 269, 279, 285, 403, 584, 671, 720, 750, 817, 827, 831, 834, 1112], "onlin": [169, 285, 840, 954, 1184], "rerun": [169, 285, 840, 954, 1184], "conveni": [169, 285, 840, 954, 1184], "Not": [170, 285, 433, 435, 494, 720, 752, 831], "fillnullstrategi": [171, 285, 408, 720, 753, 831, 957, 1184], "matches_supertyp": [171, 285, 753, 831], "forward": [171, 199, 232, 285, 370, 408, 414, 475, 562, 720, 753, 767, 792, 831, 919, 957, 1026, 1089, 1184], "consecut": [171, 285, 317, 408, 414, 575, 720, 753, 831, 957, 1103, 1184], "fill_nan": [171, 285, 720, 831, 1184], "intoexprcolumn": [172, 285, 323, 330, 331, 332, 470, 475, 528, 559, 562, 607, 608, 609, 632, 647, 664, 665, 667, 668, 679, 680, 707, 708, 720, 754, 792, 831, 863, 875, 876, 877, 1021, 1026, 1056, 1135, 1136, 1137, 1168, 1184], "constraint": [172, 285, 439, 514, 516, 517, 518, 519, 533, 624, 720, 754, 831], "is_in": [172, 285, 720, 1184], "reduct": [175, 285], "supercast": [175, 285], "parent": [175, 285], "rule": [175, 285], "arithmet": [175, 285], "zip_with": [175, 285, 1184], "foo11": [175, 285], "bar22": [175, 285], "null_equ": [176, 285, 1084, 1184], "retriev": [177, 285, 447, 448, 621, 998, 999, 1149], "max_items_per_column": [179, 285], "max_colname_length": [179, 285], "return_as_str": [179, 285, 506], "preview": [179, 285], "few": [179, 285], "exce": [179, 285], "ellipsi": [179, 285], "head": [179, 201, 239, 285, 298, 444, 720, 770, 831, 994, 1155, 1184], "tail": [179, 187, 285, 298, 569, 720, 831, 964, 1097, 1184], "more_bi": [180, 183, 212, 236, 285, 572, 720, 757, 760, 796, 831], "groupbi": [180, 214, 285, 299, 495, 645, 685, 720, 831], "consist": [180, 183, 212, 285, 612, 757, 760, 831, 840, 954, 1140, 1184], "regardless": [180, 183, 285, 587, 710, 1115], "agg": [180, 181, 184, 214, 222, 285, 293, 409, 411, 417, 495, 571, 572, 627, 639, 657, 685, 720, 742, 743, 749, 751, 757, 758, 759, 761, 762, 781, 786, 790, 794, 831, 834], "Or": [180, 181, 199, 222, 236, 256, 264, 285, 527, 546, 572, 664, 665, 667, 668, 707, 708, 710, 720, 757, 758, 767, 786, 796, 812, 831], "index_column": [181, 182, 184, 185, 222, 285, 546, 720, 758, 759, 761, 762, 786, 831], "timedelta": [181, 182, 184, 185, 199, 222, 256, 285, 355, 374, 375, 378, 392, 394, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 759, 761, 762, 767, 786, 831, 834, 908, 910, 915, 923, 927, 941, 1051, 1052, 1184], "period": [181, 182, 184, 185, 222, 285, 378, 392, 400, 401, 402, 528, 546, 664, 665, 667, 668, 707, 708, 720, 758, 759, 761, 762, 786, 831, 927, 941, 949, 950, 951, 1056, 1184], "include_boundari": [181, 184, 285, 758, 761, 831], "closedinterv": [181, 182, 184, 185, 222, 285, 424, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 759, 761, 762, 786, 831, 969, 1184], "label": [181, 285, 343, 535, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 720, 758, 781, 831, 887, 1060, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1184], "start_bi": [181, 184, 285, 758, 761, 831], "startbi": [181, 184, 285, 758, 761, 831], "check_sort": [181, 182, 184, 185, 222, 285, 546, 720, 758, 759, 761, 762, 786, 831], "dynamicgroupbi": [181, 184, 285], "member": [181, 285, 758, 831, 977, 1184], "descript": [181, 285, 758, 831], "ascend": [181, 182, 184, 185, 222, 285, 546, 550, 551, 552, 553, 555, 557, 720, 758, 759, 761, 762, 786, 831], "dynam": [181, 184, 285, 483, 549, 550, 551, 552, 553, 555, 556, 557, 720, 758, 761, 831, 1034], "matter": [181, 182, 184, 185, 196, 222, 224, 225, 243, 285, 546, 608, 609, 720, 758, 759, 761, 762, 786, 831], "interv": [181, 182, 184, 185, 222, 256, 285, 343, 378, 392, 424, 535, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 759, 761, 762, 786, 831, 887, 900, 903, 904, 911, 913, 916, 918, 921, 924, 925, 927, 932, 941, 942, 969, 1060, 1184], "_lower_bound": [181, 184, 285, 758, 761, 831], "_upper_bound": [181, 184, 285, 758, 761, 831], "harder": [181, 184, 285, 758, 761, 831], "inclus": [181, 182, 184, 185, 222, 285, 424, 546, 549, 550, 551, 552, 553, 555, 556, 557, 602, 603, 647, 664, 665, 667, 668, 679, 680, 707, 708, 720, 758, 759, 761, 762, 786, 831, 969, 1130, 1131, 1184], "datapoint": [181, 184, 285, 758, 761, 831], "boundari": [181, 285, 330, 331, 332, 720, 758, 831, 875, 876, 877, 965, 1184], "mondai": [181, 184, 285, 392, 394, 758, 761, 831, 941, 943], "tuesdai": [181, 184, 285, 758, 761, 831], "wednesdai": [181, 184, 285, 758, 761, 831], "thursdai": [181, 184, 285, 758, 761, 831], "fridai": [181, 184, 285, 758, 761, 831], "saturdai": [181, 184, 285, 758, 761, 831], "sundai": [181, 184, 285, 394, 758, 761, 831, 943], "earliest": [181, 184, 285, 377, 378, 392, 612, 614, 666, 758, 761, 831, 926, 927, 941, 1140, 1142], "weekli": [181, 184, 285, 392, 758, 761, 831, 941], "week": [181, 184, 199, 222, 256, 285, 374, 378, 392, 394, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 707, 708, 720, 758, 761, 767, 786, 831, 834, 923, 927, 941, 943], "sorted": [181, 182, 184, 185, 222, 285, 546, 720, 758, 759, 761, 762, 786, 831], "verifi": [181, 182, 184, 185, 222, 285, 546, 720, 758, 759, 761, 762, 786, 831], "incorrectli": [181, 182, 184, 185, 222, 285, 483, 546, 720, 758, 759, 761, 762, 786, 831], "incorrect": [181, 182, 184, 185, 222, 285, 395, 546, 561, 720, 758, 759, 761, 762, 786, 814, 819, 831, 944, 1087, 1184], "roll": [181, 182, 185, 285, 370, 371, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 654, 697, 698, 720, 758, 759, 762, 831, 919, 920, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1184], "re": [181, 246, 285, 370, 371, 758, 831, 919, 920, 1191], "come": [181, 285, 370, 371, 440, 720, 733, 758, 830, 831, 919, 920, 992, 1184], "1d": [181, 199, 222, 256, 285, 350, 374, 378, 386, 389, 392, 395, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 682, 707, 708, 720, 758, 767, 786, 831, 834, 895, 903, 910, 923, 927, 932, 935, 938, 941], "set_index": [181, 285, 758, 831], "resampl": [181, 285, 758, 831], "reset_index": [181, 285, 758, 831], "though": [181, 285, 716, 758, 831], "unlik": [181, 285, 758, 831], "evenli": [181, 285, 758, 831], "upsampl": [181, 285, 758, 831], "1n": [181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "1u": [181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "microsecond": [181, 196, 199, 222, 224, 225, 243, 256, 285, 374, 378, 387, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 666, 667, 668, 669, 706, 707, 708, 720, 758, 767, 781, 786, 831, 834, 923, 927, 936, 941], "1m": [181, 199, 222, 256, 285, 363, 374, 378, 387, 388, 390, 391, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 936, 937, 939, 940, 941], "minut": [181, 199, 222, 256, 285, 374, 378, 389, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 666, 667, 668, 669, 706, 707, 708, 720, 758, 767, 786, 831, 834, 923, 927, 938, 941], "1h": [181, 199, 222, 256, 285, 357, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 902, 904, 923, 927, 941], "hour": [181, 199, 222, 256, 285, 374, 378, 386, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 666, 667, 668, 669, 706, 707, 708, 720, 758, 767, 786, 831, 834, 923, 927, 935, 941], "1w": [181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "1mo": [181, 199, 222, 256, 285, 352, 370, 371, 374, 377, 378, 385, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 897, 918, 919, 920, 923, 924, 925, 926, 927, 934, 941, 942], "month": [181, 199, 222, 256, 285, 355, 370, 371, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 663, 664, 665, 666, 667, 668, 669, 707, 708, 720, 758, 767, 786, 831, 900, 919, 920, 923, 927, 941], "1q": [181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "quarter": [181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "1y": [181, 199, 222, 256, 285, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 923, 927, 941], "1i": [181, 199, 222, 256, 285, 374, 546, 549, 550, 551, 552, 553, 555, 556, 557, 720, 758, 767, 786, 831, 923], "3d12h4m25": [181, 199, 222, 256, 285, 378, 392, 546, 664, 665, 667, 668, 707, 708, 720, 758, 767, 786, 831, 927, 941], "correspond": [181, 199, 222, 246, 256, 285, 362, 374, 378, 392, 495, 538, 545, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 707, 708, 720, 742, 758, 767, 786, 831, 907, 923, 927, 941, 1062, 1069, 1184], "daylight": [181, 199, 222, 256, 285, 349, 357, 374, 378, 392, 546, 549, 550, 551, 552, 553, 555, 556, 557, 664, 665, 667, 668, 669, 707, 708, 720, 758, 767, 786, 831, 902, 923, 927, 941], "10i": [181, 222, 285, 546, 720, 758, 786, 831], "datetime_rang": [181, 285, 350, 352, 363, 370, 371, 374, 377, 378, 385, 386, 387, 388, 389, 390, 391, 392, 395, 549, 550, 552, 555, 556, 557, 664, 720, 758, 831, 894, 895, 897, 902, 903, 904, 910, 911, 913, 916, 919, 920, 921, 923, 926, 927, 932, 934, 935, 936, 937, 938, 939, 940, 941], "30m": [181, 285, 378, 392, 758, 831, 927, 941], "_lower_boundari": [181, 285, 758, 831], "_upper_boundari": [181, 285, 758, 831], "lower_bound": [181, 285, 330, 332, 424, 720, 758, 831, 875, 877, 969, 1171, 1184], "upper_bound": [181, 285, 330, 331, 424, 483, 720, 758, 831, 875, 876, 969, 1040, 1184], "bys": [181, 285, 758, 831], "int_rang": [181, 254, 271, 285, 647, 758, 772, 819, 831], "2i": [181, 285, 758, 831], "3i": [181, 285, 758, 831], "a_agg_list": [181, 285, 758, 831], "rollinggroupbi": [182, 185, 222, 285], "group_bi": [183, 210, 214, 284, 285, 293, 409, 411, 417, 493, 495, 571, 572, 627, 639, 657, 685, 720, 742, 743, 749, 751, 760, 781, 794, 830, 831, 834], "group_by_dynam": [184, 222, 285, 761, 786, 831], "seed_1": [186, 285, 419, 720, 963, 1184], "seed_2": [186, 285, 419, 720, 963, 1184], "seed_3": [186, 285, 419, 720, 963, 1184], "hash": [186, 285, 720, 1184], "u64": [186, 285, 419, 540, 720, 781, 831, 963, 1184], "10783150408545073287": [186, 285], "1438741209321515184": [186, 285], "10047419486152048166": [186, 285], "2047317070637311557": [186, 285], "ab": [187, 201, 239, 260, 285, 621, 622, 720, 807, 831, 964, 994, 1155, 1184], "grown": [189, 285], "intermedi": [191, 285, 765, 831, 1192], "linear": [191, 216, 277, 285, 423, 449, 498, 536, 553, 654, 655, 694, 720, 765, 782, 825, 831, 968, 1000, 1061, 1076, 1184], "333333": [191, 285, 439, 514, 720, 765, 831, 1056, 1080, 1184], "mask": [192, 194, 285, 319, 425, 427, 428, 431, 432, 438, 529, 530, 576, 579, 720, 859, 958, 962, 969, 971, 974, 975, 980, 981, 989, 1057, 1058, 1085, 1104, 1107, 1175, 1184], "visual": [192, 194, 285], "scalar": [195, 202, 223, 285, 560, 645, 682, 685, 720, 991, 1083, 1184], "With": [195, 232, 285, 475, 549, 550, 551, 552, 553, 555, 556, 557, 562, 720, 792, 831, 991, 1026, 1089, 1184], "buffer_s": [196, 285], "fit": [196, 234, 254, 285, 564, 696, 720, 1091, 1092, 1184], "signific": [196, 202, 285, 299, 495, 720, 1042, 1184], "4x": [196, 285], "materialis": [196, 197, 223, 224, 225, 285], "rows_by_kei": [196, 224, 285], "iter_row": [197, 223, 224, 225, 285], "17_500": [197, 285], "klmnoopqrstuvwxyz": [197, 285], "__name__": [197, 285], "7500": [197, 285], "15_000": [197, 285], "record_batch": [197, 285], "to_arrow": [197, 285, 1184], "to_batch": [197, 285], "date32": [197, 285], "large_str": [197, 241, 247, 285], "15000": [197, 285], "2500": [197, 285], "left_on": [198, 199, 255, 285, 766, 767, 804, 831], "right_on": [198, 199, 255, 285, 766, 767, 804, 831], "suffix": [198, 199, 228, 260, 264, 285, 294, 321, 433, 435, 436, 437, 492, 515, 516, 518, 519, 527, 533, 543, 581, 608, 611, 720, 766, 767, 788, 807, 809, 812, 831, 834, 861, 1109, 1139], "_right": [198, 199, 285, 766, 767, 831], "joinvalid": [198, 285, 766, 831], "semi": [198, 285, 766, 831], "anti": [198, 285, 766, 819, 831, 1085, 1086, 1184], "cross": [198, 285, 766, 831], "many_to_mani": [198, 285, 766, 831], "one_to_on": [198, 285, 766, 831], "one_to_mani": [198, 285, 766, 831], "many_to_on": [198, 285, 766, 831], "join_asof": [198, 285, 766, 831], "other_df": [198, 285], "by_left": [199, 285, 767, 831], "by_right": [199, 285, 767, 831], "asofjoinstrategi": [199, 285, 767, 831], "allow_parallel": [199, 285, 766, 767, 831], "force_parallel": [199, 285, 766, 767, 831], "asof": [199, 285, 767, 831], "rather": [199, 285, 506, 535, 545, 620, 720, 767, 831, 1060, 1069, 1148, 1184], "asof_join": [199, 285], "distanc": [199, 285, 767, 831, 965, 1184], "plan": [199, 200, 285, 738, 742, 745, 749, 756, 766, 767, 783, 790, 794, 811, 831], "forc": [199, 202, 271, 285, 766, 767, 819, 831, 1042, 1184], "gdp": [199, 285, 767, 831], "2016": [199, 285, 767, 831], "2017": [199, 285, 767, 831], "2018": [199, 285, 377, 767, 831, 926], "2019": [199, 285, 767, 831], "jan": [199, 285, 767, 831], "1st": [199, 285, 767, 831], "4164": [199, 285, 767, 831], "4411": [199, 285, 767, 831], "4566": [199, 285, 767, 831], "4696": [199, 285, 767, 831], "set_sort": [199, 222, 256, 285, 546, 720, 767, 786, 831, 1184], "popul": [199, 285, 767, 831], "12th": [199, 285, 767, 831], "82": [199, 285, 767, 831], "66": [199, 255, 285, 556, 640, 720, 767, 804, 831, 1076, 1184], "83": [199, 285, 767, 831], "52": [199, 260, 285, 393, 558, 720, 767, 807, 831], "request": [200, 285], "describe_plan": [200, 285], "unoptim": [200, 285], "describe_optimized_plan": [200, 285], "show_graph": [200, 285, 831], "un": [200, 285], "graphviz": [200, 285, 794, 831], "much": [202, 254, 271, 285, 342, 481, 495, 588, 589, 685, 720, 819, 886, 1032, 1042, 1116, 1117, 1184], "intens": [202, 271, 285, 527, 720, 1042, 1184], "materi": [202, 271, 285, 742, 781, 819, 831, 834, 1042, 1184], "parallelis": [202, 271, 285, 1042, 1184], "achiev": [202, 271, 285, 495, 589, 720, 887, 1042, 1060, 1117, 1184], "best": [202, 271, 285, 495, 720, 1042, 1184], "black": [202, 285, 318, 320, 321, 322], "arbitrarili": [202, 285], "rearrang": [202, 285], "transform": [202, 285, 493, 616, 618, 619, 720], "lru_cach": [202, 285, 495, 720, 1042, 1184], "column_1": [202, 251, 285], "axi": [203, 204, 206, 208, 238, 285, 648, 649, 776, 831], "null_strategi": [204, 238, 285], "nullstrategi": [204, 238, 285], "propag": [204, 238, 285, 399, 520, 521, 523, 575, 720, 1051, 1052, 1103, 1184], "spam": [204, 285, 584, 1112], "id_var": [206, 285, 776, 831], "value_var": [206, 285, 776, 831], "variable_nam": [206, 285, 776, 831], "value_nam": [206, 285, 776, 831], "unpivot": [206, 285, 776, 831], "massag": [206, 285, 776, 831], "measur": [206, 285, 776, 831], "merg": [207, 285, 777, 831], "caller": [207, 285, 483, 772, 777, 814, 819, 831], "respons": [207, 285, 777, 831], "steve": [207, 285, 777, 831], "elis": [207, 285, 777, 831], "bob": [207, 285, 777, 831], "ag": [207, 285, 777, 831], "anna": [207, 285, 777, 831], "megan": [207, 285, 777, 831], "thoma": [207, 285, 777, 831], "what": [210, 285, 1165, 1174, 1184], "pack": [210, 285], "expr_unique_subset": [210, 285], "df_nuniqu": [210, 285], "df_agg_nuniqu": [210, 285], "include_kei": [212, 225, 285], "offer": [213, 285, 531, 720, 780, 831], "fulli": [213, 226, 285], "cast_str_to_int": [213, 285, 780, 831], "col_nam": [213, 285, 780, 831], "tdf": [213, 285, 780, 831], "aggregate_funct": [214, 285], "pivotagg": [214, 285], "sort_column": [214, 285], "section": [214, 285, 576, 583, 584, 597, 664, 665, 667, 668, 707, 708, 1104, 1111, 1112, 1125], "predefin": [214, 285], "predict": [214, 217, 256, 285], "transpos": [214, 285], "discoveri": [214, 285], "col1": [214, 251, 285, 831, 1192], "col2": [214, 251, 285, 831, 1192], "col3": [214, 285, 1192], "tanh": [214, 285, 720, 1184], "998347": [214, 285], "964028": [214, 285], "999954": [214, 285], "unique_column_valu": [214, 285], "interpol": [216, 277, 285, 408, 498, 536, 553, 694, 720, 782, 825, 831, 1061, 1076, 1184], "rollinginterpolationmethod": [216, 277, 285, 536, 553, 694, 720, 782, 825, 831, 1061, 1076, 1184], "midpoint": [216, 277, 285, 536, 553, 694, 720, 782, 825, 831, 1061, 1076, 1184], "t_0": [222, 285, 546, 549, 550, 551, 552, 553, 555, 556, 557, 720, 786, 831], "t_1": [222, 285, 546, 549, 550, 551, 552, 553, 555, 556, 557, 720, 786, 831], "t_n": [222, 285, 546, 549, 550, 551, 552, 553, 555, 556, 557, 720, 786, 831], "43": [222, 285, 341, 546, 556, 720, 786, 831], "strptime": [222, 285, 377, 546, 720, 786, 831, 926], "2d": [222, 246, 285, 374, 546, 682, 720, 786, 831, 894, 900], "sum_a": [222, 285, 546, 720, 786, 831], "min_a": [222, 285, 546, 720, 786, 831], "max_a": [222, 285, 546, 720, 786, 831], "by_pred": [223, 285], "accord": [223, 285, 494, 535, 664, 665, 667, 668, 707, 708, 720, 907, 1060, 1184], "mutual": [223, 285], "exclus": [223, 285, 640, 647, 679, 680, 720], "clariti": [223, 285], "toomanyrowsreturnederror": [223, 285, 732], "norowsreturnederror": [223, 285, 732], "inherit": [223, 285], "rowserror": [223, 285, 732], "high": [225, 285, 535, 720, 1060, 1184], "cost": [225, 285], "reoconstruct": [225, 285], "defaultdict": [225, 285], "assum": [225, 285, 771, 772, 814, 819, 831], "with_replac": [226, 285, 470, 559, 720, 1021, 1082, 1184], "ordereddict": [227, 285, 702, 787, 831], "named_expr": [228, 229, 260, 261, 285, 699, 702, 788, 789, 807, 808, 831], "threshold": [228, 285, 788, 831], "set_auto_structifi": [228, 260, 285, 788, 807, 831], "auto_structifi": [228, 260, 285, 788, 807, 831], "is_odd": [228, 285, 788, 831], "_is_odd": [228, 285, 788, 831], "sequenti": [229, 261, 285, 789, 808, 831], "fill_valu": [232, 233, 254, 285, 562, 563, 720, 792, 793, 831, 1089, 1090, 1184], "opposit": [232, 285, 475, 562, 720, 792, 831, 1026, 1089, 1184], "lag": [232, 285, 475, 562, 654, 720, 792, 831, 1026, 1089, 1184], "shift": [233, 285, 345, 453, 528, 563, 654, 720, 793, 831, 889, 1004, 1056, 1090, 1184], "shrink": [234, 285, 564, 720, 1091, 1092, 1184], "hold": [234, 285], "ddof": [237, 257, 285, 555, 557, 574, 638, 656, 697, 698, 701, 709, 720, 797, 805, 831, 1078, 1080, 1101, 1173, 1184], "deviat": [237, 285, 401, 555, 574, 701, 720, 797, 831, 950, 1101, 1184], "degre": [237, 257, 285, 537, 555, 557, 574, 638, 649, 656, 697, 698, 701, 709, 720, 797, 805, 831, 1078, 1080, 1101, 1173, 1184], "freedom": [237, 257, 285, 555, 557, 574, 638, 656, 697, 698, 701, 709, 720, 797, 805, 831, 1078, 1080, 1101, 1173, 1184], "divisor": [237, 257, 285, 555, 557, 574, 638, 656, 697, 698, 701, 709, 720, 797, 805, 831, 1078, 1080, 1101, 1173, 1184], "816497": [237, 285], "16a": [238, 285], "27b": [238, 285], "38c": [238, 285], "nth": [240, 285, 604, 628, 720, 800, 831, 1132, 1157, 1184], "mostli": [241, 285, 409, 720], "categoricaltyp": [241, 285], "fruit": [242, 285, 543, 581, 605, 720, 1109, 1133], "car": [242, 285, 543, 720], "beetl": [242, 285, 543, 720], "audi": [242, 285, 543, 720], "28": [242, 285, 292, 377, 395, 720, 926, 944, 1192], "300": [242, 285, 1072, 1073, 1075, 1184], "drop_first": [244, 285], "dummi": [244, 285, 1161, 1184], "foo_1": [244, 285], "foo_2": [244, 285], "bar_3": [244, 285], "bar_4": [244, 285], "ham_a": [244, 285], "ham_b": [244, 285], "instantiat": [245, 285, 1163, 1184], "from_repr": [245, 285, 1163, 1184], "df_from_str_repr": [245, 285], "eval": [245, 285, 670, 1163, 1184], "indexord": [246, 285], "fortran": [246, 285], "downstream": [246, 285, 561, 720, 1087, 1184], "applic": [246, 285, 495, 549, 550, 551, 552, 553, 555, 556, 557, 720], "prevent": [246, 285, 294, 340, 341, 439, 514, 625, 720, 831, 884, 885, 1154, 1184], "reshap": [246, 285, 457, 720, 1008, 1184], "ll": [246, 285], "u1": [246, 285], "f4": [246, 285], "view": [246, 285, 495, 720, 1165, 1184], "recarrai": [246, 285], "rec": [246, 285], "use_pyarrow_extension_arrai": [247, 285, 1166, 1184], "extens": [247, 285, 1166, 1184], "trigger": [247, 285, 720, 1166, 1184], "sent": [247, 285, 1165, 1166, 1184], "pandas_df1": [247, 285], "pandas_df2": [247, 285], "pandas_df2_pa": [247, 285], "na": [247, 285, 605, 1166, 1184], "four": [249, 285], "five": [249, 285, 1192], "bottom_k": [250, 285, 632, 720, 801, 831, 1168, 1184], "include_head": [251, 285], "header_nam": [251, 285], "column_nam": [251, 285], "perhap": [251, 285], "column_2": [251, 285], "name_gener": [251, 285], "base_nam": [251, 285], "my_column_": [251, 285], "my_column_0": [251, 285], "my_column_1": [251, 285], "my_column_2": [251, 285], "new_id": [251, 285], "uniquekeepstrategi": [252, 285, 802, 831], "kept": [252, 285, 802, 831], "decompos": [253, 285, 803, 831], "t_a": [253, 285, 803, 831], "t_b": [253, 285, 803, 831], "t_c": [253, 285, 803, 831], "t_d": [253, 285, 803, 831], "womp": [253, 285, 803, 831], "t_": [253, 285, 803, 831], "t_struct": [253, 285, 803, 831], "step": [254, 285, 647, 679, 680], "unstackdirect": [254, 285], "pivot": [254, 285], "phase": [254, 285], "subject": [254, 285], "ascii_uppercas": [254, 285], "h": [254, 285, 292, 381, 384, 564, 612, 614, 617, 720, 1140, 1142, 1145], "x_0": [254, 285, 400, 401, 402, 720, 949, 950, 951, 1184], "x_1": [254, 285], "y_0": [254, 285, 400, 401, 402, 720, 949, 950, 951, 1184], "y_1": [254, 285], "z_0": [254, 285], "z_1": [254, 285], "include_nul": [255, 285, 804, 831], "ignore_nul": [255, 285, 295, 297, 400, 401, 402, 575, 641, 643, 720, 838, 839, 949, 950, 951, 1103, 1174, 1184], "syntact": [255, 285, 641, 643, 661, 671, 672, 676, 681, 686, 690, 693, 694, 699, 703, 711, 804, 831, 1100, 1184], "sugar": [255, 285, 641, 643, 661, 671, 672, 676, 681, 686, 690, 693, 694, 699, 703, 711, 804, 831, 1100, 1184], "coalesc": [255, 285, 612, 804, 831, 1140], "400": [255, 285, 804, 831, 1072, 1073, 1075, 1184], "600": [255, 285, 804, 831, 834], "700": [255, 285, 804, 831], "new_df": [255, 285, 804, 831], "time_column": [256, 285], "frequenc": [256, 285], "date_rang": [256, 285, 355, 358, 375, 383, 394, 900, 918, 924, 925, 942, 943], "forward_fil": [256, 285, 338, 341, 720], "varianc": [257, 285, 402, 440, 557, 638, 709, 720, 805, 831, 951, 992, 1080, 1173, 1184], "grow": [258, 285], "not_": [260, 285, 434, 720, 807, 831, 1184], "not_c": [260, 285, 807, 831], "diff": [260, 285, 385, 386, 387, 388, 389, 390, 391, 471, 720, 807, 831, 934, 935, 936, 937, 938, 939, 940, 1022, 1184], "_diff": [260, 285, 807, 831], "row_nr": [262, 285, 494, 549, 550, 552, 555, 556, 557, 720, 810, 831, 1086, 1184], "named_agg": [264, 812], "_sum": [264, 812], "_mean_squar": [264, 812], "b_sum": [264, 812], "c_mean_squar": [264, 812], "sub": [266, 271, 312, 313, 314, 720, 853, 854, 855], "map_group": [266, 645, 814], "deem": [267, 657, 815], "nr": [269, 279, 817, 827], "_significantly_": [271, 1042, 1184], "triangl": [271, 819], "group_df": [271, 819], "maxim": [272, 307, 720, 820, 848, 1184], "833333": [273, 821], "minim": [275, 308, 448, 564, 572, 720, 823, 849, 999, 1046, 1091, 1184], "overview": [285, 720, 732, 831, 1184, 1192], "frameinittyp": [285, 831], "entri": [285, 831, 1191], "mydatafram": 285, "df4": 285, "df5": 285, "df6": 285, "approx_uniqu": [285, 831], "corr": 285, "drop_in_plac": 285, "drop_nul": [285, 347, 720, 831, 891, 1184], "estimated_s": [285, 1184], "explod": [285, 411, 527, 542, 720, 831, 1066, 1184], "find_idx_by_nam": 285, "fold": [285, 504, 653, 659, 660, 695], "frame_equ": [285, 392], "group_by_rol": [285, 831], "groupby_dynam": [285, 831], "groupby_rol": [285, 831], "hash_row": 285, "hstack": 285, "insert_at_idx": 285, "is_dupl": [285, 720, 1184], "is_empti": [285, 1184], "is_uniqu": [285, 720, 1184], "iter_slic": 285, "melt": [285, 831], "merge_sort": [285, 831], "n_uniqu": [285, 720, 1184], "pipe": [285, 720, 831], "quantil": [285, 535, 553, 720, 831, 1060, 1076, 1184], "replace_at_idx": 285, "select_seq": [285, 831], "shift_and_fil": [285, 720, 831, 1184], "shrink_to_fit": [285, 1184], "take_everi": [285, 720, 831, 1184], "to_dummi": [285, 1184], "to_numpi": [285, 493, 720, 1184], "to_panda": [285, 1184], "to_struct": [285, 584], "unnest": [285, 343, 535, 544, 584, 585, 603, 604, 622, 720, 831, 887, 1034, 1060, 1068, 1131, 1132, 1184], "unstack": 285, "with_columns_seq": [285, 831], "write_avro": 285, "write_databas": 285, "write_delta": 285, "write_excel": 285, "write_ipc_stream": 285, "write_json": [285, 831], "write_parquet": 285, "cumprod": [292, 720, 1184], "ghi": [292, 584, 720, 834, 1112], "94": [293, 720], "to_uppercas": [294, 518, 585, 720], "confus": [295, 433, 435, 720], "kleen": [295, 297, 641, 643, 720, 838, 839, 1184], "bitwis": [296, 526, 640, 641, 642, 643, 644, 720], "upcast": [298, 720], "skip_nul": [299, 495, 720, 841, 1042, 1184], "pass_nam": [299, 495, 720], "mapelementsstrategi": [299, 495, 720], "thread_loc": [299, 495, 720], "map_el": [299, 493, 640, 720, 841, 1184], "unknown": [299, 494, 495, 583, 682, 720, 1111], "stage": [299, 720], "code": [299, 318, 320, 321, 322, 495, 561, 720, 751, 769, 831, 1087, 1184], "gil": [299, 495, 720], "invers": [301, 302, 303, 304, 305, 306, 720, 842, 843, 844, 845, 846, 847, 1184], "cosin": [301, 302, 333, 334, 493, 720, 842, 843, 879, 880, 1184], "570796": [301, 303, 720, 842, 844, 1184], "hyperbol": [302, 304, 306, 334, 568, 630, 720, 843, 845, 847, 880, 1096, 1159, 1184], "sine": [303, 304, 493, 567, 568, 720, 844, 845, 1095, 1096, 1184], "881374": [304, 720, 845, 1184], "tangent": [305, 306, 629, 630, 720, 846, 847, 1158, 1159, 1184], "785398": [305, 648, 649, 720, 846, 1184], "arg_wher": [310, 720], "i8": [315, 482, 564, 693, 696, 711, 720, 856, 889, 1033, 1067, 1171, 1184], "seen": [317, 414, 720], "substr": [318, 321, 322, 576, 581, 597, 598, 602, 603, 604, 605, 834, 858, 861, 862, 1104, 1109, 1125, 1126, 1130, 1131, 1132, 1133], "ends_with": [318, 322, 576, 605, 834, 1133], "yellow": [318, 320, 321, 322], "x00": [318, 320, 321, 322], "xff": [318, 320, 321, 322], "contains_with_lit": 318, "contains_with_expr": 318, "transferencod": [319, 320, 579, 580, 859, 860, 1107, 1108], "hex": [319, 320, 579, 580, 596, 859, 860, 1107, 1108, 1124], "base64": [319, 320, 579, 580, 859, 860, 1107, 1108], "code_encoded_hex": 320, "000000": 320, "ffff00": 320, "0000ff": 320, "anywher": [321, 322, 612, 613, 614, 1140, 1141, 1142], "ends_with_lit": 321, "ends_with_expr": 321, "starts_with_lit": 322, "starts_with_expr": 322, "complex": [323, 342, 632, 720, 863, 886, 1168, 1184], "frac": [323, 400, 401, 402, 569, 632, 720, 863, 949, 950, 951, 1097, 1168, 1184], "supersed": [324, 720], "to_fram": [326, 358, 378, 383, 392, 612, 887, 1060, 1085, 1086, 1131, 1132, 1140, 1184], "categoricalord": [327, 868], "lexic": [327, 834, 868, 870], "259921": [328, 720, 871, 1184], "587401": [328, 720], "numericliter": [330, 331, 332, 720, 875, 876, 877, 1184], "temporalliter": [330, 331, 332, 720, 875, 876, 877, 1184], "outsid": [330, 720, 875, 1184], "clip": [331, 332, 720, 876, 877, 1184], "543081": [334, 720, 880, 1184], "cotang": [335, 720, 881, 1184], "cumul": [337, 338, 339, 340, 341, 659, 660, 661, 662, 720, 882, 883, 884, 885, 1184], "a_revers": [337, 338, 339, 340, 341, 492, 515, 517, 543, 624, 720], "value_cummax": [338, 720], "value_cummax_all_fil": [338, 720], "value_cumsum": [341, 720], "value_cumsum_all_fil": [341, 720], "min_period": [342, 400, 401, 402, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 697, 698, 720, 886, 949, 950, 951, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1184], "slide": [342, 720, 886, 1184], "slot": [342, 345, 453, 720, 886, 889, 1004, 1184], "realli": [342, 720, 886, 1184], "visit": [342, 720, 886, 1184], "left_clos": [343, 535, 720, 887, 1060, 1184], "include_break": [343, 535, 720, 887, 1060, 1184], "bin": [343, 535, 596, 640, 713, 720, 887, 965, 1060, 1124, 1178, 1184], "discret": [343, 345, 397, 453, 471, 535, 720, 887, 889, 947, 965, 1004, 1022, 1060, 1184], "plu": [343, 488, 720, 887, 1039, 1060, 1184], "endpoint": [343, 535, 549, 550, 551, 552, 553, 555, 556, 557, 720, 887, 1060, 1184], "observ": [343, 400, 401, 402, 535, 720, 887, 949, 950, 951, 1060, 1184], "fall": [343, 535, 545, 720, 887, 969, 1060, 1069, 1184], "qcut": [343, 720, 887, 1184], "breakpoint": [343, 535, 720, 887, 1060, 1184], "brk": [343, 535, 720], "foo_bin": [343, 535, 720], "radian": [344, 648, 720], "720": [344, 537, 720], "540": [344, 537, 720], "360": [344, 537, 720], "180": [344, 537, 720], "null_behavior": [345, 453, 720, 889, 1004, 1184], "nullbehavior": [345, 453, 720, 889, 1004, 1184], "drop_nan": [348, 720, 892, 1184], "utc": [349, 352, 357, 377, 612, 614, 834, 894, 897, 902, 926, 1140, 1142], "usual": [349, 894], "vari": [349, 894, 1192], "rare": [349, 894], "countri": [349, 894], "switch": [349, 894], "samoa": [349, 894], "apia": [349, 894], "did": [349, 894], "2011": [349, 894], "dst_offset": [349, 894], "2012": [349, 894], "replace_time_zon": [349, 357, 898, 899, 931], "pacif": [349, 894], "11h": [349, 894], "13h": [349, 894], "lose": [350, 895], "time_unit_m": [350, 895], "time_unit_n": [350, 895], "naiv": [351, 896, 1142], "compon": [351, 379, 612, 614, 669, 896, 928, 1140, 1142], "resolv": 351, "tm": [351, 834], "456000": [351, 896], "101000": 351, "d1": 351, "d2": 351, "d3": 351, "europ": [352, 357, 377, 897, 902, 926], "london": [352, 357, 377, 897, 902, 926], "gmt": [352, 357, 377, 897, 902, 926], "bst": [352, 357, 377, 897, 902, 926], "weekdai": [355, 375], "ordinal_dai": [355, 394], "day_of_month": [355, 375, 394], "day_of_year": [355, 375, 394], "356": [355, 375, 394], "357": [355, 375, 394], "358": [355, 375, 394], "359": [355, 375, 394], "total_dai": [356, 901], "base_utc_offset": [357, 902], "0m": [357, 902], "epochtimeunit": [358, 675, 903], "unix": [358, 675, 903], "epoch_n": [358, 903], "epoch_": [358, 903], "978307200000000": [358, 383, 903, 932], "978307200": [358, 903], "978393600000000": [358, 383, 903, 932], "978393600": [358, 903], "978480000000000": [358, 383, 903, 932], "978480000": [358, 903], "2010": [359, 367, 834], "total_hour": [360, 905], "leap": [361, 374, 906, 923], "2002": [361, 374, 906, 923, 945], "iso": [362, 393, 394, 907, 942, 943], "1977": [362, 396], "1978": [362, 396], "1979": [362, 396], "calendar_year": [362, 396], "1976": [362, 396], "1_001": [363, 387, 388, 390], "002": [363, 387, 388, 390, 669, 936, 937, 939], "003": [363, 387, 388, 390], "3000": 363, "997": [363, 387, 388, 390], "997000": 363, "998": [363, 387, 388, 390], "998000": 363, "999": [363, 387, 388, 390, 834, 1192], "999000": [363, 834], "total_microsecond": [364, 912], "total_millisecond": [366, 914], "total_minut": [368, 917], "think": [370, 371, 919, 920], "vectoris": [370, 371, 919, 920], "tseri": [370, 371, 919, 920], "monthend": [370, 919], "rollforward": [370, 919], "monthbegin": [371, 920], "rollback": [371, 920], "total_nanosecond": [373, 922], "minu": [374, 923], "dictat": [374, 720, 923], "2005": [374, 923], "date_plus_1i": [374, 923], "1y2mo": [374, 923], "date_min": 374, "1998": [374, 923], "1999": [374, 834, 923], "2003": [374, 675, 923], "2004": [374, 923], "2006": [374, 923], "new_dat": 374, "ordin": [375, 538, 720, 924, 1062, 1184], "366": [375, 924], "use_earliest": [377, 392, 612, 614, 666, 926, 941, 1140, 1142], "ambigu": [377, 378, 392, 612, 614, 666, 926, 927, 941, 1140, 1142], "convert_time_zon": [377, 926], "london_timezon": [377, 926], "amsterdam": [377, 926], "london_to_amsterdam": [377, 926], "cet": [377, 926], "cest": [377, 926], "ts_local": [377, 926], "brussel": [377, 926], "half": [378, 400, 401, 402, 720, 927, 949, 950, 951, 1184], "localis": [378, 392, 927, 941], "dst": [378, 392, 927, 941], "cst": [378, 392, 927, 941], "cdt": [378, 392, 927, 941], "225": [378, 392], "10m": [378, 392, 927, 941], "milli": [379, 928], "micro": [379, 928], "456789": [379, 834, 928], "111110": [379, 928], "765431": [379, 928], "11111": [379, 928], "total_second": [380, 929], "to_str": [381, 930], "datetime_str": [381, 384], "timestamp_n": [383, 932], "timestamp_m": 383, "978307200000": 383, "978393600000": 383, "978480000000": 383, "strftime": [384, 933], "days_diff": 385, "hours_diff": 386, "microseconds_diff": 387, "milliseconds_diff": 388, "minutes_diff": 389, "1440": [389, 938], "nanoseconds_diff": 390, "seconds_diff": 391, "safe": [392, 540, 720, 927, 941, 1064, 1142, 1165, 1184], "53": [393, 942], "time_unit_u": 395, "32971": [395, 944], "32974": [395, 944], "32976": [395, 944], "iso_year": 396, "pk": [397, 720, 947, 1184], "probabl": [397, 535, 720, 947, 1060, 1184], "459148": [397, 720], "754888": [397, 720], "eq": [399, 720, 1184], "span": [400, 401, 402, 720, 949, 950, 951, 1184], "half_lif": [400, 401, 402, 720, 949, 950, 951, 1184], "adjust": [400, 401, 402, 569, 720, 949, 950, 951, 1097, 1184], "exponenti": [400, 401, 402, 404, 532, 720, 949, 950, 951, 952, 1184], "weight": [400, 401, 402, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 569, 720, 949, 950, 951, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1097, 1184], "decai": [400, 401, 402, 720, 949, 950, 951, 1184], "term": [400, 401, 402, 720, 949, 950, 951, 1184], "mass": [400, 401, 402, 720, 949, 950, 951, 1184], "gamma": [400, 401, 402, 720, 949, 950, 951, 1184], "foral": [400, 401, 402, 720, 949, 950, 951, 1184], "geq": [400, 401, 402, 720, 949, 950, 951, 1184], "theta": [400, 401, 402, 720, 949, 950, 951, 1184], "life": [400, 401, 402, 720, 949, 950, 951, 1184], "exp": [400, 401, 402, 720, 949, 950, 951, 1184], "ln": [400, 401, 402, 720, 949, 950, 951, 1184], "smooth": [400, 401, 402, 720, 949, 950, 951, 1184], "factor": [400, 401, 402, 631, 720, 949, 950, 951, 1167, 1184], "leq": [400, 401, 402, 720, 949, 950, 951, 1184], "imbal": [400, 401, 402, 720, 949, 950, 951, 1184], "ew": [400, 401, 402, 720, 949, 950, 951, 1184], "w_i": [400, 401, 402, 720, 949, 950, 951, 1184], "recurs": [400, 401, 402, 720, 949, 950, 951, 1184], "y_t": [400, 401, 402, 720, 949, 950, 951, 1184], "y_": [400, 401, 402, 720, 949, 950, 951, 1184], "x_t": [400, 401, 402, 720, 949, 950, 951, 1184], "x_2": [400, 401, 402, 720, 949, 950, 951, 1184], "428571": [400, 720, 949, 1184], "bia": [401, 402, 440, 554, 569, 720, 950, 951, 992, 1077, 1097, 1184], "unbias": [401, 402, 720, 950, 951, 1184], "963624": [401, 720, 950, 1184], "928571": [402, 720, 951, 1184], "wildcard": [403, 659, 660, 673, 695, 720], "regex": [403, 501, 576, 577, 578, 581, 583, 584, 585, 597, 598, 605, 671, 720, 834, 1104, 1105, 1106, 1109, 1111, 1112, 1113, 1125, 1126, 1133], "aa": [403, 576, 671, 720, 1104], "ba": [403, 605, 671, 720, 834], "cc": [403, 671, 720], "718282": [404, 720], "389056": [404, 720], "54": [404, 720, 1192], "59815": [404, 720], "expand": [405, 500, 501, 541, 720, 834, 953, 1184], "pythonliter": [406, 720, 955, 1043, 1046, 1184], "extrem": [406, 548, 720, 955, 1071, 1184], "group_col": [409, 639, 720], "g1": [409, 639, 720], "g2": [409, 639, 720], "lt": [409, 639, 720, 1184], "gte": [409, 639, 720], "exprlistnamespac": [411, 720], "divis": [413, 633, 720], "truediv": [413, 720], "9774092659964970114": [419, 720], "13614470193936745724": [419, 720], "1101441246220388612": [419, 720], "11638928888656214026": [419, 720], "13382926553367784577": [419, 720], "cumsum": [422, 623, 662, 720, 764, 831, 991, 1184], "interpolationmethod": [423, 720, 968, 1184], "regrid": [423, 720], "grid": [423, 720], "df_original_grid": [423, 720], "grid_point": [423, 720], "df_new_grid": [423, 720], "conflat": [424, 720], "finit": [426, 633, 656, 720, 973, 1184], "occurr": [427, 428, 431, 432, 637, 720, 965, 974, 975, 980, 981, 1172, 1184], "is_first_distinct": [427, 720, 974, 1184], "optional_memb": [429, 720, 977, 1184], "infinit": [430, 633, 720, 978, 1184], "is_last_distinct": [431, 720, 980, 1184], "_isnan": [433, 720], "b_isnan": [433, 720], "negat": [434, 524, 720, 1054, 1184], "_is_not_nan": [435, 720], "b_is_not_nan": [435, 720], "_not_nul": [436, 720], "a_not_nul": [436, 720], "b_not_nul": [436, 720], "_isnul": [437, 720], "a_isnul": [437, 720], "b_isnul": [437, 720], "chain": [439, 514, 516, 517, 518, 519, 533, 624, 710, 720], "undo": [439, 507, 514, 516, 517, 533, 624, 720], "fisher": [440, 569, 720, 992, 1097, 1184], "fourth": [440, 720, 992, 1184], "subtract": [440, 623, 720, 992, 1184], "distribut": [440, 569, 720, 992, 1097, 1184], "elimin": [440, 720, 992, 1184], "bias": [440, 569, 720, 992, 1097, 1184], "scipi": [440, 569, 720, 992, 1097, 1184], "stat": [440, 569, 720, 992, 1097, 1184], "153061": [440, 720], "sublist": [447, 448, 450, 453, 458, 459, 460, 462, 463, 471, 476, 480, 481, 483, 977, 998, 999, 1001, 1004, 1009, 1010, 1011, 1013, 1014, 1022, 1027, 1031, 1032, 1034, 1184], "membership": [450, 1001], "listcol": 452, "number_of_two": 452, "set_differ": [454, 1005], "blindli": [456, 1007], "worth": [456, 1007], "enough": [456, 569, 720, 1007, 1097, 1184], "concat_list": [456, 670, 1007], "rank": [456, 656, 670, 720, 1007, 1184], "exprnamespac": 457, "flat": [457, 542, 720, 1008, 1066, 1184], "set_intersect": [461, 1012], "x_y": 462, "th": [471, 569, 720, 1022, 1097, 1184], "symmetr": [473, 479, 1024, 1030], "sdiff": 473, "taken": [476, 601, 1027, 1129], "set_symmetric_differ": [479, 1030], "null_on_oob": [481, 1032], "cheaper": [481, 1032], "n_field_strategi": [483, 1034], "tostructstrategi": [483, 1034], "first_non_nul": [483, 1034], "max_width": [483, 1034], "field_0": [483, 1034], "field_1": [483, 1034], "field_n": [483, 1034], "pre": [483, 495, 535, 693, 696, 711, 720, 1060, 1184], "n0": 483, "n1": 483, "set_union": [484, 1035], "logarithm": [486, 487, 488, 720, 1037, 1038, 1039, 1184], "584963": [486, 720], "30103": [487, 720], "60206": [487, 720], "natur": [488, 720, 1039, 1184], "693147": [488, 720], "098612": [488, 720], "386294": [488, 720], "lowest": [489, 720], "9223372036854775808": [489, 720], "agg_list": [491, 493, 720], "map_batch": [491, 683, 720, 771, 831], "keep_nam": [492, 720], "b_revers": [492, 515, 517, 543, 624, 720], "rstrip": [492, 515, 720], "_revers": [492, 515, 517, 543, 624, 720], "whole": [493, 571, 572, 583, 720, 819, 831, 1111], "elementwis": [493, 547, 548, 549, 550, 552, 556, 720, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1184], "third": [493, 720], "parti": [493, 720], "book": [493, 720], "bug": [493, 495, 720, 771, 772, 814, 819, 831, 1042, 1184], "map_dict": [493, 720, 1184], "func": [493, 720], "argmax": [493, 720], "remap": [494, 720, 1041, 1184], "lookup": [494, 716, 720, 1041, 1184], "country_code_dict": [494, 720], "ca": [494, 720], "canada": [494, 720], "de": [494, 720], "germani": [494, 720], "fr": [494, 720], "franc": [494, 720], "country_cod": [494, 720], "rest": [494, 720], "discourag": [495, 720], "loop": [495, 720], "a_times_2": [495, 720], "tip": [495, 720], "again": [495, 720], "behav": [495, 608, 609, 720, 840, 1184], "exprmetanamespac": [499, 502], "foo_bar2": [499, 502], "raise_if_undetermin": 503, "computeerror": [503, 596, 732, 1124], "e_filt": [503, 505], "e_sum_ov": [503, 505], "e_sum_slic": [503, 505], "tree": 506, "modulu": [510, 720], "xlog2": [512, 532, 720], "reverse_": [516, 533, 720], "reverse_a": [516, 533, 720], "reverse_b": [516, 533, 720], "lowercas": [518, 616, 1144], "uppercas": [519, 619, 1147], "to_lowercas": 519, "poison": [520, 521, 720, 1051, 1052, 1184], "nanmax": [520, 521, 720, 1051, 1052, 1184], "inequ": [522, 720], "ne": [523, 720, 1184], "more_expr": [527, 650, 653, 654, 655, 720], "mapping_strategi": [527, 720], "windowmappingstrategi": [527, 720], "group_to_row": [527, 720], "outcom": [527, 720], "group_dtyp": [527, 720], "warn": [527, 720], "flatten": [527, 720], "_max": [527, 720], "c_max": [527, 720], "_min": [527, 720], "c_min": [527, 720], "percent": [528, 720, 1056, 1184], "090909": [528, 720], "peak": [529, 530, 720, 1057, 1058, 1184], "extract_numb": [531, 720], "digit": [531, 558, 584, 720, 1081, 1106, 1112, 1184, 1192], "scale_negative_even": [531, 720], "expon": [532, 720, 1184], "allow_dupl": [535, 720, 1060, 1184], "duplicateerror": [535, 720, 732, 1060, 1184], "happen": [535, 720, 1060, 1184], "cut": [535, 720, 1060, 1184], "566371": [537, 720], "424778": [537, 720], "283185": [537, 720], "141593": [537, 720, 842, 1184], "rankmethod": [538, 720, 1062, 1184], "ti": [538, 720, 1062, 1184], "competit": [538, 720, 1062, 1184], "highest": [538, 636, 656, 720, 831, 1062, 1184], "immedi": [538, 647, 651, 664, 665, 667, 668, 679, 680, 693, 696, 702, 707, 708, 711, 720, 1062, 1184], "fruits_revers": [543, 720], "cars_revers": [543, 720], "rle": [545, 720, 1069, 1184], "themselv": [545, 720, 1069, 1184], "a_r": [545, 720], "ab_r": [545, 720], "window_s": [547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 697, 698, 720, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1184], "rolling_map": [547, 720, 1070, 1184], "multipli": [547, 548, 549, 550, 552, 555, 556, 557, 720, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1184], "rolling_sum": [548, 720, 1071, 1184], "nansum": [548, 720, 1071, 1184], "travers": [549, 550, 552, 556, 720, 1072, 1073, 1075, 1078, 1079, 1080, 1184], "vector": [549, 550, 552, 556, 720, 1072, 1073, 1075, 1078, 1079, 1080, 1184], "5h": [549, 550, 551, 552, 553, 555, 556, 557, 720], "df_tempor": [549, 550, 552, 555, 556, 557, 720], "closur": [549, 550, 555, 556, 557, 720], "rolling_row_max": [549, 720], "2h": [549, 550, 552, 555, 556, 557, 720], "rolling_row_mean": [550, 720], "rolling_row_min": [552, 720], "625": [553, 720], "skew": [554, 720, 1077, 1184], "381802": [554, 720, 1077, 1184], "47033": [554, 720, 1077, 1184], "38180177416060584": [554, 720, 1077, 1184], "47033046033698594": [554, 720, 1077, 1184], "433013": [555, 720, 797, 831], "rolling_row_std": [555, 720], "rolling_row_sum": [556, 720], "39": [556, 675, 720], "63": [556, 720], "69": [556, 720], "1875": [557, 720, 805, 831], "rolling_row_var": [557, 720], "searchsortedsid": [560, 720, 1083, 1184], "leftmost": [560, 720, 1083, 1184], "rightmost": [560, 720, 1083, 1184], "six": [560, 720], "extrema": [564, 720, 1091, 1184], "112": [564, 720, 1192], "129": [564, 720], "8589934592": [564, 720], "1073741824": [564, 720], "175201": [568, 720, 1096, 1184], "unimod": [569, 720, 1097, 1184], "skewtest": [569, 720, 1097, 1184], "speak": [569, 720, 1097, 1184], "g_1": [569, 720, 1097, 1184], "m_3": [569, 720, 1097, 1184], "m_2": [569, 720, 1097, 1184], "m_i": [569, 720, 1097, 1184], "sum_": [569, 720, 1097, 1184], "texttt": [569, 720, 1097, 1184], "k_3": [569, 720, 1097, 1184], "k_2": [569, 720, 1097, 1184], "sqrt": [569, 648, 649, 720, 1097, 1184], "343622": [569, 720], "value1": [572, 720], "value2": [572, 720], "attain": [572, 720], "414214": [573, 720, 1100, 1184], "sensit": [576, 584, 597, 1104, 1112, 1125], "ilmsuxu": [576, 583, 584, 597, 1104, 1111, 1112, 1125], "default_match": 576, "insensitive_match": 576, "crab": [576, 1104], "dog": [576, 616, 619, 655, 1104, 1144, 1147], "rab": [576, 1104], "success": [577, 578, 584, 1105, 1106, 1112], "overlap": [577, 578, 584, 1105, 1106, 1112], "bla": [578, 584, 1106, 1112], "asd": [578, 584, 1106, 1112], "678": [578, 584, 1106, 1112], "910t": [578, 584, 1106, 1112], "count_digit": 578, "dbc": [578, 1106], "3xy": [578, 1106], "1zy3": [578, 1106], "strings_hex": 580, "666f6f": [580, 1108], "626172": [580, 1108], "mango": [581, 605, 1109, 1133], "has_suffix": 581, "le": [581, 720, 1184], "nu": 581, "group_index": [583, 1111], "captur": [583, 585, 1111, 1113], "nthose": [583, 1111], "nodd": [583, 1111], "nthe": [583, 1111], "odd": 583, "vote": [583, 585, 1111, 1113], "ballon_dor": [583, 585, 1111, 1113], "404": [583, 585, 1111, 1113], "ref": [583, 585, 1111, 1113], "candid": [583, 585, 1111, 1113], "messi": [583, 585, 1111, 1113], "ronaldo": [583, 1111], "haystack": [584, 1112], "email": [584, 1112], "real": [584, 1112], "some_account": [584, 1112], "somewher": [584, 1112], "net": [584, 1112], "jkl": [584, 1112], "uvw": [584, 1112], "co": [584, 720, 1112, 1184], "uk": [584, 1112], "address": 584, "xi": [584, 1112], "insensit": [584, 597, 834, 1104, 1112, 1125], "quantifi": [584, 1112], "email_part": [584, 1112], "extracted_nr": 584, "910": [584, 1112], "unnam": [585, 1113], "weghorst": [585, 1113], "candi": 585, "json_path_match": [586, 1114], "jsonpath": [586, 587, 1114, 1115], "json_path": [587, 1115], "json_val": [587, 1115], "len_char": [588, 593, 1116, 1121], "_o": [588, 589, 1116, 1117], "caf\u00e9": [588, 589, 1116, 1117], "345": [588, 589, 1116, 1117], "\u6771\u4eac": [588, 589, 1116, 1117], "n_byte": [588, 589], "n_char": [588, 589], "fill_char": [591, 594, 595, 599, 1119, 1122, 1123, 1127], "justifi": [591, 599, 1119, 1127], "pad_end": [591, 595, 1119, 1123], "strip_chars_start": [592, 608, 610, 1120], "pad": [594, 595, 620, 1122, 1123, 1148], "reach": [594, 595, 620, 1122, 1123, 1148], "pad_start": [594, 599, 620, 1122, 1127, 1148], "cow": [594, 595, 1122, 1123], "monkei": [594, 595, 1122, 1123], "hippopotamu": [594, 595, 1122, 1123], "zfill": [595, 640, 720, 1123], "radix": [596, 1124], "parseerror": [596, 1124], "becom": [596, 1124], "silent": [596, 1124], "110": [596, 1124], "fa1e": [596, 1124], "ff00": [596, 1124], "cafe": [596, 1124], "64030": [596, 1124], "65280": [596, 1124], "51966": [596, 1124], "replace_al": [597, 1125], "citi": 597, "philadelphia": 597, "season": 597, "spring": 597, "summer": 597, "autumn": 597, "winter": 597, "weather": [597, 1125], "raini": [597, 1125], "sunni": [597, 1125], "cloudi": 597, "snowi": 597, "foggi": [597, 1125], "123abc": [597, 1125], "abc456": [597, 1125], "abcabc": [598, 1126], "123a123": [598, 1126], "bc": [598, 703, 1126], "strip_chars_end": [600, 609, 611, 1128], "subslic": [601, 1129], "pear": [601, 1129], "papaya": [601, 1129], "dragonfruit": [601, 1129], "s_slice": 601, "ear": [601, 1129], "aya": [601, 1129], "uit": [601, 1129], "ya": [601, 1129], "onf": [601, 1129], "foo_bar_baz": 602, "split_inclus": 602, "foo_": [602, 674], "bar_": 602, "a_1": [603, 1131, 1161, 1184], "d_4": [603, 1131], "rename_field": [603, 604, 887, 1060, 1131, 1132, 1184], "first_part": [603, 604, 1131, 1132], "second_part": [603, 604, 1131, 1132], "remaind": [604, 1132], "app": [605, 1133], "has_prefix": 605, "strip_char": [606, 1134], "nworld": 607, "foo_strip": 607, "ow": 607, "hell": [607, 1135], "rld": [607, 609, 1137], "word": [608, 609], "strip_suffix": [608, 610], "foo_strip_end": 608, "oldw": 608, "he": 608, "abcdeff": 608, "fed": 608, "strip_prefix": [609, 611], "tworld": [609, 1135, 1137], "foo_strip_start": 609, "wod": [609, 1137], "aabcdef": 609, "cba": 609, "foobar": [610, 611, 1138, 1139], "foofoobar": [610, 1138], "foobarbar": [611, 1139], "polarstemporaltyp": [612, 1140], "penalti": [612, 613, 614, 1140, 1141, 1142], "clean": [612, 613, 614, 1140, 1141, 1142], "beforehand": [612, 613, 614, 1140, 1141, 1142], "certainli": [612, 613, 614, 1140, 1141, 1142], "3f": [612, 614, 1140, 1142], "00z": [612, 614, 1140, 1142], "sun": [612, 1140], "jul": [612, 1140], "34": [612, 1140], "inference_length": [615, 1143], "3420": [615, 1143], "120134": [615, 1143], "3212": [615, 1143], "90": [615, 1143], "143": [615, 1143, 1192], "numbers_decim": 615, "variant": [616, 618, 619], "foo_low": 616, "titlecas": [618, 1146], "sing": [618, 1146], "welcom": [618, 1146], "THERE": [618, 1146], "NO": [618, 834, 1146], "foo_titl": 618, "There": [618, 1146], "foo_upp": 619, "999999": [620, 666, 706, 707, 708, 834, 1148], "0123": [620, 1148], "cd": [621, 622], "struct_col": [621, 622], "www": 622, "xxx": 622, "yyi": 622, "zzz": 622, "obvious": 622, "structfieldnotfounderror": [622, 732], "761594": [630, 720, 1159, 1184], "replic": [631, 720, 1167, 1184], "vals_phys": [631, 720], "floordiv": [633, 720], "ieee": [633, 720], "754": [633, 720], "mathemat": [633, 670, 720], "undefin": [633, 720], "On": [633, 720], "operand": [633, 720], "infin": [633, 720], "value_count": [635, 720, 1184], "9223372036854775807": [636, 720], "binary_str": [640, 720], "250": [640, 720, 1073, 1184, 1192], "bin_x": [640, 720], "bin_i": [640, 720], "xor_xi": [640, 720], "bin_xor_xi": [640, 720], "00001010": [640, 720], "00001011": [640, 720], "00001000": [640, 720], "00000010": [640, 720], "11111010": [640, 720], "00000011": [640, 720], "249": [640, 720], "11111001": [640, 720], "01000010": [640, 720], "00000100": [640, 720], "70": [640, 720], "01000110": [640, 720], "AND": [641, 642, 834, 1165, 1184], "OR": [643, 644, 754, 831, 834], "any_horizont": 643, "returns_scalar": [645, 685, 720], "polarsintegertyp": [647, 679, 680], "arctan": [648, 649, 720, 1184], "angl": [648, 649], "plane": [648, 649], "rai": [648, 649], "tworoottwo": [648, 649], "arctan2d": 648, "atan2d": [648, 649], "atan2": [648, 649], "135": [648, 649], "356194": [648, 649], "arctan2": 649, "arg_tru": [651, 720, 1184], "mimic": 654, "a_lag_": 654, "a_rol": 654, "swim": 655, "walk": 655, "full_sent": 655, "correlationmethod": 656, "propagate_nan": 656, "spearman": 656, "544705": 656, "covari": [658, 698, 720], "acc": [659, 660, 673, 695], "include_init": 659, "accumul": [659, 660, 673, 695], "fn": [659, 660, 673, 695], "new_valu": [659, 660, 673, 695], "cumreduc": 659, "cumsum_horizont": 661, "granular": 664, "finer": 664, "permut": 664, "1985": [664, 667], "america": 667, "new_york": 667, "est": 667, "contrast": 669, "offset_bi": 669, "sometim": [669, 719], "tbl_width_char": 669, "120": 669, "add_week": 669, "add_dai": 669, "add_second": 669, "add_milli": 669, "add_hour": 669, "add_calendar_dai": 669, "add_calendar_month": 669, "mo": 669, "add_calendar_year": 669, "2024": [669, 834], "a_b_doubl": 670, "f_string": 674, "placehold": 674, "hello_": 674, "_world": 674, "_bar_": 674, "foo_a_bar_1": 674, "foo_b_bar_2": 674, "foo_c_bar_3": 674, "epoch": 675, "timestep": 675, "1666683077": 675, "1666683099": 675, "12345": [675, 872, 960, 1081, 1184], "12346": 675, "agg_group": [676, 720], "allow_object": 682, "valueexcept": 682, "test_func": 684, "list_of_seri": 685, "my_custom_aggreg": 685, "understood": 685, "max_horizont": 686, "min_horizont": [690, 699], "power": [700, 1184], "a_a": 700, "a_txt": 700, "605551": 701, "605551275463989": 701, "my_struct": 702, "thens": 710, "elif": 710, "pick": 710, "own": [710, 1192], "isn": 710, "arr": [712, 1165, 1176, 1184], "technic": 716, "further": [716, 1166, 1184], "columnfactori": 716, "more_nam": 716, "__call__": 716, "helper": 716, "__getattr__": 716, "idiomat": [716, 819], "quick": [716, 888, 1184, 1192], "prototyp": 716, "keystrok": 716, "drawback": 716, "readabl": 716, "modul": [719, 834, 1192], "and_": 720, "arcco": [720, 1184], "arccosh": [720, 1184], "arcsin": [720, 1184], "arcsinh": [720, 1184], "arctanh": [720, 1184], "arg_max": [720, 1184], "arg_min": [720, 1184], "arg_sort": [720, 1184], "arg_uniqu": [720, 1184], "backward_fil": 720, "cbrt": [720, 1184], "clip_max": [720, 1184], "clip_min": [720, 1184], "cosh": [720, 1184], "cot": [720, 1184], "cumcount": 720, "cummax": [720, 1184], "cummin": [720, 1184], "cumulative_ev": [720, 1184], "entropi": [720, 1184], "eq_miss": [720, 1184], "ewm_mean": [720, 1184], "ewm_std": [720, 1184], "ewm_var": [720, 1184], "extend_const": [720, 1184], "from_json": [720, 831], "ge": [720, 1184], "gt": [720, 1184], "implod": [720, 1184], "inspect": [720, 831], "is_between": [720, 1184], "is_finit": [720, 1184], "is_first": [720, 1184], "is_infinit": [720, 1184], "is_last": [720, 1184], "is_nan": [720, 1184], "is_not": 720, "is_not_nan": [720, 1184], "is_not_nul": [720, 1184], "kurtosi": [720, 1184], "log10": [720, 1184], "log1p": [720, 1184], "map_alia": 720, "mod": 720, "mul": 720, "nan_max": [720, 1184], "nan_min": [720, 1184], "ne_miss": [720, 1184], "or_": 720, "pct_chang": [720, 1184], "peak_max": [720, 1184], "peak_min": [720, 1184], "pow": [720, 1184], "register_plugin": 720, "lib": [720, 1160, 1184], "is_elementwis": 720, "input_wildcard_expans": 720, "cast_to_supertyp": 720, "pass_name_to_appli": 720, "changes_length": 720, "plugin": 720, "highli": 720, "unsaf": 720, "unstabl": 720, "serializ": 720, "ran": 720, "reinterpret": [720, 1184], "repeat_bi": 720, "rle_id": [720, 1184], "rolling_appli": [720, 1184], "rolling_max": [720, 1184], "rolling_mean": [720, 1184], "rolling_median": [720, 1184], "rolling_min": [720, 1184], "rolling_quantil": [720, 1184], "rolling_skew": [720, 1184], "rolling_std": [720, 1184], "rolling_var": [720, 1184], "search_sort": [720, 1184], "shrink_dtyp": [720, 1184], "sin": [720, 1184], "sinh": [720, 1184], "sort_bi": 720, "tan": [720, 1184], "to_phys": [720, 869, 1184], "unique_count": [720, 1184], "xor": 720, "expos": 732, "miscellan": 732, "arrowerror": 732, "columnnotfounderror": 732, "invalidoperationerror": 732, "polarspanicerror": 732, "schemaerror": 732, "schemafieldnotfounderror": 732, "shapeerror": 732, "parametr": 732, "build_info": 732, "get_index_typ": 732, "show_vers": 732, "threadpool_s": 732, "sqlcontext": [732, 1191], "hit": [738, 831], "node": [738, 742, 764, 771, 772, 776, 781, 784, 831], "_eager": [742, 831], "explain": [742, 831], "purpos": [742, 751, 831], "set_streaming_chunk_s": [742, 831], "collect_all_async": [743, 831], "async": [743, 831], "stringio": [745, 756, 790, 831], "snippet": [747, 831], "Be": [751, 831], "fewer": [751, 831], "suscept": [751, 831], "deseri": [756, 783, 790, 831], "lazygroupbi": [757, 758, 759, 760, 761, 762, 786, 831], "other_lf": [766, 831], "validate_output_schema": [771, 772, 831], "streamabl": [771, 772, 776, 831], "past": [771, 772, 831], "paramount": [771, 772, 831], "elig": [771, 772, 831], "invari": [772, 831], "upheld": [772, 831], "100_000": [772, 831], "200000": [772, 831], "199998": [772, 831], "199996": [772, 831], "199994": [772, 831], "199992": [772, 831], "show_plot": [781, 831], "truncate_nod": [781, 831], "figsiz": [781, 794, 831], "gantt": [781, 831], "plot": [781, 794, 831], "group_by_partit": [781, 831], "470": [781, 831], "475": [781, 831], "1964": [781, 831], "swap": [784, 831], "dynamic_group_bi": [786, 831], "dataframescan": [790, 831], "output_schema": [790, 831], "run_parallel": [790, 831], "duplicate_check": [790, 831], "later": [790, 831], "output_path": [794, 831], "raw_output": [794, 831], "figur": [794, 831], "290994": [797, 831], "118034": [797, 831], "implicit": [804, 831], "new_lf": [804, 831], "extern": [809, 831], "lf_other": [809, 831], "afoo": [809, 831], "cfoo": [809, 831], "train_lf": [809, 831], "feature_0": [809, 831], "feature_1": [809, 831], "test_lf": [809, 831], "_train": [809, 831], "feature_0_train": [809, 831], "opaqu": 819, "my_column": 819, "lf5": 831, "lf6": 831, "read_json": 831, "sink_csv": 831, "sink_ipc": 831, "sink_parquet": 831, "with_context": 831, "intuit": 834, "broadcast": 834, "emploi": 834, "complement": 834, "plenti": 834, "cde": 834, "fgg": 834, "jjk": 834, "lmn": 834, "opp": 834, "qqr": 834, "by_dtyp": 834, "as_expr": 834, "dispatch": 834, "1_234_500": 834, "5_000_555": 834, "1234500": 834, "5000555": 834, "by_nam": 834, "4_500_000": 834, "4500000": 834, "3265500": 834, "zap": 834, "2031": 834, "tstamp_tokyo": 834, "123465": 834, "tstamp_utc": 834, "2025": 834, "666000": 834, "tstamp": 834, "600000": 834, "123000": 834, "666": 834, "td1": 834, "987000": 834, "td2": 834, "td3": 834, "2m": [834, 916], "456m": 834, "7d": 834, "456789\u00b5": 834, "18d": 834, "999999\u00b5": 834, "23h": 834, "987m": 834, "14d": 834, "16h": 834, "39m": 834, "21d": 834, "456001\u00b5": 834, "expand_selector": 834, "colz": [834, 1192], "everyth": 834, "signed_integ": 834, "unsigned_integ": 834, "is_selector": 834, "obj": 834, "_selector_proxy_": 834, "include_categor": 834, "set_ord": [834, 870], "2345": 834, "3456": 834, "append_chunk": [840, 1184], "super": [840, 1184], "292432": [843, 1184], "549306": [847, 1184], "catnamespac": 865, "56789": [872, 960, 1081, 1184], "901234": [872, 960, 1081, 1184], "1232e": [879, 881, 1184], "1656e15": [881, 1184], "break_point_label": [887, 1060, 1184], "break_point": [887, 965, 1060, 1184], "category_label": [887, 1060, 1184], "series_num": [888, 1184], "581139": [888, 1184], "series_str": [888, 1184], "datetimeindex": [890, 1184], "datetimenamespac": 893, "ser": [898, 899, 931], "kathmandu": [898, 899, 931], "0545": [898, 899, 931], "500m": [911, 913, 921], "500000": 911, "500000000": 921, "date_minus_1y_2mon": 923, "165": [927, 941], "series_equ": [927, 1184], "timestamp_u": 932, "978307200000000000": 932, "978393600000000000": 932, "978480000000000000": 932, "005": [947, 1184], "06293300616044681": [947, 1184], "65": [947, 1184], "8568409950394724": [947, 1184], "4000000": [948, 1184], "814697265625": [948, 1184], "bitmask": [962, 1184], "absenc": [962, 1184], "presenc": [962, 1165, 1184], "confirm": [962, 1184], "10734580197236529959": [963, 1184], "3022416320763508302": [963, 1184], "13756996518000038261": [963, 1184], "bin_count": [965, 1184], "a_count": [965, 1184], "listnamespac": 995, "field_2": 1034, "n00": 1034, "n01": 1034, "n02": 1034, "2147483648": [1040, 1184], "iso3166": [1041, 1184], "tur": [1041, 1146, 1184], "jpn": [1041, 1184], "nld": [1041, 1184], "country_lookup": [1041, 1184], "japan": [1041, 1184], "t\u00fcrkiy": [1041, 1184], "netherland": [1041, 1184], "unrecognis": [1041, 1184], "unspecifi": [1041, 1184], "country_nam": [1041, 1184], "166667": [1056, 1184], "142857": [1056, 1184], "200": [1072, 1073, 1075, 1184], "150": [1073, 1184], "350": [1073, 1184], "450": [1073, 1184], "dev": [1078, 1184], "527525": [1078, 1184], "57": [1081, 1184, 1192], "frequent": [1085, 1086, 1184], "mutat": [1086, 1184], "2246e": [1095, 1158, 1184], "stringnamespac": 1102, "orld": 1136, "6331e16": [1158, 1184], "int64arrai": [1160, 1184], "a_2": [1161, 1184], "a_3": [1161, 1184], "s_from_str_repr": [1163, 1184], "zero_copy_onli": [1165, 1184], "writabl": [1165, 1184], "immut": [1165, 1184], "127": [1171, 1184], "seriesview": [1174, 1184], "arraylik": 1184, "dtype_if_empti": 1184, "position": 1184, "scenario": 1184, "chunk_length": 1184, "get_chunk": 1184, "has_valid": 1184, "hist": 1184, "is_boolean": 1184, "is_float": 1184, "is_integ": 1184, "is_numer": [1184, 1192], "is_sort": 1184, "is_tempor": 1184, "is_utf8": 1184, "new_from_index": 1184, "set_at_idx": 1184, "two_a": 1191, "__enter__": 1191, "__exit__": 1191, "exc_typ": 1191, "baseexcept": 1191, "exc_val": 1191, "exc_tb": 1191, "tracebacktyp": 1191, "primari": 1192, "guid": 1192, "machin": 1192, "xdist": 1192, "hardwar": 1192, "setup": 1192, "sec": 1192, "numeric_dtyp": 1192, "null_probabililti": 1192, "test_numer": 1192, "col0": 1192, "col4": 1192, "29096": 1192, "485": 1192, "2147483647": 1192, "8257e14": 1192, "7508": 1192, "37338": 1192, "7264": 1192, "16996": 1192, "121": 1192, "361": 1192, "63204": 1192, "1443e235": 1192, "conform": 1192, "ascii_lett": 1192, "id_char": 1192, "alphabet": 1192, "price": 1192, "min_valu": 1192, "max_valu": 1192, "test_price_calcul": 1192, "a101": 1192, "8nin": 1192, "qhoo": 1192, "714": 1192, "544": 1192, "i0e0": 1192, "0000": 1192, "test_miscellan": 1192, "235": 1192, "87": 1192, "186": 1192, "174": 1192, "179": 1192, "213": 1192, "221": 1192, "86": 1192, "255": 1192}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Float32"], [52, 0, 1, "", "Float64"], [53, 0, 1, "", "Int16"], [54, 0, 1, "", "Int32"], [55, 0, 1, "", "Int64"], [56, 0, 1, "", "Int8"], [60, 0, 1, "", "List"], [61, 0, 1, "", "Null"], [62, 0, 1, "", "Object"], [1191, 0, 1, "", "SQLContext"], [69, 0, 1, "", "StringCache"], [70, 0, 1, "", "Struct"], [71, 0, 1, "", "Time"], [72, 0, 1, "", "UInt16"], [73, 0, 1, "", "UInt32"], [74, 0, 1, "", "UInt64"], [75, 0, 1, "", "UInt8"], [76, 0, 1, "", "Unknown"], [77, 0, 1, "", "Utf8"], [78, 4, 1, "", "align_frames"], [641, 4, 1, "", "all"], [642, 4, 1, "", "all_horizontal"], [643, 4, 1, "", "any"], [644, 4, 1, "", "any_horizontal"], [645, 4, 1, "", "apply"], [646, 4, 1, "", "approx_n_unique"], [647, 4, 1, "", "arange"], [648, 4, 1, "", "arctan2"], [649, 4, 1, "", "arctan2d"], [650, 4, 1, "", "arg_sort_by"], [651, 4, 1, "", "arg_where"], [652, 4, 1, "", "avg"], [83, 4, 1, "", "build_info"], [653, 4, 1, "", "coalesce"], [84, 4, 1, "", "collect_all"], [85, 4, 1, "", "collect_all_async"], [86, 4, 1, "", "concat"], [654, 4, 1, "", "concat_list"], [655, 4, 1, "", "concat_str"], [656, 4, 1, "", "corr"], [657, 4, 1, "", "count"], [658, 4, 1, "", "cov"], [659, 4, 1, "", "cumfold"], [660, 4, 1, "", "cumreduce"], [661, 4, 1, "", "cumsum"], [662, 4, 1, "", "cumsum_horizontal"], [663, 4, 1, "", "date"], [664, 4, 1, "", "date_range"], [665, 4, 1, "", "date_ranges"], [666, 4, 1, "", "datetime"], [667, 4, 1, "", "datetime_range"], [668, 4, 1, "", "datetime_ranges"], [87, 4, 1, "", "disable_string_cache"], [669, 4, 1, "", "duration"], [670, 4, 1, "", "element"], [88, 4, 1, "", "enable_string_cache"], [671, 4, 1, "", "exclude"], [672, 4, 1, "", "first"], [673, 4, 1, "", "fold"], [674, 4, 1, "", "format"], [103, 4, 1, "", "from_arrow"], [104, 4, 1, "", "from_dataframe"], [105, 4, 1, "", "from_dict"], [106, 4, 1, "", "from_dicts"], [675, 4, 1, "", "from_epoch"], [107, 4, 1, "", "from_numpy"], [108, 4, 1, "", "from_pandas"], [109, 4, 1, "", "from_records"], [110, 4, 1, "", "from_repr"], [111, 4, 1, "", "get_index_type"], [676, 4, 1, "", "groups"], [677, 4, 1, "", "head"], [678, 4, 1, "", "implode"], [679, 4, 1, "", "int_range"], [680, 4, 1, "", "int_ranges"], [681, 4, 1, "", "last"], [682, 4, 1, "", "lit"], [683, 4, 1, "", "map"], [684, 4, 1, "", "map_batches"], [685, 4, 1, "", "map_groups"], [686, 4, 1, "", "max"], [687, 4, 1, "", "max_horizontal"], [688, 4, 1, "", "mean"], [689, 4, 1, "", "median"], [690, 4, 1, "", "min"], [691, 4, 1, "", "min_horizontal"], [692, 4, 1, "", "n_unique"], [693, 4, 1, "", "ones"], [694, 4, 1, "", "quantile"], [113, 4, 1, "", "read_avro"], [114, 4, 1, "", "read_csv"], [115, 4, 1, "", "read_csv_batched"], [116, 4, 1, "", "read_database"], [117, 4, 1, "", "read_database_uri"], [118, 4, 1, "", "read_delta"], [119, 4, 1, "", "read_excel"], [120, 4, 1, "", "read_ipc"], [121, 4, 1, "", "read_ipc_schema"], [122, 4, 1, "", "read_ipc_stream"], [123, 4, 1, "", "read_json"], [124, 4, 1, "", "read_ndjson"], [125, 4, 1, "", "read_ods"], [126, 4, 1, "", "read_parquet"], [127, 4, 1, "", "read_parquet_schema"], [695, 4, 1, "", "reduce"], [696, 4, 1, "", "repeat"], [697, 4, 1, "", "rolling_corr"], [698, 4, 1, "", "rolling_cov"], [128, 4, 1, "", "scan_csv"], [129, 4, 1, "", "scan_delta"], [130, 4, 1, "", "scan_iceberg"], [131, 4, 1, "", "scan_ipc"], [132, 4, 1, "", "scan_ndjson"], [133, 4, 1, "", "scan_parquet"], [134, 4, 1, "", "scan_pyarrow_dataset"], [699, 4, 1, "", "select"], [834, 6, 0, "-", "selectors"], [135, 4, 1, "", "set_random_seed"], [136, 4, 1, "", "show_versions"], [700, 4, 1, "", "sql_expr"], [701, 4, 1, "", "std"], [702, 4, 1, "", "struct"], [703, 4, 1, "", "sum"], [704, 4, 1, "", "sum_horizontal"], [705, 4, 1, "", "tail"], [148, 4, 1, "", "threadpool_size"], [706, 4, 1, "", "time"], [707, 4, 1, "", "time_range"], [708, 4, 1, "", "time_ranges"], [149, 4, 1, "", "using_string_cache"], [709, 4, 1, "", "var"], [710, 4, 1, "", "when"], [711, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[152, 1, 1, "", "__dataframe__"], [153, 1, 1, "", "apply"], [154, 1, 1, "", "approx_n_unique"], [155, 1, 1, "", "approx_unique"], [156, 1, 1, "", "bottom_k"], [157, 1, 1, "", "cast"], [158, 1, 1, "", "clear"], [159, 1, 1, "", "clone"], [160, 2, 1, "", "columns"], [161, 1, 1, "", "corr"], [162, 1, 1, "", "describe"], [163, 1, 1, "", "drop"], [164, 1, 1, "", "drop_in_place"], [165, 1, 1, "", "drop_nulls"], [166, 2, 1, "", "dtypes"], [167, 1, 1, "", "estimated_size"], [168, 1, 1, "", "explode"], [169, 1, 1, "", "extend"], [170, 1, 1, "", "fill_nan"], [171, 1, 1, "", "fill_null"], [172, 1, 1, "", "filter"], [173, 1, 1, "", "find_idx_by_name"], [174, 2, 1, "", "flags"], [175, 1, 1, "", "fold"], [176, 1, 1, "", "frame_equal"], [177, 1, 1, "", "get_column"], [178, 1, 1, "", "get_columns"], [179, 1, 1, "", "glimpse"], [180, 1, 1, "", "group_by"], [181, 1, 1, "", "group_by_dynamic"], [182, 1, 1, "", "group_by_rolling"], [183, 1, 1, "", "groupby"], [184, 1, 1, "", "groupby_dynamic"], [185, 1, 1, "", "groupby_rolling"], [186, 1, 1, "", "hash_rows"], [187, 1, 1, "", "head"], [188, 2, 1, "", "height"], [189, 1, 1, "", "hstack"], [190, 1, 1, "", "insert_at_idx"], [191, 1, 1, "", "interpolate"], [192, 1, 1, "", "is_duplicated"], [193, 1, 1, "", "is_empty"], [194, 1, 1, "", "is_unique"], [195, 1, 1, "", "item"], [196, 1, 1, "", "iter_rows"], [197, 1, 1, "", "iter_slices"], [198, 1, 1, "", "join"], [199, 1, 1, "", "join_asof"], [200, 1, 1, "", "lazy"], [201, 1, 1, "", "limit"], [202, 1, 1, "", "map_rows"], [203, 1, 1, "", "max"], [204, 1, 1, "", "mean"], [205, 1, 1, "", "median"], [206, 1, 1, "", "melt"], [207, 1, 1, "", "merge_sorted"], [208, 1, 1, "", "min"], [209, 1, 1, "", "n_chunks"], [210, 1, 1, "", "n_unique"], [211, 1, 1, "", "null_count"], [212, 1, 1, "", "partition_by"], [213, 1, 1, "", "pipe"], [214, 1, 1, "", "pivot"], [215, 1, 1, "", "product"], [216, 1, 1, "", "quantile"], [217, 1, 1, "", "rechunk"], [218, 1, 1, "", "rename"], [219, 1, 1, "", "replace"], [220, 1, 1, "", "replace_at_idx"], [221, 1, 1, "", "reverse"], [222, 1, 1, "", "rolling"], [223, 1, 1, "", "row"], [224, 1, 1, "", "rows"], [225, 1, 1, "", "rows_by_key"], [226, 1, 1, "", "sample"], [227, 2, 1, "", "schema"], [228, 1, 1, "", "select"], [229, 1, 1, "", "select_seq"], [230, 1, 1, "", "set_sorted"], [231, 2, 1, "", "shape"], [232, 1, 1, "", "shift"], [233, 1, 1, "", "shift_and_fill"], [234, 1, 1, "", "shrink_to_fit"], [235, 1, 1, "", "slice"], [236, 1, 1, "", "sort"], [237, 1, 1, "", "std"], [238, 1, 1, "", "sum"], [239, 1, 1, "", "tail"], [240, 1, 1, "", "take_every"], [241, 1, 1, "", "to_arrow"], [242, 1, 1, "", "to_dict"], [243, 1, 1, "", "to_dicts"], [244, 1, 1, "", "to_dummies"], [245, 1, 1, "", "to_init_repr"], [246, 1, 1, "", "to_numpy"], [247, 1, 1, "", "to_pandas"], [248, 1, 1, "", "to_series"], [249, 1, 1, "", "to_struct"], [250, 1, 1, "", "top_k"], [251, 1, 1, "", "transpose"], [252, 1, 1, "", "unique"], [253, 1, 1, "", "unnest"], [254, 1, 1, "", "unstack"], [255, 1, 1, "", "update"], [256, 1, 1, "", "upsample"], [257, 1, 1, "", "var"], [258, 1, 1, "", "vstack"], [259, 2, 1, "", "width"], [260, 1, 1, "", "with_columns"], [261, 1, 1, "", "with_columns_seq"], [262, 1, 1, "", "with_row_count"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Expr": [[291, 1, 1, "", "abs"], [292, 1, 1, "", "add"], [293, 1, 1, "", "agg_groups"], [294, 1, 1, "", "alias"], [295, 1, 1, "", "all"], [296, 1, 1, "", "and_"], [297, 1, 1, "", "any"], [298, 1, 1, "", "append"], [299, 1, 1, "", "apply"], [300, 1, 1, "", "approx_n_unique"], [301, 1, 1, "", "arccos"], [302, 1, 1, "", "arccosh"], [303, 1, 1, "", "arcsin"], [304, 1, 1, "", "arcsinh"], [305, 1, 1, "", "arctan"], [306, 1, 1, "", "arctanh"], [307, 1, 1, "", "arg_max"], [308, 1, 1, "", "arg_min"], [309, 1, 1, "", "arg_sort"], [310, 1, 1, "", "arg_true"], [311, 1, 1, "", "arg_unique"], [317, 1, 1, "", "backward_fill"], [323, 1, 1, "", "bottom_k"], [324, 1, 1, "", "cache"], [325, 1, 1, "", "cast"], [328, 1, 1, "", "cbrt"], [329, 1, 1, "", "ceil"], [330, 1, 1, "", "clip"], [331, 1, 1, "", "clip_max"], [332, 1, 1, "", "clip_min"], [333, 1, 1, "", "cos"], [334, 1, 1, "", "cosh"], [335, 1, 1, "", "cot"], [336, 1, 1, "", "count"], [337, 1, 1, "", "cumcount"], [338, 1, 1, "", "cummax"], [339, 1, 1, "", "cummin"], [340, 1, 1, "", "cumprod"], [341, 1, 1, "", "cumsum"], [342, 1, 1, "", "cumulative_eval"], [343, 1, 1, "", "cut"], [344, 1, 1, "", "degrees"], [345, 1, 1, "", "diff"], [346, 1, 1, "", "dot"], [347, 1, 1, "", "drop_nans"], [348, 1, 1, "", "drop_nulls"], [397, 1, 1, "", "entropy"], [398, 1, 1, "", "eq"], [399, 1, 1, "", "eq_missing"], [400, 1, 1, "", "ewm_mean"], [401, 1, 1, "", "ewm_std"], [402, 1, 1, "", "ewm_var"], [403, 1, 1, "", "exclude"], [404, 1, 1, "", "exp"], [405, 1, 1, "", "explode"], [406, 1, 1, "", "extend_constant"], [407, 1, 1, "", "fill_nan"], [408, 1, 1, "", "fill_null"], [409, 1, 1, "", "filter"], [410, 1, 1, "", "first"], [411, 1, 1, "", "flatten"], [412, 1, 1, "", "floor"], [413, 1, 1, "", "floordiv"], [414, 1, 1, "", "forward_fill"], [415, 1, 1, "", "from_json"], [416, 1, 1, "", "ge"], [417, 1, 1, "", "get"], [418, 1, 1, "", "gt"], [419, 1, 1, "", "hash"], [420, 1, 1, "", "head"], [421, 1, 1, "", "implode"], [422, 1, 1, "", "inspect"], [423, 1, 1, "", "interpolate"], [424, 1, 1, "", "is_between"], [425, 1, 1, "", "is_duplicated"], [426, 1, 1, "", "is_finite"], [427, 1, 1, "", "is_first"], [428, 1, 1, "", "is_first_distinct"], [429, 1, 1, "", "is_in"], [430, 1, 1, "", "is_infinite"], [431, 1, 1, "", "is_last"], [432, 1, 1, "", "is_last_distinct"], [433, 1, 1, "", "is_nan"], [434, 1, 1, "", "is_not"], [435, 1, 1, "", "is_not_nan"], [436, 1, 1, "", "is_not_null"], [437, 1, 1, "", "is_null"], [438, 1, 1, "", "is_unique"], [439, 1, 1, "", "keep_name"], [440, 1, 1, "", "kurtosis"], [441, 1, 1, "", "last"], [442, 1, 1, "", "le"], [443, 1, 1, "", "len"], [444, 1, 1, "", "limit"], [486, 1, 1, "", "log"], [487, 1, 1, "", "log10"], [488, 1, 1, "", "log1p"], [489, 1, 1, "", "lower_bound"], [490, 1, 1, "", "lt"], [491, 1, 1, "", "map"], [492, 1, 1, "", "map_alias"], [493, 1, 1, "", "map_batches"], [494, 1, 1, "", "map_dict"], [495, 1, 1, "", "map_elements"], [496, 1, 1, "", "max"], [497, 1, 1, "", "mean"], [498, 1, 1, "", "median"], [509, 1, 1, "", "min"], [510, 1, 1, "", "mod"], [511, 1, 1, "", "mode"], [512, 1, 1, "", "mul"], [513, 1, 1, "", "n_unique"], [520, 1, 1, "", "nan_max"], [521, 1, 1, "", "nan_min"], [522, 1, 1, "", "ne"], [523, 1, 1, "", "ne_missing"], [524, 1, 1, "", "not_"], [525, 1, 1, "", "null_count"], [526, 1, 1, "", "or_"], [527, 1, 1, "", "over"], [528, 1, 1, "", "pct_change"], [529, 1, 1, "", "peak_max"], [530, 1, 1, "", "peak_min"], [531, 1, 1, "", "pipe"], [532, 1, 1, "", "pow"], [533, 1, 1, "", "prefix"], [534, 1, 1, "", "product"], [535, 1, 1, "", "qcut"], [536, 1, 1, "", "quantile"], [537, 1, 1, "", "radians"], [538, 1, 1, "", "rank"], [539, 1, 1, "", "rechunk"], [540, 1, 1, "", "reinterpret"], [541, 1, 1, "", "repeat_by"], [542, 1, 1, "", "reshape"], [543, 1, 1, "", "reverse"], [544, 1, 1, "", "rle"], [545, 1, 1, "", "rle_id"], [546, 1, 1, "", "rolling"], [547, 1, 1, "", "rolling_apply"], [548, 1, 1, "", "rolling_map"], [549, 1, 1, "", "rolling_max"], [550, 1, 1, "", "rolling_mean"], [551, 1, 1, "", "rolling_median"], [552, 1, 1, "", "rolling_min"], [553, 1, 1, "", "rolling_quantile"], [554, 1, 1, "", "rolling_skew"], [555, 1, 1, "", "rolling_std"], [556, 1, 1, "", "rolling_sum"], [557, 1, 1, "", "rolling_var"], [558, 1, 1, "", "round"], [559, 1, 1, "", "sample"], [560, 1, 1, "", "search_sorted"], [561, 1, 1, "", "set_sorted"], [562, 1, 1, "", "shift"], [563, 1, 1, "", "shift_and_fill"], [564, 1, 1, "", "shrink_dtype"], [565, 1, 1, "", "shuffle"], [566, 1, 1, "", "sign"], [567, 1, 1, "", "sin"], [568, 1, 1, "", "sinh"], [569, 1, 1, "", "skew"], [570, 1, 1, "", "slice"], [571, 1, 1, "", "sort"], [572, 1, 1, "", "sort_by"], [573, 1, 1, "", "sqrt"], [574, 1, 1, "", "std"], [623, 1, 1, "", "sub"], [624, 1, 1, "", "suffix"], [625, 1, 1, "", "sum"], [626, 1, 1, "", "tail"], [627, 1, 1, "", "take"], [628, 1, 1, "", "take_every"], [629, 1, 1, "", "tan"], [630, 1, 1, "", "tanh"], [631, 1, 1, "", "to_physical"], [632, 1, 1, "", "top_k"], [633, 1, 1, "", "truediv"], [634, 1, 1, "", "unique"], [635, 1, 1, "", "unique_counts"], [636, 1, 1, "", "upper_bound"], [637, 1, 1, "", "value_counts"], [638, 1, 1, "", "var"], [639, 1, 1, "", "where"], [640, 1, 1, "", "xor"]], "polars.Expr.arr": [[312, 1, 1, "", "max"], [313, 1, 1, "", "min"], [314, 1, 1, "", "sum"], [315, 1, 1, "", "to_list"], [316, 1, 1, "", "unique"]], "polars.Expr.bin": [[318, 1, 1, "", "contains"], [319, 1, 1, "", "decode"], [320, 1, 1, "", "encode"], [321, 1, 1, "", "ends_with"], [322, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[326, 1, 1, "", "get_categories"], [327, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[349, 1, 1, "", "base_utc_offset"], [350, 1, 1, "", "cast_time_unit"], [351, 1, 1, "", "combine"], [352, 1, 1, "", "convert_time_zone"], [353, 1, 1, "", "date"], [354, 1, 1, "", "datetime"], [355, 1, 1, "", "day"], [356, 1, 1, "", "days"], [357, 1, 1, "", "dst_offset"], [358, 1, 1, "", "epoch"], [359, 1, 1, "", "hour"], [360, 1, 1, "", "hours"], [361, 1, 1, "", "is_leap_year"], [362, 1, 1, "", "iso_year"], [363, 1, 1, "", "microsecond"], [364, 1, 1, "", "microseconds"], [365, 1, 1, "", "millisecond"], [366, 1, 1, "", "milliseconds"], [367, 1, 1, "", "minute"], [368, 1, 1, "", "minutes"], [369, 1, 1, "", "month"], [370, 1, 1, "", "month_end"], [371, 1, 1, "", "month_start"], [372, 1, 1, "", "nanosecond"], [373, 1, 1, "", "nanoseconds"], [374, 1, 1, "", "offset_by"], [375, 1, 1, "", "ordinal_day"], [376, 1, 1, "", "quarter"], [377, 1, 1, "", "replace_time_zone"], [378, 1, 1, "", "round"], [379, 1, 1, "", "second"], [380, 1, 1, "", "seconds"], [381, 1, 1, "", "strftime"], [382, 1, 1, "", "time"], [383, 1, 1, "", "timestamp"], [384, 1, 1, "", "to_string"], [385, 1, 1, "", "total_days"], [386, 1, 1, "", "total_hours"], [387, 1, 1, "", "total_microseconds"], [388, 1, 1, "", "total_milliseconds"], [389, 1, 1, "", "total_minutes"], [390, 1, 1, "", "total_nanoseconds"], [391, 1, 1, "", "total_seconds"], [392, 1, 1, "", "truncate"], [393, 1, 1, "", "week"], [394, 1, 1, "", "weekday"], [395, 1, 1, "", "with_time_unit"], [396, 1, 1, "", "year"]], "polars.Expr.list": [[445, 1, 1, "", "all"], [446, 1, 1, "", "any"], [447, 1, 1, "", "arg_max"], [448, 1, 1, "", "arg_min"], [449, 1, 1, "", "concat"], [450, 1, 1, "", "contains"], [451, 1, 1, "", "count_match"], [452, 1, 1, "", "count_matches"], [453, 1, 1, "", "diff"], [454, 1, 1, "", "difference"], [455, 1, 1, "", "drop_nulls"], [456, 1, 1, "", "eval"], [457, 1, 1, "", "explode"], [458, 1, 1, "", "first"], [459, 1, 1, "", "get"], [460, 1, 1, "", "head"], [461, 1, 1, "", "intersection"], [462, 1, 1, "", "join"], [463, 1, 1, "", "last"], [464, 1, 1, "", "len"], [465, 1, 1, "", "lengths"], [466, 1, 1, "", "max"], [467, 1, 1, "", "mean"], [468, 1, 1, "", "min"], [469, 1, 1, "", "reverse"], [470, 1, 1, "", "sample"], [471, 1, 1, "", "set_difference"], [472, 1, 1, "", "set_intersection"], [473, 1, 1, "", "set_symmetric_difference"], [474, 1, 1, "", "set_union"], [475, 1, 1, "", "shift"], [476, 1, 1, "", "slice"], [477, 1, 1, "", "sort"], [478, 1, 1, "", "sum"], [479, 1, 1, "", "symmetric_difference"], [480, 1, 1, "", "tail"], [481, 1, 1, "", "take"], [482, 1, 1, "", "to_array"], [483, 1, 1, "", "to_struct"], [484, 1, 1, "", "union"], [485, 1, 1, "", "unique"]], "polars.Expr.meta": [[499, 1, 1, "", "eq"], [500, 1, 1, "", "has_multiple_outputs"], [501, 1, 1, "", "is_regex_projection"], [502, 1, 1, "", "ne"], [503, 1, 1, "", "output_name"], [504, 1, 1, "", "pop"], [505, 1, 1, "", "root_names"], [506, 1, 1, "", "tree_format"], [507, 1, 1, "", "undo_aliases"], [508, 1, 1, "", "write_json"]], "polars.Expr.name": [[514, 1, 1, "", "keep"], [515, 1, 1, "", "map"], [516, 1, 1, "", "prefix"], [517, 1, 1, "", "suffix"], [518, 1, 1, "", "to_lowercase"], [519, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[575, 1, 1, "", "concat"], [576, 1, 1, "", "contains"], [577, 1, 1, "", "count_match"], [578, 1, 1, "", "count_matches"], [579, 1, 1, "", "decode"], [580, 1, 1, "", "encode"], [581, 1, 1, "", "ends_with"], [582, 1, 1, "", "explode"], [583, 1, 1, "", "extract"], [584, 1, 1, "", "extract_all"], [585, 1, 1, "", "extract_groups"], [586, 1, 1, "", "json_extract"], [587, 1, 1, "", "json_path_match"], [588, 1, 1, "", "len_bytes"], [589, 1, 1, "", "len_chars"], [590, 1, 1, "", "lengths"], [591, 1, 1, "", "ljust"], [592, 1, 1, "", "lstrip"], [593, 1, 1, "", "n_chars"], [594, 1, 1, "", "pad_end"], [595, 1, 1, "", "pad_start"], [596, 1, 1, "", "parse_int"], [597, 1, 1, "", "replace"], [598, 1, 1, "", "replace_all"], [599, 1, 1, "", "rjust"], [600, 1, 1, "", "rstrip"], [601, 1, 1, "", "slice"], [602, 1, 1, "", "split"], [603, 1, 1, "", "split_exact"], [604, 1, 1, "", "splitn"], [605, 1, 1, "", "starts_with"], [606, 1, 1, "", "strip"], [607, 1, 1, "", "strip_chars"], [608, 1, 1, "", "strip_chars_end"], [609, 1, 1, "", "strip_chars_start"], [610, 1, 1, "", "strip_prefix"], [611, 1, 1, "", "strip_suffix"], [612, 1, 1, "", "strptime"], [613, 1, 1, "", "to_date"], [614, 1, 1, "", "to_datetime"], [615, 1, 1, "", "to_decimal"], [616, 1, 1, "", "to_lowercase"], [617, 1, 1, "", "to_time"], [618, 1, 1, "", "to_titlecase"], [619, 1, 1, "", "to_uppercase"], [620, 1, 1, "", "zfill"]], "polars.Expr.struct": [[621, 1, 1, "", "field"], [622, 1, 1, "", "rename_fields"]], "polars.Float32": [[51, 1, 1, "", "__init__"]], "polars.Float64": [[52, 1, 1, "", "__init__"]], "polars.Int16": [[53, 1, 1, "", "__init__"]], "polars.Int32": [[54, 1, 1, "", "__init__"]], "polars.Int64": [[55, 1, 1, "", "__init__"]], "polars.Int8": [[56, 1, 1, "", "__init__"]], "polars.LazyFrame": [[735, 1, 1, "", "approx_n_unique"], [736, 1, 1, "", "approx_unique"], [737, 1, 1, "", "bottom_k"], [738, 1, 1, "", "cache"], [739, 1, 1, "", "cast"], [740, 1, 1, "", "clear"], [741, 1, 1, "", "clone"], [742, 1, 1, "", "collect"], [743, 1, 1, "", "collect_async"], [744, 2, 1, "", "columns"], [745, 1, 1, "", "deserialize"], [746, 1, 1, "", "drop"], [747, 1, 1, "", "drop_nulls"], [748, 2, 1, "", "dtypes"], [749, 1, 1, "", "explain"], [750, 1, 1, "", "explode"], [751, 1, 1, "", "fetch"], [752, 1, 1, "", "fill_nan"], [753, 1, 1, "", "fill_null"], [754, 1, 1, "", "filter"], [755, 1, 1, "", "first"], [756, 1, 1, "", "from_json"], [757, 1, 1, "", "group_by"], [758, 1, 1, "", "group_by_dynamic"], [759, 1, 1, "", "group_by_rolling"], [760, 1, 1, "", "groupby"], [761, 1, 1, "", "groupby_dynamic"], [762, 1, 1, "", "groupby_rolling"], [763, 1, 1, "", "head"], [764, 1, 1, "", "inspect"], [765, 1, 1, "", "interpolate"], [766, 1, 1, "", "join"], [767, 1, 1, "", "join_asof"], [768, 1, 1, "", "last"], [769, 1, 1, "", "lazy"], [770, 1, 1, "", "limit"], [771, 1, 1, "", "map"], [772, 1, 1, "", "map_batches"], [773, 1, 1, "", "max"], [774, 1, 1, "", "mean"], [775, 1, 1, "", "median"], [776, 1, 1, "", "melt"], [777, 1, 1, "", "merge_sorted"], [778, 1, 1, "", "min"], [779, 1, 1, "", "null_count"], [780, 1, 1, "", "pipe"], [781, 1, 1, "", "profile"], [782, 1, 1, "", "quantile"], [783, 1, 1, "", "read_json"], [784, 1, 1, "", "rename"], [785, 1, 1, "", "reverse"], [786, 1, 1, "", "rolling"], [787, 2, 1, "", "schema"], [788, 1, 1, "", "select"], [789, 1, 1, "", "select_seq"], [790, 1, 1, "", "serialize"], [791, 1, 1, "", "set_sorted"], [792, 1, 1, "", "shift"], [793, 1, 1, "", "shift_and_fill"], [794, 1, 1, "", "show_graph"], [57, 1, 1, "", "sink_csv"], [58, 1, 1, "", "sink_ipc"], [59, 1, 1, "", "sink_parquet"], [795, 1, 1, "", "slice"], [796, 1, 1, "", "sort"], [797, 1, 1, "", "std"], [798, 1, 1, "", "sum"], [799, 1, 1, "", "tail"], [800, 1, 1, "", "take_every"], [801, 1, 1, "", "top_k"], [802, 1, 1, "", "unique"], [803, 1, 1, "", "unnest"], [804, 1, 1, "", "update"], [805, 1, 1, "", "var"], [806, 2, 1, "", "width"], [807, 1, 1, "", "with_columns"], [808, 1, 1, "", "with_columns_seq"], [809, 1, 1, "", "with_context"], [810, 1, 1, "", "with_row_count"], [811, 1, 1, "", "write_json"]], "polars.List": [[60, 1, 1, "", "__init__"]], "polars.Null": [[61, 1, 1, "", "__init__"]], "polars.Object": [[62, 1, 1, "", "__init__"]], "polars.SQLContext": [[1191, 1, 1, "", "__enter__"], [1191, 1, 1, "", "__exit__"], [1191, 1, 1, "", "__init__"], [63, 1, 1, "", "execute"], [64, 1, 1, "", "register"], [65, 1, 1, "", "register_globals"], [66, 1, 1, "", "register_many"], [67, 1, 1, "", "tables"], [68, 1, 1, "", "unregister"]], "polars.Series": [[836, 1, 1, "", "abs"], [837, 1, 1, "", "alias"], [838, 1, 1, "", "all"], [839, 1, 1, "", "any"], [840, 1, 1, "", "append"], [841, 1, 1, "", "apply"], [842, 1, 1, "", "arccos"], [843, 1, 1, "", "arccosh"], [844, 1, 1, "", "arcsin"], [845, 1, 1, "", "arcsinh"], [846, 1, 1, "", "arctan"], [847, 1, 1, "", "arctanh"], [848, 1, 1, "", "arg_max"], [849, 1, 1, "", "arg_min"], [850, 1, 1, "", "arg_sort"], [851, 1, 1, "", "arg_true"], [852, 1, 1, "", "arg_unique"], [863, 1, 1, "", "bottom_k"], [864, 1, 1, "", "cast"], [865, 3, 1, "", "cat"], [871, 1, 1, "", "cbrt"], [872, 1, 1, "", "ceil"], [873, 1, 1, "", "chunk_lengths"], [874, 1, 1, "", "clear"], [875, 1, 1, "", "clip"], [876, 1, 1, "", "clip_max"], [877, 1, 1, "", "clip_min"], [878, 1, 1, "", "clone"], [879, 1, 1, "", "cos"], [880, 1, 1, "", "cosh"], [881, 1, 1, "", "cot"], [882, 1, 1, "", "cummax"], [883, 1, 1, "", "cummin"], [884, 1, 1, "", "cumprod"], [885, 1, 1, "", "cumsum"], [886, 1, 1, "", "cumulative_eval"], [887, 1, 1, "", "cut"], [888, 1, 1, "", "describe"], [889, 1, 1, "", "diff"], [890, 1, 1, "", "dot"], [891, 1, 1, "", "drop_nans"], [892, 1, 1, "", "drop_nulls"], [893, 3, 1, "", "dt"], [946, 3, 1, "", "dtype"], [947, 1, 1, "", "entropy"], [948, 1, 1, "", "estimated_size"], [949, 1, 1, "", "ewm_mean"], [950, 1, 1, "", "ewm_std"], [951, 1, 1, "", "ewm_var"], [952, 1, 1, "", "exp"], [953, 1, 1, "", "explode"], [954, 1, 1, "", "extend"], [955, 1, 1, "", "extend_constant"], [956, 1, 1, "", "fill_nan"], [957, 1, 1, "", "fill_null"], [958, 1, 1, "", "filter"], [959, 3, 1, "", "flags"], [960, 1, 1, "", "floor"], [961, 1, 1, "", "get_chunks"], [962, 1, 1, "", "has_validity"], [963, 1, 1, "", "hash"], [964, 1, 1, "", "head"], [965, 1, 1, "", "hist"], [966, 1, 1, "", "implode"], [967, 3, 1, "", "inner_dtype"], [968, 1, 1, "", "interpolate"], [969, 1, 1, "", "is_between"], [970, 1, 1, "", "is_boolean"], [971, 1, 1, "", "is_duplicated"], [972, 1, 1, "", "is_empty"], [973, 1, 1, "", "is_finite"], [974, 1, 1, "", "is_first"], [975, 1, 1, "", "is_first_distinct"], [976, 1, 1, "", "is_float"], [977, 1, 1, "", "is_in"], [978, 1, 1, "", "is_infinite"], [979, 1, 1, "", "is_integer"], [980, 1, 1, "", "is_last"], [981, 1, 1, "", "is_last_distinct"], [982, 1, 1, "", "is_nan"], [983, 1, 1, "", "is_not_nan"], [984, 1, 1, "", "is_not_null"], [985, 1, 1, "", "is_null"], [986, 1, 1, "", "is_numeric"], [987, 1, 1, "", "is_sorted"], [988, 1, 1, "", "is_temporal"], [989, 1, 1, "", "is_unique"], [990, 1, 1, "", "is_utf8"], [991, 1, 1, "", "item"], [992, 1, 1, "", "kurtosis"], [993, 1, 1, "", "len"], [994, 1, 1, "", "limit"], [995, 3, 1, "", "list"], [1037, 1, 1, "", "log"], [1038, 1, 1, "", "log10"], [1039, 1, 1, "", "log1p"], [1040, 1, 1, "", "lower_bound"], [1041, 1, 1, "", "map_dict"], [1042, 1, 1, "", "map_elements"], [1043, 1, 1, "", "max"], [1044, 1, 1, "", "mean"], [1045, 1, 1, "", "median"], [1046, 1, 1, "", "min"], [1047, 1, 1, "", "mode"], [1048, 1, 1, "", "n_chunks"], [1049, 1, 1, "", "n_unique"], [1050, 3, 1, "", "name"], [1051, 1, 1, "", "nan_max"], [1052, 1, 1, "", "nan_min"], [1053, 1, 1, "", "new_from_index"], [1054, 1, 1, "", "not_"], [1055, 1, 1, "", "null_count"], [1056, 1, 1, "", "pct_change"], [1057, 1, 1, "", "peak_max"], [1058, 1, 1, "", "peak_min"], [1059, 1, 1, "", "product"], [1060, 1, 1, "", "qcut"], [1061, 1, 1, "", "quantile"], [1062, 1, 1, "", "rank"], [1063, 1, 1, "", "rechunk"], [1064, 1, 1, "", "reinterpret"], [1065, 1, 1, "", "rename"], [1066, 1, 1, "", "reshape"], [1067, 1, 1, "", "reverse"], [1068, 1, 1, "", "rle"], [1069, 1, 1, "", "rle_id"], [1070, 1, 1, "", "rolling_apply"], [1071, 1, 1, "", "rolling_map"], [1072, 1, 1, "", "rolling_max"], [1073, 1, 1, "", "rolling_mean"], [1074, 1, 1, "", "rolling_median"], [1075, 1, 1, "", "rolling_min"], [1076, 1, 1, "", "rolling_quantile"], [1077, 1, 1, "", "rolling_skew"], [1078, 1, 1, "", "rolling_std"], [1079, 1, 1, "", "rolling_sum"], [1080, 1, 1, "", "rolling_var"], [1081, 1, 1, "", "round"], [1082, 1, 1, "", "sample"], [1083, 1, 1, "", "search_sorted"], [1084, 1, 1, "", "series_equal"], [1085, 1, 1, "", "set"], [1086, 1, 1, "", "set_at_idx"], [1087, 1, 1, "", "set_sorted"], [1088, 3, 1, "", "shape"], [1089, 1, 1, "", "shift"], [1090, 1, 1, "", "shift_and_fill"], [1091, 1, 1, "", "shrink_dtype"], [1092, 1, 1, "", "shrink_to_fit"], [1093, 1, 1, "", "shuffle"], [1094, 1, 1, "", "sign"], [1095, 1, 1, "", "sin"], [1096, 1, 1, "", "sinh"], [1097, 1, 1, "", "skew"], [1098, 1, 1, "", "slice"], [1099, 1, 1, "", "sort"], [1100, 1, 1, "", "sqrt"], [1101, 1, 1, "", "std"], [1102, 3, 1, "", "str"], [1154, 1, 1, "", "sum"], [1155, 1, 1, "", "tail"], [1156, 1, 1, "", "take"], [1157, 1, 1, "", "take_every"], [1158, 1, 1, "", "tan"], [1159, 1, 1, "", "tanh"], [1160, 1, 1, "", "to_arrow"], [1161, 1, 1, "", "to_dummies"], [1162, 1, 1, "", "to_frame"], [1163, 1, 1, "", "to_init_repr"], [1164, 1, 1, "", "to_list"], [1165, 1, 1, "", "to_numpy"], [1166, 1, 1, "", "to_pandas"], [1167, 1, 1, "", "to_physical"], [1168, 1, 1, "", "top_k"], [1169, 1, 1, "", "unique"], [1170, 1, 1, "", "unique_counts"], [1171, 1, 1, "", "upper_bound"], [1172, 1, 1, "", "value_counts"], [1173, 1, 1, "", "var"], [1174, 1, 1, "", "view"], [1175, 1, 1, "", "zip_with"]], "polars.Series.arr": [[853, 1, 1, "", "max"], [854, 1, 1, "", "min"], [855, 1, 1, "", "sum"], [856, 1, 1, "", "to_list"], [857, 1, 1, "", "unique"]], "polars.Series.bin": [[858, 1, 1, "", "contains"], [859, 1, 1, "", "decode"], [860, 1, 1, "", "encode"], [861, 1, 1, "", "ends_with"], [862, 1, 1, "", "starts_with"]], "polars.Series.cat": [[866, 1, 1, "", "get_categories"], [867, 1, 1, "", "is_local"], [868, 1, 1, "", "set_ordering"], [869, 1, 1, "", "to_local"], [870, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[894, 1, 1, "", "base_utc_offset"], [895, 1, 1, "", "cast_time_unit"], [896, 1, 1, "", "combine"], [897, 1, 1, "", "convert_time_zone"], [898, 1, 1, "", "date"], [899, 1, 1, "", "datetime"], [900, 1, 1, "", "day"], [901, 1, 1, "", "days"], [902, 1, 1, "", "dst_offset"], [903, 1, 1, "", "epoch"], [904, 1, 1, "", "hour"], [905, 1, 1, "", "hours"], [906, 1, 1, "", "is_leap_year"], [907, 1, 1, "", "iso_year"], [908, 1, 1, "", "max"], [909, 1, 1, "", "mean"], [910, 1, 1, "", "median"], [911, 1, 1, "", "microsecond"], [912, 1, 1, "", "microseconds"], [913, 1, 1, "", "millisecond"], [914, 1, 1, "", "milliseconds"], [915, 1, 1, "", "min"], [916, 1, 1, "", "minute"], [917, 1, 1, "", "minutes"], [918, 1, 1, "", "month"], [919, 1, 1, "", "month_end"], [920, 1, 1, "", "month_start"], [921, 1, 1, "", "nanosecond"], [922, 1, 1, "", "nanoseconds"], [923, 1, 1, "", "offset_by"], [924, 1, 1, "", "ordinal_day"], [925, 1, 1, "", "quarter"], [926, 1, 1, "", "replace_time_zone"], [927, 1, 1, "", "round"], [928, 1, 1, "", "second"], [929, 1, 1, "", "seconds"], [930, 1, 1, "", "strftime"], [931, 1, 1, "", "time"], [932, 1, 1, "", "timestamp"], [933, 1, 1, "", "to_string"], [934, 1, 1, "", "total_days"], [935, 1, 1, "", "total_hours"], [936, 1, 1, "", "total_microseconds"], [937, 1, 1, "", "total_milliseconds"], [938, 1, 1, "", "total_minutes"], [939, 1, 1, "", "total_nanoseconds"], [940, 1, 1, "", "total_seconds"], [941, 1, 1, "", "truncate"], [942, 1, 1, "", "week"], [943, 1, 1, "", "weekday"], [944, 1, 1, "", "with_time_unit"], [945, 1, 1, "", "year"]], "polars.Series.list": [[996, 1, 1, "", "all"], [997, 1, 1, "", "any"], [998, 1, 1, "", "arg_max"], [999, 1, 1, "", "arg_min"], [1000, 1, 1, "", "concat"], [1001, 1, 1, "", "contains"], [1002, 1, 1, "", "count_match"], [1003, 1, 1, "", "count_matches"], [1004, 1, 1, "", "diff"], [1005, 1, 1, "", "difference"], [1006, 1, 1, "", "drop_nulls"], [1007, 1, 1, "", "eval"], [1008, 1, 1, "", "explode"], [1009, 1, 1, "", "first"], [1010, 1, 1, "", "get"], [1011, 1, 1, "", "head"], [1012, 1, 1, "", "intersection"], [1013, 1, 1, "", "join"], [1014, 1, 1, "", "last"], [1015, 1, 1, "", "len"], [1016, 1, 1, "", "lengths"], [1017, 1, 1, "", "max"], [1018, 1, 1, "", "mean"], [1019, 1, 1, "", "min"], [1020, 1, 1, "", "reverse"], [1021, 1, 1, "", "sample"], [1022, 1, 1, "", "set_difference"], [1023, 1, 1, "", "set_intersection"], [1024, 1, 1, "", "set_symmetric_difference"], [1025, 1, 1, "", "set_union"], [1026, 1, 1, "", "shift"], [1027, 1, 1, "", "slice"], [1028, 1, 1, "", "sort"], [1029, 1, 1, "", "sum"], [1030, 1, 1, "", "symmetric_difference"], [1031, 1, 1, "", "tail"], [1032, 1, 1, "", "take"], [1033, 1, 1, "", "to_array"], [1034, 1, 1, "", "to_struct"], [1035, 1, 1, "", "union"], [1036, 1, 1, "", "unique"]], "polars.Series.str": [[1103, 1, 1, "", "concat"], [1104, 1, 1, "", "contains"], [1105, 1, 1, "", "count_match"], [1106, 1, 1, "", "count_matches"], [1107, 1, 1, "", "decode"], [1108, 1, 1, "", "encode"], [1109, 1, 1, "", "ends_with"], [1110, 1, 1, "", "explode"], [1111, 1, 1, "", "extract"], [1112, 1, 1, "", "extract_all"], [1113, 1, 1, "", "extract_groups"], [1114, 1, 1, "", "json_extract"], [1115, 1, 1, "", "json_path_match"], [1116, 1, 1, "", "len_bytes"], [1117, 1, 1, "", "len_chars"], [1118, 1, 1, "", "lengths"], [1119, 1, 1, "", "ljust"], [1120, 1, 1, "", "lstrip"], [1121, 1, 1, "", "n_chars"], [1122, 1, 1, "", "pad_end"], [1123, 1, 1, "", "pad_start"], [1124, 1, 1, "", "parse_int"], [1125, 1, 1, "", "replace"], [1126, 1, 1, "", "replace_all"], [1127, 1, 1, "", "rjust"], [1128, 1, 1, "", "rstrip"], [1129, 1, 1, "", "slice"], [1130, 1, 1, "", "split"], [1131, 1, 1, "", "split_exact"], [1132, 1, 1, "", "splitn"], [1133, 1, 1, "", "starts_with"], [1134, 1, 1, "", "strip"], [1135, 1, 1, "", "strip_chars"], [1136, 1, 1, "", "strip_chars_end"], [1137, 1, 1, "", "strip_chars_start"], [1138, 1, 1, "", "strip_prefix"], [1139, 1, 1, "", "strip_suffix"], [1140, 1, 1, "", "strptime"], [1141, 1, 1, "", "to_date"], [1142, 1, 1, "", "to_datetime"], [1143, 1, 1, "", "to_decimal"], [1144, 1, 1, "", "to_lowercase"], [1145, 1, 1, "", "to_time"], [1146, 1, 1, "", "to_titlecase"], [1147, 1, 1, "", "to_uppercase"], [1148, 1, 1, "", "zfill"]], "polars.Series.struct": [[1149, 1, 1, "", "field"], [1150, 3, 1, "", "fields"], [1151, 1, 1, "", "rename_fields"], [1152, 3, 1, "", "schema"], [1153, 1, 1, "", "unnest"]], "polars.StringCache": [[69, 1, 1, "", "__init__"]], "polars.Struct": [[70, 1, 1, "", "__init__"]], "polars.Time": [[71, 1, 1, "", "__init__"]], "polars.UInt16": [[72, 1, 1, "", "__init__"]], "polars.UInt32": [[73, 1, 1, "", "__init__"]], "polars.UInt64": [[74, 1, 1, "", "__init__"]], "polars.UInt8": [[75, 1, 1, "", "__init__"]], "polars.Unknown": [[76, 1, 1, "", "__init__"]], "polars.Utf8": [[77, 1, 1, "", "__init__"]], "polars.api": [[79, 4, 1, "", "register_dataframe_namespace"], [80, 4, 1, "", "register_expr_namespace"], [81, 4, 1, "", "register_lazyframe_namespace"], [82, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[263, 1, 1, "", "__iter__"], [264, 1, 1, "", "agg"], [265, 1, 1, "", "all"], [266, 1, 1, "", "apply"], [267, 1, 1, "", "count"], [268, 1, 1, "", "first"], [269, 1, 1, "", "head"], [270, 1, 1, "", "last"], [271, 1, 1, "", "map_groups"], [272, 1, 1, "", "max"], [273, 1, 1, "", "mean"], [274, 1, 1, "", "median"], [275, 1, 1, "", "min"], [276, 1, 1, "", "n_unique"], [277, 1, 1, "", "quantile"], [278, 1, 1, "", "sum"], [279, 1, 1, "", "tail"]], "polars.exceptions": [[89, 5, 1, "", "ArrowError"], [90, 5, 1, "", "ColumnNotFoundError"], [91, 5, 1, "", "ComputeError"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "NoDataError"], [95, 5, 1, "", "NoRowsReturnedError"], [96, 5, 1, "", "PolarsPanicError"], [97, 5, 1, "", "RowsError"], [98, 5, 1, "", "SchemaError"], [99, 5, 1, "", "SchemaFieldNotFoundError"], [100, 5, 1, "", "ShapeError"], [101, 5, 1, "", "StructFieldNotFoundError"], [102, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[112, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[812, 1, 1, "", "agg"], [813, 1, 1, "", "all"], [814, 1, 1, "", "apply"], [815, 1, 1, "", "count"], [816, 1, 1, "", "first"], [817, 1, 1, "", "head"], [818, 1, 1, "", "last"], [819, 1, 1, "", "map_groups"], [820, 1, 1, "", "max"], [821, 1, 1, "", "mean"], [822, 1, 1, "", "median"], [823, 1, 1, "", "min"], [824, 1, 1, "", "n_unique"], [825, 1, 1, "", "quantile"], [826, 1, 1, "", "sum"], [827, 1, 1, "", "tail"]], "polars.selectors": [[834, 4, 1, "", "all"], [834, 4, 1, "", "by_dtype"], [834, 4, 1, "", "by_name"], [834, 4, 1, "", "categorical"], [834, 4, 1, "", "contains"], [834, 4, 1, "", "date"], [834, 4, 1, "", "datetime"], [834, 4, 1, "", "duration"], [834, 4, 1, "", "ends_with"], [834, 4, 1, "", "expand_selector"], [834, 4, 1, "", "first"], [834, 4, 1, "", "float"], [834, 4, 1, "", "integer"], [834, 4, 1, "", "is_selector"], [834, 4, 1, "", "last"], [834, 4, 1, "", "matches"], [834, 4, 1, "", "numeric"], [834, 4, 1, "", "starts_with"], [834, 4, 1, "", "string"], [834, 4, 1, "", "temporal"], [834, 4, 1, "", "time"]], "polars.testing": [[137, 4, 1, "", "assert_frame_equal"], [138, 4, 1, "", "assert_frame_not_equal"], [139, 4, 1, "", "assert_series_equal"], [140, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[141, 0, 1, "", "column"], [142, 4, 1, "", "columns"], [143, 4, 1, "", "create_list_strategy"], [144, 4, 1, "", "dataframes"], [145, 4, 1, "", "load_profile"], [146, 4, 1, "", "series"], [147, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[141, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 169, 954], "api": [1, 79, 80, 81, 82, 732], "provid": 1, "new": 1, "function": [1, 150, 719, 731, 834], "avail": 1, "registr": 1, "exampl": [1, 834, 1192], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 716, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1192], "arrai": [2, 712, 1176], "binari": [3, 713, 726, 1178], "boolean": [4, 714, 1179], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 150], "activate_decim": 6, "load": [7, 150], "load_from_fil": 8, "restore_default": 9, "save": [10, 150], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 150], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 144, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 285], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 508, 811], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 353, 663, 898], "datetim": [48, 354, 666, 899], "decim": 49, "durat": [50, 669], "float32": 51, "float64": 52, "int16": 53, "int32": 54, "int64": 55, "int8": 56, "lazyfram": [57, 58, 59, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831], "sink_csv": 57, "sink_ipc": 58, "sink_parquet": 59, "list": [60, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 721, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1185], "null": 61, "object": 62, "sqlcontext": [63, 64, 65, 66, 67, 68], "execut": 63, "regist": 64, "register_glob": 65, "register_mani": 66, "tabl": 67, "unregist": 68, "stringcach": [69, 731], "struct": [70, 621, 622, 702, 728, 1149, 1150, 1151, 1152, 1153, 1189], "time": [71, 382, 706, 931], "uint16": 72, "uint32": 73, "uint64": 74, "uint8": 75, "unknown": 76, "utf8": 77, "align_fram": 78, "register_dataframe_namespac": 79, "register_expr_namespac": 80, "register_lazyframe_namespac": 81, "register_series_namespac": 82, "build_info": 83, "collect_al": 84, "collect_all_async": 85, "concat": [86, 449, 575, 1000, 1103], "disable_string_cach": 87, "enable_string_cach": 88, "except": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 289], "arrowerror": 89, "columnnotfounderror": 90, "computeerror": 91, "duplicateerror": 92, "invalidoperationerror": 93, "nodataerror": 94, "norowsreturnederror": 95, "polarspanicerror": 96, "rowserror": 97, "schemaerror": 98, "schemafieldnotfounderror": 99, "shapeerror": 100, "structfieldnotfounderror": 101, "toomanyrowsreturnederror": 102, "from_arrow": 103, "from_datafram": 104, "from_dict": [105, 106], "from_numpi": 107, "from_panda": 108, "from_record": 109, "from_repr": 110, "get_index_typ": 111, "io": 112, "csv": [112, 733], "batched_read": 112, "batchedcsvread": [112, 733], "next_batch": 112, "read_avro": 113, "read_csv": 114, "read_csv_batch": 115, "read_databas": 116, "read_database_uri": 117, "read_delta": 118, "read_excel": 119, "read_ipc": 120, "read_ipc_schema": 121, "read_ipc_stream": 122, "read_json": [123, 783], "read_ndjson": 124, "read_od": 125, "read_parquet": 126, "read_parquet_schema": 127, "scan_csv": 128, "scan_delta": 129, "scan_iceberg": 130, "scan_ipc": 131, "scan_ndjson": 132, "scan_parquet": 133, "scan_pyarrow_dataset": 134, "set_random_se": 135, "show_vers": 136, "test": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 1192], "assert_frame_equ": 137, "assert_frame_not_equ": 138, "assert_series_equ": 139, "assert_series_not_equ": 140, "parametr": [141, 142, 143, 144, 145, 146, 147, 1192], "column": [141, 142, 160, 717, 744], "create_list_strategi": 143, "load_profil": 145, "seri": [146, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1184], "set_profil": 147, "threadpool_s": 148, "using_string_cach": 149, "option": 150, "current": 150, "us": 150, "context": 150, "manag": 150, "decor": 150, "aggreg": [151, 290, 734, 835], "__dataframe__": 152, "appli": [153, 266, 299, 645, 814, 841], "approx_n_uniqu": [154, 300, 646, 735], "approx_uniqu": [155, 736], "bottom_k": [156, 323, 737, 863], "cast": [157, 325, 739, 864], "clear": [158, 740, 874], "clone": [159, 741, 878], "corr": [161, 656], "describ": [162, 888], "drop": [163, 746], "drop_in_plac": 164, "drop_nul": [165, 348, 455, 747, 892, 1006], "dtype": [166, 748, 946], "estimated_s": [167, 948], "explod": [168, 405, 457, 582, 750, 953, 1008, 1110], "fill_nan": [170, 407, 752, 956], "fill_nul": [171, 408, 753, 957], "filter": [172, 409, 754, 958], "find_idx_by_nam": 173, "flag": [174, 959], "fold": [175, 673], "frame_equ": 176, "get_column": [177, 178], "glimps": 179, "group_bi": [180, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 757, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827], "group_by_dynam": [181, 758], "group_by_rol": [182, 759], "groupbi": [183, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 284, 760, 830], "groupby_dynam": [184, 761], "groupby_rol": [185, 762], "hash_row": 186, "head": [187, 269, 420, 460, 677, 763, 817, 964, 1011], "height": 188, "hstack": 189, "insert_at_idx": 190, "interpol": [191, 423, 765, 968], "is_dupl": [192, 425, 971], "is_empti": [193, 972], "is_uniqu": [194, 438, 989], "item": [195, 991], "iter_row": 196, "iter_slic": 197, "join": [198, 462, 766, 1013], "join_asof": [199, 767], "lazi": [200, 769], "limit": [201, 444, 770, 994], "map_row": 202, "max": [203, 272, 312, 466, 496, 686, 773, 820, 853, 908, 1017, 1043], "mean": [204, 273, 467, 497, 688, 774, 821, 909, 1018, 1044], "median": [205, 274, 498, 689, 775, 822, 910, 1045], "melt": [206, 776], "merge_sort": [207, 777], "min": [208, 275, 313, 468, 509, 690, 778, 823, 854, 915, 1019, 1046], "n_chunk": [209, 1048], "n_uniqu": [210, 276, 513, 692, 824, 1049], "null_count": [211, 525, 779, 1055], "partition_bi": 212, "pipe": [213, 531, 780], "pivot": 214, "product": [215, 534, 1059], "quantil": [216, 277, 536, 694, 782, 825, 1061], "rechunk": [217, 539, 1063], "renam": [218, 784, 1065], "replac": [219, 597, 1125], "replace_at_idx": 220, "revers": [221, 469, 543, 785, 1020, 1067], "roll": [222, 546, 786], "row": [223, 224], "rows_by_kei": 225, "sampl": [226, 470, 559, 1021, 1082], "schema": [227, 787, 1152], "select": [228, 287, 699, 724, 788, 833, 1187], "select_seq": [229, 789], "set_sort": [230, 561, 791, 1087], "shape": [231, 1088], "shift": [232, 475, 562, 792, 1026, 1089], "shift_and_fil": [233, 563, 793, 1090], "shrink_to_fit": [234, 1092], "slice": [235, 476, 570, 601, 795, 1027, 1098, 1129], "sort": [236, 477, 571, 796, 1028, 1099], "std": [237, 574, 701, 797, 1101], "sum": [238, 278, 314, 478, 625, 703, 798, 826, 855, 1029, 1154], "tail": [239, 279, 480, 626, 705, 799, 827, 1031, 1155], "take_everi": [240, 628, 800, 1157], "to_arrow": [241, 1160], "to_dict": [242, 243], "to_dummi": [244, 1161], "to_init_repr": [245, 1163], "to_numpi": [246, 1165], "to_panda": [247, 1166], "to_seri": 248, "to_struct": [249, 483, 1034], "top_k": [250, 632, 801, 1168], "transpos": 251, "uniqu": [252, 316, 485, 634, 802, 857, 1036, 1169], "unnest": [253, 803, 1153], "unstack": 254, "updat": [255, 804], "upsampl": 256, "var": [257, 638, 709, 805, 1173], "vstack": 258, "width": [259, 806], "with_column": [260, 807], "with_columns_seq": [261, 808], "with_row_count": [262, 810], "__iter__": 263, "agg": [264, 812], "all": [265, 295, 445, 641, 813, 838, 996], "count": [267, 336, 657, 815], "first": [268, 410, 458, 672, 755, 816, 1009], "last": [270, 441, 463, 681, 768, 818, 1014], "map_group": [271, 685, 819], "attribut": [280, 828, 1177], "comput": [281, 718, 1181], "descript": [282, 829, 1182], "export": [283, 1183], "miscellan": [286, 723, 731, 832, 1186], "manipul": [287, 724, 833, 1187], "data": 288, "type": 288, "numer": [288, 726], "tempor": [288, 729, 1190], "nest": 288, "other": 288, "expr": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "ab": [291, 836], "add": 292, "agg_group": 293, "alia": [294, 837], "and_": 296, "ani": [297, 446, 643, 839, 997], "append": [298, 840], "arcco": [301, 842], "arccosh": [302, 843], "arcsin": [303, 844], "arcsinh": [304, 845], "arctan": [305, 846], "arctanh": [306, 847], "arg_max": [307, 447, 848, 998], "arg_min": [308, 448, 849, 999], "arg_sort": [309, 850], "arg_tru": [310, 851], "arg_uniqu": [311, 852], "arr": [312, 313, 314, 315, 316, 853, 854, 855, 856, 857], "to_list": [315, 856, 1164], "backward_fil": 317, "bin": [318, 319, 320, 321, 322, 858, 859, 860, 861, 862], "contain": [318, 450, 576, 858, 1001, 1104], "decod": [319, 579, 859, 1107], "encod": [320, 580, 860, 1108], "ends_with": [321, 581, 861, 1109], "starts_with": [322, 605, 862, 1133], "cach": [324, 738], "cat": [326, 327, 865, 866, 867, 868, 869, 870], "get_categori": [326, 866], "set_ord": [327, 868], "cbrt": [328, 871], "ceil": [329, 872], "clip": [330, 875], "clip_max": [331, 876], "clip_min": [332, 877], "co": [333, 879], "cosh": [334, 880], "cot": [335, 881], "cumcount": 337, "cummax": [338, 882], "cummin": [339, 883], "cumprod": [340, 884], "cumsum": [341, 661, 885], "cumulative_ev": [342, 886], "cut": [343, 887], "degre": 344, "diff": [345, 453, 889, 1004], "dot": [346, 890], "drop_nan": [347, 891], "dt": [349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945], "base_utc_offset": [349, 894], "cast_time_unit": [350, 895], "combin": [351, 896], "convert_time_zon": [352, 897], "dai": [355, 356, 900, 901], "dst_offset": [357, 902], "epoch": [358, 903], "hour": [359, 360, 904, 905], "is_leap_year": [361, 906], "iso_year": [362, 907], "microsecond": [363, 364, 911, 912], "millisecond": [365, 366, 913, 914], "minut": [367, 368, 916, 917], "month": [369, 918], "month_end": [370, 919], "month_start": [371, 920], "nanosecond": [372, 373, 921, 922], "offset_bi": [374, 923], "ordinal_dai": [375, 924], "quarter": [376, 925], "replace_time_zon": [377, 926], "round": [378, 558, 927, 1081], "second": [379, 380, 928, 929], "strftime": [381, 930], "timestamp": [383, 932], "to_str": [384, 933], "total_dai": [385, 934], "total_hour": [386, 935], "total_microsecond": [387, 936], "total_millisecond": [388, 937], "total_minut": [389, 938], "total_nanosecond": [390, 939], "total_second": [391, 940], "truncat": [392, 941], "week": [393, 942], "weekdai": [394, 943], "with_time_unit": [395, 944], "year": [396, 945], "entropi": [397, 947], "eq": [398, 499], "eq_miss": 399, "ewm_mean": [400, 949], "ewm_std": [401, 950], "ewm_var": [402, 951], "exclud": [403, 671], "exp": [404, 952], "extend_const": [406, 955], "flatten": 411, "floor": [412, 960], "floordiv": 413, "forward_fil": 414, "from_json": [415, 756], "ge": 416, "get": [417, 459, 1010], "gt": 418, "hash": [419, 963], "implod": [421, 678, 966], "inspect": [422, 764], "is_between": [424, 969], "is_finit": [426, 973], "is_first": [427, 974], "is_first_distinct": [428, 975], "is_in": [429, 977], "is_infinit": [430, 978], "is_last": [431, 980], "is_last_distinct": [432, 981], "is_nan": [433, 982], "is_not": 434, "is_not_nan": [435, 983], "is_not_nul": [436, 984], "is_nul": [437, 985], "keep_nam": 439, "kurtosi": [440, 992], "le": 442, "len": [443, 464, 993, 1015], "count_match": [451, 452, 577, 578, 1002, 1003, 1105, 1106], "differ": [454, 1005], "eval": [456, 1007], "intersect": [461, 1012], "length": [465, 590, 1016, 1118], "set_differ": [471, 1022], "set_intersect": [472, 1023], "set_symmetric_differ": [473, 1024], "set_union": [474, 1025], "symmetric_differ": [479, 1030], "take": [481, 627, 1032, 1156], "to_arrai": [482, 1033], "union": [484, 1035], "log": [486, 1037], "log10": [487, 1038], "log1p": [488, 1039], "lower_bound": [489, 1040], "lt": 490, "map": [491, 515, 683, 771], "map_alia": 492, "map_batch": [493, 684, 772], "map_dict": [494, 1041], "map_el": [495, 1042], "meta": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 722], "has_multiple_output": 500, "is_regex_project": 501, "ne": [502, 522], "output_nam": 503, "pop": 504, "root_nam": 505, "tree_format": 506, "undo_alias": 507, "mod": 510, "mode": [511, 1047], "mul": 512, "name": [514, 515, 516, 517, 518, 519, 717, 725, 1050], "keep": 514, "prefix": [516, 533], "suffix": [517, 624], "to_lowercas": [518, 616, 1144], "to_uppercas": [519, 619, 1147], "nan_max": [520, 1051], "nan_min": [521, 1052], "ne_miss": 523, "not_": [524, 1054], "or_": 526, "over": 527, "pct_chang": [528, 1056], "peak_max": [529, 1057], "peak_min": [530, 1058], "pow": 532, "qcut": [535, 1060], "radian": 537, "rank": [538, 1062], "reinterpret": [540, 1064], "repeat_bi": 541, "reshap": [542, 1066], "rle": [544, 1068], "rle_id": [545, 1069], "rolling_appli": [547, 1070], "rolling_map": [548, 1071], "rolling_max": [549, 1072], "rolling_mean": [550, 1073], "rolling_median": [551, 1074], "rolling_min": [552, 1075], "rolling_quantil": [553, 1076], "rolling_skew": [554, 1077], "rolling_std": [555, 1078], "rolling_sum": [556, 1079], "rolling_var": [557, 1080], "search_sort": [560, 1083], "shrink_dtyp": [564, 1091], "shuffl": [565, 1093], "sign": [566, 1094], "sin": [567, 1095], "sinh": [568, 1096], "skew": [569, 1097], "sort_bi": 572, "sqrt": [573, 1100], "str": [575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148], "extract": [583, 1111], "extract_al": [584, 1112], "extract_group": [585, 1113], "json_extract": [586, 1114], "json_path_match": [587, 1115], "len_byt": [588, 1116], "len_char": [589, 1117], "ljust": [591, 1119], "lstrip": [592, 1120], "n_char": [593, 1121], "pad_end": [594, 1122], "pad_start": [595, 1123], "parse_int": [596, 1124], "replace_al": [598, 1126], "rjust": [599, 1127], "rstrip": [600, 1128], "split": [602, 1130], "split_exact": [603, 1131], "splitn": [604, 1132], "strip": [606, 1134], "strip_char": [607, 1135], "strip_chars_end": [608, 1136], "strip_chars_start": [609, 1137], "strip_prefix": [610, 1138], "strip_suffix": [611, 1139], "strptime": [612, 1140], "to_dat": [613, 1141], "to_datetim": [614, 1142], "to_decim": [615, 1143], "to_tim": [617, 1145], "to_titlecas": [618, 1146], "zfill": [620, 1148], "field": [621, 1149, 1150], "rename_field": [622, 1151], "sub": 623, "tan": [629, 1158], "tanh": [630, 1159], "to_phys": [631, 1167], "truediv": 633, "unique_count": [635, 1170], "upper_bound": [636, 1171], "value_count": [637, 1172], "where": 639, "xor": 640, "all_horizont": 642, "any_horizont": 644, "arang": 647, "arctan2": 648, "arctan2d": 649, "arg_sort_bi": 650, "arg_wher": 651, "avg": 652, "coalesc": 653, "concat_list": 654, "concat_str": 655, "cov": 658, "cumfold": 659, "cumreduc": 660, "cumsum_horizont": 662, "date_rang": [664, 665], "datetime_rang": [667, 668], "element": 670, "format": 674, "from_epoch": 675, "group": 676, "int_rang": [679, 680], "lit": 682, "max_horizont": 687, "min_horizont": 691, "ones": 693, "reduc": 695, "repeat": 696, "rolling_corr": 697, "rolling_cov": 698, "sql_expr": 700, "sum_horizont": 704, "time_rang": [707, 708], "when": 710, "zero": 711, "categori": [715, 1180], "col": 716, "express": 720, "oper": [726, 834], "conjunct": 726, "comparison": 726, "string": [727, 1188], "window": 730, "convers": 731, "parallel": 731, "random": 731, "refer": 732, "input": 733, "output": 733, "feather": 733, "ipc": 733, "parquet": 733, "databas": 733, "json": 733, "avro": 733, "spreadsheet": 733, "apach": 733, "iceberg": 733, "delta": 733, "lake": 733, "dataset": 733, "collect": 742, "collect_async": 743, "deseri": 745, "explain": 749, "fetch": 751, "profil": [781, 1192], "serial": 790, "show_graph": 794, "with_context": 809, "lazygroupbi": [812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827], "read": 832, "write": 832, "logic": 832, "plan": 832, "selector": 834, "import": 834, "set": [834, 1085], "is_loc": 867, "to_loc": 869, "uses_lexical_ord": 870, "chunk_length": 873, "get_chunk": 961, "has_valid": 962, "hist": 965, "inner_dtyp": 967, "is_boolean": 970, "is_float": 976, "is_integ": 979, "is_numer": 986, "is_sort": 987, "is_tempor": 988, "is_utf8": 990, "new_from_index": 1053, "series_equ": 1084, "set_at_idx": 1086, "to_fram": 1162, "view": 1174, "zip_with": 1175, "sql": 1191, "method": 1191, "assert": 1192, "primit": 1192, "strategi": 1192, "helper": 1192, "util": 1193}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.api.register_series_namespace": [[82, "polars-api-register-series-namespace"]], "polars.scan_delta": [[129, "polars-scan-delta"]], "polars.api.register_expr_namespace": [[80, "polars-api-register-expr-namespace"]], "polars.read_parquet_schema": [[127, "polars-read-parquet-schema"]], "polars.exceptions.ShapeError": [[100, "polars-exceptions-shapeerror"]], "polars.read_ipc_schema": [[121, "polars-read-ipc-schema"]], "polars.enable_string_cache": [[88, "polars-enable-string-cache"]], "polars.read_ipc_stream": [[122, "polars-read-ipc-stream"]], "polars.exceptions.NoDataError": [[94, "polars-exceptions-nodataerror"]], "polars.exceptions.StructFieldNotFoundError": [[101, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.SchemaError": [[98, "polars-exceptions-schemaerror"]], "polars.testing.assert_series_not_equal": [[140, "polars-testing-assert-series-not-equal"]], "polars.from_dicts": [[106, "polars-from-dicts"]], "polars.testing.parametric.series": [[146, "polars-testing-parametric-series"]], "polars.using_string_cache": [[149, "polars-using-string-cache"]], "Aggregation": [[151, "aggregation"], [835, "aggregation"], [734, "aggregation"], [290, "aggregation"]], "polars.set_random_seed": [[135, "polars-set-random-seed"]], "polars.from_pandas": [[108, "polars-from-pandas"]], "polars.scan_ipc": [[131, "polars-scan-ipc"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.align_frames": [[78, "polars-align-frames"]], "polars.scan_iceberg": [[130, "polars-scan-iceberg"]], "polars.exceptions.TooManyRowsReturnedError": [[102, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_dict": [[105, "polars-from-dict"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[112, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.build_info": [[83, "polars-build-info"]], "polars.from_arrow": [[103, "polars-from-arrow"]], "polars.read_database": [[116, "polars-read-database"]], "polars.disable_string_cache": [[87, "polars-disable-string-cache"]], "polars.exceptions.ComputeError": [[91, "polars-exceptions-computeerror"]], "polars.testing.parametric.columns": [[142, "polars-testing-parametric-columns"]], "polars.testing.assert_series_equal": [[139, "polars-testing-assert-series-equal"]], "polars.scan_csv": [[128, "polars-scan-csv"]], "polars.read_ipc": [[120, "polars-read-ipc"]], "polars.scan_parquet": [[133, "polars-scan-parquet"]], "polars.collect_all": [[84, "polars-collect-all"]], "polars.from_numpy": [[107, "polars-from-numpy"]], "polars.DataFrame.apply": [[153, "polars-dataframe-apply"]], "polars.testing.assert_frame_equal": [[137, "polars-testing-assert-frame-equal"]], "polars.exceptions.PolarsPanicError": [[96, "polars-exceptions-polarspanicerror"]], "polars.testing.parametric.set_profile": [[147, "polars-testing-parametric-set-profile"]], "polars.read_csv_batched": [[115, "polars-read-csv-batched"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.ColumnNotFoundError": [[90, "polars-exceptions-columnnotfounderror"]], "polars.api.register_lazyframe_namespace": [[81, "polars-api-register-lazyframe-namespace"]], "polars.read_avro": [[113, "polars-read-avro"]], "polars.testing.assert_frame_not_equal": [[138, "polars-testing-assert-frame-not-equal"]], "polars.read_parquet": [[126, "polars-read-parquet"]], "polars.read_excel": [[119, "polars-read-excel"]], "polars.exceptions.RowsError": [[97, "polars-exceptions-rowserror"]], "polars.read_json": [[123, "polars-read-json"]], "polars.read_csv": [[114, "polars-read-csv"]], "polars.api.register_dataframe_namespace": [[79, "polars-api-register-dataframe-namespace"]], "polars.from_dataframe": [[104, "polars-from-dataframe"]], "polars.show_versions": [[136, "polars-show-versions"]], "polars.exceptions.ArrowError": [[89, "polars-exceptions-arrowerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[99, "polars-exceptions-schemafieldnotfounderror"]], "polars.read_delta": [[118, "polars-read-delta"]], "polars.testing.parametric.dataframes": [[144, "polars-testing-parametric-dataframes"]], "polars.scan_pyarrow_dataset": [[134, "polars-scan-pyarrow-dataset"]], "polars.threadpool_size": [[148, "polars-threadpool-size"]], "polars.from_records": [[109, "polars-from-records"]], "polars.from_repr": [[110, "polars-from-repr"]], "polars.DataFrame.__dataframe__": [[152, "polars-dataframe-dataframe"]], "polars.exceptions.NoRowsReturnedError": [[95, "polars-exceptions-norowsreturnederror"]], "polars.Utf8": [[77, "polars-utf8"]], "polars.testing.parametric.column": [[141, "polars-testing-parametric-column"]], "Config": [[150, "config"]], "Config options": [[150, "config-options"]], "Config load, save, and current state": [[150, "config-load-save-and-current-state"]], "Use as a context manager": [[150, "use-as-a-context-manager"]], "Use as a function decorator": [[150, "use-as-a-function-decorator"]], "polars.concat": [[86, "polars-concat"]], "polars.testing.parametric.load_profile": [[145, "polars-testing-parametric-load-profile"]], "polars.read_ods": [[125, "polars-read-ods"]], "polars.get_index_type": [[111, "polars-get-index-type"]], "polars.collect_all_async": [[85, "polars-collect-all-async"]], "polars.read_ndjson": [[124, "polars-read-ndjson"]], "polars.testing.parametric.create_list_strategy": [[143, "polars-testing-parametric-create-list-strategy"]], "polars.scan_ndjson": [[132, "polars-scan-ndjson"]], "polars.read_database_uri": [[117, "polars-read-database-uri"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Null": [[61, "polars-null"]], "polars.Int64": [[55, "polars-int64"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.UInt16": [[72, "polars-uint16"]], "polars.SQLContext.register_many": [[66, "polars-sqlcontext-register-many"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.Array": [[2, "polars-array"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Struct": [[70, "polars-struct"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Date": [[47, "polars-date"]], "polars.Int16": [[53, "polars-int16"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.StringCache": [[69, "polars-stringcache"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.LazyFrame.sink_parquet": [[59, "polars-lazyframe-sink-parquet"]], "polars.Float64": [[52, "polars-float64"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Object": [[62, "polars-object"]], "polars.SQLContext.tables": [[67, "polars-sqlcontext-tables"]], "polars.LazyFrame.sink_csv": [[57, "polars-lazyframe-sink-csv"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "Index": [[0, "index"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.List": [[60, "polars-list"]], "polars.LazyFrame.sink_ipc": [[58, "polars-lazyframe-sink-ipc"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.SQLContext.register_globals": [[65, "polars-sqlcontext-register-globals"]], "polars.Binary": [[3, "polars-binary"]], "polars.Unknown": [[76, "polars-unknown"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.SQLContext.execute": [[63, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.UInt64": [[74, "polars-uint64"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.UInt8": [[75, "polars-uint8"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.SQLContext.register": [[64, "polars-sqlcontext-register"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.UInt32": [[73, "polars-uint32"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Time": [[71, "polars-time"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Float32": [[51, "polars-float32"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1192, "examples"], [834, "examples"]], "polars.Int8": [[56, "polars-int8"]], "polars.Int32": [[54, "polars-int32"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.SQLContext.unregister": [[68, "polars-sqlcontext-unregister"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Series.str.ljust": [[1119, "polars-series-str-ljust"]], "polars.Series.str.starts_with": [[1133, "polars-series-str-starts-with"]], "polars.Series.str.splitn": [[1132, "polars-series-str-splitn"]], "polars.Series.str.rjust": [[1127, "polars-series-str-rjust"]], "polars.Series.set_sorted": [[1087, "polars-series-set-sorted"]], "polars.Series.str.rstrip": [[1128, "polars-series-str-rstrip"]], "polars.Series.str.split": [[1130, "polars-series-str-split"]], "polars.Series.str.strip": [[1134, "polars-series-str-strip"]], "polars.Series.str.len_chars": [[1117, "polars-series-str-len-chars"]], "polars.Series.str.count_matches": [[1106, "polars-series-str-count-matches"]], "polars.Series.str.extract_groups": [[1113, "polars-series-str-extract-groups"]], "polars.Series.str.concat": [[1103, "polars-series-str-concat"]], "polars.Series.sign": [[1094, "polars-series-sign"]], "polars.Series.str.explode": [[1110, "polars-series-str-explode"]], "polars.Series.str.to_lowercase": [[1144, "polars-series-str-to-lowercase"]], "polars.Series.str.ends_with": [[1109, "polars-series-str-ends-with"]], "polars.Series.struct.field": [[1149, "polars-series-struct-field"]], "polars.Series.search_sorted": [[1083, "polars-series-search-sorted"]], "polars.Series.series_equal": [[1084, "polars-series-series-equal"]], "polars.Series.str.count_match": [[1105, "polars-series-str-count-match"]], "polars.Series.rolling_std": [[1078, "polars-series-rolling-std"]], "polars.Series.sinh": [[1096, "polars-series-sinh"]], "polars.Series.sort": [[1099, "polars-series-sort"]], "polars.Series.shuffle": [[1093, "polars-series-shuffle"]], "polars.Series.str.split_exact": [[1131, "polars-series-str-split-exact"]], "polars.Series.shift": [[1089, "polars-series-shift"]], "polars.Series.str.pad_start": [[1123, "polars-series-str-pad-start"]], "polars.Series.struct.schema": [[1152, "polars-series-struct-schema"]], "polars.Series.std": [[1101, "polars-series-std"]], "polars.Series.str.replace_all": [[1126, "polars-series-str-replace-all"]], "polars.Series.str.len_bytes": [[1116, "polars-series-str-len-bytes"]], "polars.Series.str.slice": [[1129, "polars-series-str-slice"]], "polars.Series.struct.unnest": [[1153, "polars-series-struct-unnest"]], "polars.Series.str.strip_suffix": [[1139, "polars-series-str-strip-suffix"]], "polars.Series.slice": [[1098, "polars-series-slice"]], "polars.Series.shift_and_fill": [[1090, "polars-series-shift-and-fill"]], "polars.Series.str.encode": [[1108, "polars-series-str-encode"]], "polars.Series.str.to_titlecase": [[1146, "polars-series-str-to-titlecase"]], "polars.Series.set_at_idx": [[1086, "polars-series-set-at-idx"]], "polars.Series.sum": [[1154, "polars-series-sum"]], "polars.Series.str.extract_all": [[1112, "polars-series-str-extract-all"]], "polars.Series.str.to_datetime": [[1142, "polars-series-str-to-datetime"]], "polars.Series.rolling_sum": [[1079, "polars-series-rolling-sum"]], "polars.Series.sin": [[1095, "polars-series-sin"]], "polars.Series.str.json_path_match": [[1115, "polars-series-str-json-path-match"]], "polars.Series.shrink_dtype": [[1091, "polars-series-shrink-dtype"]], "polars.Series.str.parse_int": [[1124, "polars-series-str-parse-int"]], "polars.Series.str.decode": [[1107, "polars-series-str-decode"]], "polars.Series.str": [[1102, "polars-series-str"]], "polars.Series.str.contains": [[1104, "polars-series-str-contains"]], "polars.Series.shape": [[1088, "polars-series-shape"]], "polars.Series.sample": [[1082, "polars-series-sample"]], "polars.Series.str.json_extract": [[1114, "polars-series-str-json-extract"]], "polars.Series.str.strip_chars_start": [[1137, "polars-series-str-strip-chars-start"]], "polars.Series.str.to_time": [[1145, "polars-series-str-to-time"]], "polars.Series.str.lengths": [[1118, "polars-series-str-lengths"]], "polars.Series.str.zfill": [[1148, "polars-series-str-zfill"]], "polars.Series.str.strip_chars": [[1135, "polars-series-str-strip-chars"]], "polars.Series.set": [[1085, "polars-series-set"]], "polars.Series.str.to_date": [[1141, "polars-series-str-to-date"]], "polars.Series.rolling_var": [[1080, "polars-series-rolling-var"]], "polars.Series.str.to_uppercase": [[1147, "polars-series-str-to-uppercase"]], "polars.Series.shrink_to_fit": [[1092, "polars-series-shrink-to-fit"]], "polars.Series.str.pad_end": [[1122, "polars-series-str-pad-end"]], "polars.Series.str.strip_chars_end": [[1136, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_prefix": [[1138, "polars-series-str-strip-prefix"]], "polars.Series.str.to_decimal": [[1143, "polars-series-str-to-decimal"]], "polars.Series.str.extract": [[1111, "polars-series-str-extract"]], "polars.Series.struct.rename_fields": [[1151, "polars-series-struct-rename-fields"]], "polars.Series.sqrt": [[1100, "polars-series-sqrt"]], "polars.Series.str.lstrip": [[1120, "polars-series-str-lstrip"]], "polars.Series.struct.fields": [[1150, "polars-series-struct-fields"]], "polars.Series.str.n_chars": [[1121, "polars-series-str-n-chars"]], "polars.Series.str.strptime": [[1140, "polars-series-str-strptime"]], "polars.Series.skew": [[1097, "polars-series-skew"]], "polars.Series.str.replace": [[1125, "polars-series-str-replace"]], "polars.Series.round": [[1081, "polars-series-round"]], "polars.Series.list.shift": [[1026, "polars-series-list-shift"]], "polars.Series.pct_change": [[1056, "polars-series-pct-change"]], "polars.Series.list.get": [[1010, "polars-series-list-get"]], "polars.Series.list.to_array": [[1033, "polars-series-list-to-array"]], "polars.Series.list.join": [[1013, "polars-series-list-join"]], "polars.Series.product": [[1059, "polars-series-product"]], "polars.Series.list.take": [[1032, "polars-series-list-take"]], "polars.Series.list.set_symmetric_difference": [[1024, "polars-series-list-set-symmetric-difference"]], "polars.Series.max": [[1043, "polars-series-max"]], "polars.Series.rolling_mean": [[1073, "polars-series-rolling-mean"]], "polars.Series.list.first": [[1009, "polars-series-list-first"]], "polars.Series.rolling_quantile": [[1076, "polars-series-rolling-quantile"]], "polars.Series.rle": [[1068, "polars-series-rle"]], "polars.Series.list.count_match": [[1002, "polars-series-list-count-match"]], "polars.Series.list.count_matches": [[1003, "polars-series-list-count-matches"]], "polars.Series.rolling_max": [[1072, "polars-series-rolling-max"]], "polars.Series.list.symmetric_difference": [[1030, "polars-series-list-symmetric-difference"]], "polars.Series.list.diff": [[1004, "polars-series-list-diff"]], "polars.Series.reinterpret": [[1064, "polars-series-reinterpret"]], "polars.Series.rolling_median": [[1074, "polars-series-rolling-median"]], "polars.Series.rank": [[1062, "polars-series-rank"]], "polars.Series.null_count": [[1055, "polars-series-null-count"]], "polars.Series.list.sum": [[1029, "polars-series-list-sum"]], "polars.Series.name": [[1050, "polars-series-name"]], "polars.Series.rename": [[1065, "polars-series-rename"]], "polars.Series.list.max": [[1017, "polars-series-list-max"]], "polars.Series.list.last": [[1014, "polars-series-list-last"]], "polars.Series.list.drop_nulls": [[1006, "polars-series-list-drop-nulls"]], "polars.Series.list.contains": [[1001, "polars-series-list-contains"]], "polars.Series.list.eval": [[1007, "polars-series-list-eval"]], "polars.Series.list.union": [[1035, "polars-series-list-union"]], "polars.Series.rolling_skew": [[1077, "polars-series-rolling-skew"]], "polars.Series.not_": [[1054, "polars-series-not"]], "polars.Series.list.set_intersection": [[1023, "polars-series-list-set-intersection"]], "polars.Series.lower_bound": [[1040, "polars-series-lower-bound"]], "polars.Series.quantile": [[1061, "polars-series-quantile"]], "polars.Series.rolling_map": [[1071, "polars-series-rolling-map"]], "polars.Series.list.lengths": [[1016, "polars-series-list-lengths"]], "polars.Series.log1p": [[1039, "polars-series-log1p"]], "polars.Series.list.set_difference": [[1022, "polars-series-list-set-difference"]], "polars.Series.list.head": [[1011, "polars-series-list-head"]], "polars.Series.list.reverse": [[1020, "polars-series-list-reverse"]], "polars.Series.nan_max": [[1051, "polars-series-nan-max"]], "polars.Series.list.sort": [[1028, "polars-series-list-sort"]], "polars.Series.map_dict": [[1041, "polars-series-map-dict"]], "polars.Series.n_unique": [[1049, "polars-series-n-unique"]], "polars.Series.reshape": [[1066, "polars-series-reshape"]], "polars.Series.mean": [[1044, "polars-series-mean"]], "polars.Series.rolling_min": [[1075, "polars-series-rolling-min"]], "polars.Series.rle_id": [[1069, "polars-series-rle-id"]], "polars.Series.log": [[1037, "polars-series-log"]], "polars.Series.list.difference": [[1005, "polars-series-list-difference"]], "polars.Series.list.intersection": [[1012, "polars-series-list-intersection"]], "polars.Series.list.slice": [[1027, "polars-series-list-slice"]], "polars.Series.list.explode": [[1008, "polars-series-list-explode"]], "polars.Series.list.to_struct": [[1034, "polars-series-list-to-struct"]], "polars.Series.new_from_index": [[1053, "polars-series-new-from-index"]], "polars.Series.nan_min": [[1052, "polars-series-nan-min"]], "polars.Series.list.tail": [[1031, "polars-series-list-tail"]], "polars.Series.list.mean": [[1018, "polars-series-list-mean"]], "polars.Series.list.min": [[1019, "polars-series-list-min"]], "polars.Series.list.set_union": [[1025, "polars-series-list-set-union"]], "polars.Series.rolling_apply": [[1070, "polars-series-rolling-apply"]], "polars.Series.mode": [[1047, "polars-series-mode"]], "polars.Series.peak_min": [[1058, "polars-series-peak-min"]], "polars.Series.list.sample": [[1021, "polars-series-list-sample"]], "polars.Series.min": [[1046, "polars-series-min"]], "polars.Series.map_elements": [[1042, "polars-series-map-elements"]], "polars.Series.rechunk": [[1063, "polars-series-rechunk"]], "polars.Series.reverse": [[1067, "polars-series-reverse"]], "polars.Series.log10": [[1038, "polars-series-log10"]], "polars.Series.peak_max": [[1057, "polars-series-peak-max"]], "polars.Series.list.unique": [[1036, "polars-series-list-unique"]], "polars.Series.qcut": [[1060, "polars-series-qcut"]], "polars.Series.median": [[1045, "polars-series-median"]], "polars.Series.n_chunks": [[1048, "polars-series-n-chunks"]], "polars.Series.list.len": [[1015, "polars-series-list-len"]], "polars.Series.extend": [[954, "polars-series-extend"]], "polars.Series.entropy": [[947, "polars-series-entropy"]], "polars.Series.exp": [[952, "polars-series-exp"]], "polars.Series.dt.year": [[945, "polars-series-dt-year"]], "polars.Series.dt.weekday": [[943, "polars-series-dt-weekday"]], "polars.Series.len": [[993, "polars-series-len"]], "polars.Series.is_last_distinct": [[981, "polars-series-is-last-distinct"]], "polars.Series.is_empty": [[972, "polars-series-is-empty"]], "polars.Series.estimated_size": [[948, "polars-series-estimated-size"]], "polars.Series.is_temporal": [[988, "polars-series-is-temporal"]], "polars.Series.extend_constant": [[955, "polars-series-extend-constant"]], "polars.Series.fill_nan": [[956, "polars-series-fill-nan"]], "polars.Series.dt.week": [[942, "polars-series-dt-week"]], "polars.Series.hist": [[965, "polars-series-hist"]], "polars.Series.dt.strftime": [[930, "polars-series-dt-strftime"]], "polars.Series.is_utf8": [[990, "polars-series-is-utf8"]], "polars.Series.is_float": [[976, "polars-series-is-float"]], "polars.Series.dt.round": [[927, "polars-series-dt-round"]], "polars.Series.dt.total_minutes": [[938, "polars-series-dt-total-minutes"]], "polars.Series.explode": [[953, "polars-series-explode"]], "polars.Series.dt.second": [[928, "polars-series-dt-second"]], "polars.Series.is_integer": [[979, "polars-series-is-integer"]], "polars.Series.is_unique": [[989, "polars-series-is-unique"]], "polars.Series.is_boolean": [[970, "polars-series-is-boolean"]], "polars.Series.dt.truncate": [[941, "polars-series-dt-truncate"]], "polars.Series.dt.seconds": [[929, "polars-series-dt-seconds"]], "polars.Series.is_between": [[969, "polars-series-is-between"]], "polars.Series.dtype": [[946, "polars-series-dtype"]], "polars.Series.floor": [[960, "polars-series-floor"]], "polars.Series.flags": [[959, "polars-series-flags"]], "polars.Series.is_infinite": [[978, "polars-series-is-infinite"]], "polars.Series.dt.ordinal_day": [[924, "polars-series-dt-ordinal-day"]], "polars.Series.implode": [[966, "polars-series-implode"]], "polars.Series.dt.total_seconds": [[940, "polars-series-dt-total-seconds"]], "polars.Series.inner_dtype": [[967, "polars-series-inner-dtype"]], "polars.Series.is_sorted": [[987, "polars-series-is-sorted"]], "polars.Series.list.all": [[996, "polars-series-list-all"]], "polars.Series.item": [[991, "polars-series-item"]], "polars.Series.dt.quarter": [[925, "polars-series-dt-quarter"]], "polars.Series.fill_null": [[957, "polars-series-fill-null"]], "polars.Series.filter": [[958, "polars-series-filter"]], "polars.Series.dt.total_nanoseconds": [[939, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.with_time_unit": [[944, "polars-series-dt-with-time-unit"]], "polars.Series.ewm_var": [[951, "polars-series-ewm-var"]], "polars.Series.is_not_null": [[984, "polars-series-is-not-null"]], "polars.Series.get_chunks": [[961, "polars-series-get-chunks"]], "polars.Series.is_nan": [[982, "polars-series-is-nan"]], "polars.Series.list.arg_max": [[998, "polars-series-list-arg-max"]], "polars.Series.is_finite": [[973, "polars-series-is-finite"]], "polars.Series.head": [[964, "polars-series-head"]], "polars.Series.is_first": [[974, "polars-series-is-first"]], "polars.Series.list.arg_min": [[999, "polars-series-list-arg-min"]], "polars.Series.ewm_mean": [[949, "polars-series-ewm-mean"]], "polars.Series.is_in": [[977, "polars-series-is-in"]], "polars.Series.dt.total_microseconds": [[936, "polars-series-dt-total-microseconds"]], "polars.Series.dt.total_milliseconds": [[937, "polars-series-dt-total-milliseconds"]], "polars.Series.has_validity": [[962, "polars-series-has-validity"]], "polars.Series.list": [[995, "polars-series-list"]], "polars.Series.dt.time": [[931, "polars-series-dt-time"]], "polars.Series.list.concat": [[1000, "polars-series-list-concat"]], "polars.Series.is_not_nan": [[983, "polars-series-is-not-nan"]], "polars.Series.dt.timestamp": [[932, "polars-series-dt-timestamp"]], "polars.Series.is_last": [[980, "polars-series-is-last"]], "polars.Series.hash": [[963, "polars-series-hash"]], "polars.Series.dt.replace_time_zone": [[926, "polars-series-dt-replace-time-zone"]], "polars.Series.ewm_std": [[950, "polars-series-ewm-std"]], "polars.Series.dt.total_hours": [[935, "polars-series-dt-total-hours"]], "polars.Series.interpolate": [[968, "polars-series-interpolate"]], "polars.Series.is_duplicated": [[971, "polars-series-is-duplicated"]], "polars.Series.kurtosis": [[992, "polars-series-kurtosis"]], "polars.Series.is_null": [[985, "polars-series-is-null"]], "polars.Series.is_first_distinct": [[975, "polars-series-is-first-distinct"]], "polars.Series.list.any": [[997, "polars-series-list-any"]], "polars.Series.dt.total_days": [[934, "polars-series-dt-total-days"]], "polars.Series.limit": [[994, "polars-series-limit"]], "polars.Series.dt.to_string": [[933, "polars-series-dt-to-string"]], "polars.Series.is_numeric": [[986, "polars-series-is-numeric"]], "polars.Series.drop_nans": [[891, "polars-series-drop-nans"]], "polars.Series.dt.nanosecond": [[921, "polars-series-dt-nanosecond"]], "polars.Series.arr.max": [[853, "polars-series-arr-max"]], "polars.Series.clip_max": [[876, "polars-series-clip-max"]], "polars.Series.dt.hour": [[904, "polars-series-dt-hour"]], "polars.Series.arctanh": [[847, "polars-series-arctanh"]], "polars.Series.bin.encode": [[860, "polars-series-bin-encode"]], "polars.Series.arr.min": [[854, "polars-series-arr-min"]], "polars.Series.dt.milliseconds": [[914, "polars-series-dt-milliseconds"]], "polars.Series.dt.hours": [[905, "polars-series-dt-hours"]], "polars.Series.dt.combine": [[896, "polars-series-dt-combine"]], "polars.Series.bin.ends_with": [[861, "polars-series-bin-ends-with"]], "polars.Series.cumulative_eval": [[886, "polars-series-cumulative-eval"]], "polars.Series.cummin": [[883, "polars-series-cummin"]], "polars.Series.dt.mean": [[909, "polars-series-dt-mean"]], "polars.Series.clone": [[878, "polars-series-clone"]], "polars.Series.bin.decode": [[859, "polars-series-bin-decode"]], "polars.Series.arg_max": [[848, "polars-series-arg-max"]], "polars.Series.dt.date": [[898, "polars-series-dt-date"]], "polars.Series.dt.dst_offset": [[902, "polars-series-dt-dst-offset"]], "polars.Series.cat.set_ordering": [[868, "polars-series-cat-set-ordering"]], "polars.Series.dt": [[893, "polars-series-dt"]], "polars.Series.dt.cast_time_unit": [[895, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.days": [[901, "polars-series-dt-days"]], "polars.Series.cat.get_categories": [[866, "polars-series-cat-get-categories"]], "polars.Series.clip_min": [[877, "polars-series-clip-min"]], "polars.Series.dt.iso_year": [[907, "polars-series-dt-iso-year"]], "polars.Series.dt.month": [[918, "polars-series-dt-month"]], "polars.Series.clear": [[874, "polars-series-clear"]], "polars.Series.describe": [[888, "polars-series-describe"]], "polars.Series.cummax": [[882, "polars-series-cummax"]], "polars.Series.dt.nanoseconds": [[922, "polars-series-dt-nanoseconds"]], "polars.Series.dt.convert_time_zone": [[897, "polars-series-dt-convert-time-zone"]], "polars.Series.arr.sum": [[855, "polars-series-arr-sum"]], "polars.Series.arg_sort": [[850, "polars-series-arg-sort"]], "polars.Series.arr.to_list": [[856, "polars-series-arr-to-list"]], "polars.Series.dt.microsecond": [[911, "polars-series-dt-microsecond"]], "polars.Series.dt.epoch": [[903, "polars-series-dt-epoch"]], "polars.Series.dt.offset_by": [[923, "polars-series-dt-offset-by"]], "polars.Series.cat.uses_lexical_ordering": [[870, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cosh": [[880, "polars-series-cosh"]], "polars.Series.dt.minutes": [[917, "polars-series-dt-minutes"]], "polars.Series.dot": [[890, "polars-series-dot"]], "polars.Series.ceil": [[872, "polars-series-ceil"]], "polars.Series.dt.datetime": [[899, "polars-series-dt-datetime"]], "polars.Series.cos": [[879, "polars-series-cos"]], "polars.Series.dt.max": [[908, "polars-series-dt-max"]], "polars.Series.cat.is_local": [[867, "polars-series-cat-is-local"]], "polars.Series.bottom_k": [[863, "polars-series-bottom-k"]], "polars.Series.dt.month_end": [[919, "polars-series-dt-month-end"]], "polars.Series.cot": [[881, "polars-series-cot"]], "polars.Series.bin.starts_with": [[862, "polars-series-bin-starts-with"]], "polars.Series.cat.to_local": [[869, "polars-series-cat-to-local"]], "polars.Series.cat": [[865, "polars-series-cat"]], "polars.Series.clip": [[875, "polars-series-clip"]], "polars.Series.dt.minute": [[916, "polars-series-dt-minute"]], "polars.Series.chunk_lengths": [[873, "polars-series-chunk-lengths"]], "polars.Series.cbrt": [[871, "polars-series-cbrt"]], "polars.Series.dt.median": [[910, "polars-series-dt-median"]], "polars.Series.cut": [[887, "polars-series-cut"]], "polars.Series.arg_true": [[851, "polars-series-arg-true"]], "polars.Series.dt.millisecond": [[913, "polars-series-dt-millisecond"]], "polars.Series.dt.is_leap_year": [[906, "polars-series-dt-is-leap-year"]], "polars.Series.dt.microseconds": [[912, "polars-series-dt-microseconds"]], "polars.Series.cast": [[864, "polars-series-cast"]], "polars.Series.dt.day": [[900, "polars-series-dt-day"]], "polars.Series.diff": [[889, "polars-series-diff"]], "polars.Series.arg_min": [[849, "polars-series-arg-min"]], "polars.Series.dt.min": [[915, "polars-series-dt-min"]], "polars.Series.drop_nulls": [[892, "polars-series-drop-nulls"]], "polars.Series.arr.unique": [[857, "polars-series-arr-unique"]], "polars.Series.arg_unique": [[852, "polars-series-arg-unique"]], "polars.Series.cumprod": [[884, "polars-series-cumprod"]], "polars.Series.cumsum": [[885, "polars-series-cumsum"]], "polars.Series.dt.base_utc_offset": [[894, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.month_start": [[920, "polars-series-dt-month-start"]], "polars.Series.bin.contains": [[858, "polars-series-bin-contains"]], "polars.Series.tanh": [[1159, "polars-series-tanh"]], "Series": [[1184, "series"]], "Descriptive": [[1182, "descriptive"], [829, "descriptive"], [282, "descriptive"]], "polars.Series.zip_with": [[1175, "polars-series-zip-with"]], "SQL": [[1191, "sql"]], "Methods": [[1191, "methods"]], "polars.Series.to_list": [[1164, "polars-series-to-list"]], "Manipulation/selection": [[1187, "manipulation-selection"], [833, "manipulation-selection"], [724, "manipulation-selection"], [287, "manipulation-selection"]], "Utils": [[1193, "utils"]], "polars.Series.view": [[1174, "polars-series-view"]], "String": [[1188, "string"], [727, "string"]], "polars.Series.upper_bound": [[1171, "polars-series-upper-bound"]], "Boolean": [[1179, "boolean"], [714, "boolean"]], "polars.Series.tan": [[1158, "polars-series-tan"]], "polars.Series.top_k": [[1168, "polars-series-top-k"]], "polars.Series.tail": [[1155, "polars-series-tail"]], "polars.Series.unique": [[1169, "polars-series-unique"]], "List": [[1185, "list"], [721, "list"]], "polars.Series.value_counts": [[1172, "polars-series-value-counts"]], "polars.Series.to_physical": [[1167, "polars-series-to-physical"]], "polars.Series.unique_counts": [[1170, "polars-series-unique-counts"]], "polars.Series.to_numpy": [[1165, "polars-series-to-numpy"]], "polars.Series.to_frame": [[1162, "polars-series-to-frame"]], "Categories": [[1180, "categories"], [715, "categories"]], "Computation": [[1181, "computation"], [718, "computation"], [281, "computation"]], "Binary": [[1178, "binary"], [713, "binary"], [726, "binary"]], "Miscellaneous": [[1186, "miscellaneous"], [832, "miscellaneous"], [731, "miscellaneous"], [723, "miscellaneous"], [286, "miscellaneous"]], "polars.Series.take": [[1156, "polars-series-take"]], "polars.Series.to_pandas": [[1166, "polars-series-to-pandas"]], "Attributes": [[1177, "attributes"], [828, "attributes"], [280, "attributes"]], "polars.Series.to_arrow": [[1160, "polars-series-to-arrow"]], "polars.Series.var": [[1173, "polars-series-var"]], "Export": [[1183, "export"], [283, "export"]], "polars.Series.to_init_repr": [[1163, "polars-series-to-init-repr"]], "Struct": [[1189, "struct"], [728, "struct"]], "Temporal": [[1190, "temporal"], [729, "temporal"], [288, "temporal"]], "polars.Series.take_every": [[1157, "polars-series-take-every"]], "polars.Series.to_dummies": [[1161, "polars-series-to-dummies"]], "Array": [[1176, "array"], [712, "array"]], "Testing": [[1192, "testing"]], "Asserts": [[1192, "asserts"]], "Parametric testing": [[1192, "parametric-testing"]], "Polars primitives": [[1192, "polars-primitives"]], "Strategy helpers": [[1192, "strategy-helpers"]], "Profiles": [[1192, "profiles"]], "polars.Series.arcsinh": [[845, "polars-series-arcsinh"]], "polars.LazyFrame.top_k": [[801, "polars-lazyframe-top-k"]], "polars.LazyFrame.rolling": [[786, "polars-lazyframe-rolling"]], "polars.LazyFrame.with_columns": [[807, "polars-lazyframe-with-columns"]], "polars.LazyFrame.select": [[788, "polars-lazyframe-select"]], "polars.LazyFrame.reverse": [[785, "polars-lazyframe-reverse"]], "Read/write logical plan": [[832, "read-write-logical-plan"]], "polars.LazyFrame.slice": [[795, "polars-lazyframe-slice"]], "polars.LazyFrame.var": [[805, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[818, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.LazyFrame.map": [[771, "polars-lazyframe-map"]], "polars.LazyFrame.quantile": [[782, "polars-lazyframe-quantile"]], "polars.LazyFrame.read_json": [[783, "polars-lazyframe-read-json"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[826, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.limit": [[770, "polars-lazyframe-limit"]], "polars.LazyFrame.profile": [[781, "polars-lazyframe-profile"]], "polars.LazyFrame.serialize": [[790, "polars-lazyframe-serialize"]], "polars.LazyFrame.width": [[806, "polars-lazyframe-width"]], "polars.LazyFrame.sum": [[798, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[799, "polars-lazyframe-tail"]], "polars.LazyFrame.max": [[773, "polars-lazyframe-max"]], "polars.LazyFrame.shift_and_fill": [[793, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[814, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[819, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.LazyFrame.rename": [[784, "polars-lazyframe-rename"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[825, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[821, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.merge_sorted": [[777, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.sort": [[796, "polars-lazyframe-sort"]], "Selectors": [[834, "selectors"]], "Importing": [[834, "importing"]], "Set operations": [[834, "set-operations"]], "Functions": [[834, "functions"], [731, "functions"], [719, "functions"]], "polars.Series.all": [[838, "polars-series-all"]], "polars.LazyFrame.with_context": [[809, "polars-lazyframe-with-context"]], "polars.LazyFrame.unique": [[802, "polars-lazyframe-unique"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[820, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.pipe": [[780, "polars-lazyframe-pipe"]], "polars.LazyFrame.update": [[804, "polars-lazyframe-update"]], "polars.LazyFrame.select_seq": [[789, "polars-lazyframe-select-seq"]], "polars.Series.arccos": [[842, "polars-series-arccos"]], "polars.LazyFrame.with_row_count": [[810, "polars-lazyframe-with-row-count"]], "polars.Series.alias": [[837, "polars-series-alias"]], "GroupBy": [[830, "groupby"], [284, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[816, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.with_columns_seq": [[808, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.std": [[797, "polars-lazyframe-std"]], "polars.LazyFrame.median": [[775, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[776, "polars-lazyframe-melt"]], "polars.Series.arcsin": [[844, "polars-series-arcsin"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[824, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.Series.apply": [[841, "polars-series-apply"]], "polars.LazyFrame.shift": [[792, "polars-lazyframe-shift"]], "polars.LazyFrame.schema": [[787, "polars-lazyframe-schema"]], "polars.LazyFrame.take_every": [[800, "polars-lazyframe-take-every"]], "polars.Series.arctan": [[846, "polars-series-arctan"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[822, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[827, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[812, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.set_sorted": [[791, "polars-lazyframe-set-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[815, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.Series.abs": [[836, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[817, "polars-lazyframe-group-by-lazygroupby-head"]], "LazyFrame": [[831, "lazyframe"]], "polars.Series.any": [[839, "polars-series-any"]], "polars.LazyFrame.mean": [[774, "polars-lazyframe-mean"]], "polars.Series.arccosh": [[843, "polars-series-arccosh"]], "polars.LazyFrame.show_graph": [[794, "polars-lazyframe-show-graph"]], "polars.LazyFrame.null_count": [[779, "polars-lazyframe-null-count"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[813, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.unnest": [[803, "polars-lazyframe-unnest"]], "polars.Series.append": [[840, "polars-series-append"]], "polars.LazyFrame.min": [[778, "polars-lazyframe-min"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[823, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.map_batches": [[772, "polars-lazyframe-map-batches"]], "polars.LazyFrame.write_json": [[811, "polars-lazyframe-write-json"]], "polars.mean": [[688, "polars-mean"]], "polars.Expr.suffix": [[624, "polars-expr-suffix"]], "polars.cov": [[658, "polars-cov"]], "polars.Expr.value_counts": [[637, "polars-expr-value-counts"]], "polars.date_ranges": [[665, "polars-date-ranges"]], "polars.apply": [[645, "polars-apply"]], "polars.fold": [[673, "polars-fold"]], "polars.duration": [[669, "polars-duration"]], "polars.Expr.str.to_time": [[617, "polars-expr-str-to-time"]], "polars.Expr.struct.rename_fields": [[622, "polars-expr-struct-rename-fields"]], "polars.Expr.take_every": [[628, "polars-expr-take-every"]], "polars.exclude": [[671, "polars-exclude"]], "polars.Expr.unique": [[634, "polars-expr-unique"]], "polars.count": [[657, "polars-count"]], "polars.cumreduce": [[660, "polars-cumreduce"]], "polars.datetime_range": [[667, "polars-datetime-range"]], "polars.coalesce": [[653, "polars-coalesce"]], "polars.Expr.str.to_titlecase": [[618, "polars-expr-str-to-titlecase"]], "polars.element": [[670, "polars-element"]], "polars.Expr.where": [[639, "polars-expr-where"]], "polars.implode": [[678, "polars-implode"]], "polars.cumfold": [[659, "polars-cumfold"]], "polars.Expr.unique_counts": [[635, "polars-expr-unique-counts"]], "polars.corr": [[656, "polars-corr"]], "polars.n_unique": [[692, "polars-n-unique"]], "polars.Expr.to_physical": [[631, "polars-expr-to-physical"]], "polars.groups": [[676, "polars-groups"]], "polars.Expr.take": [[627, "polars-expr-take"]], "polars.Expr.xor": [[640, "polars-expr-xor"]], "polars.arange": [[647, "polars-arange"]], "polars.Expr.top_k": [[632, "polars-expr-top-k"]], "polars.avg": [[652, "polars-avg"]], "polars.max_horizontal": [[687, "polars-max-horizontal"]], "polars.all_horizontal": [[642, "polars-all-horizontal"]], "polars.arg_sort_by": [[650, "polars-arg-sort-by"]], "polars.from_epoch": [[675, "polars-from-epoch"]], "polars.Expr.str.zfill": [[620, "polars-expr-str-zfill"]], "polars.map_batches": [[684, "polars-map-batches"]], "polars.lit": [[682, "polars-lit"]], "polars.Expr.var": [[638, "polars-expr-var"]], "polars.concat_list": [[654, "polars-concat-list"]], "polars.cumsum_horizontal": [[662, "polars-cumsum-horizontal"]], "polars.Expr.str.to_uppercase": [[619, "polars-expr-str-to-uppercase"]], "polars.datetime": [[666, "polars-datetime"]], "polars.Expr.tanh": [[630, "polars-expr-tanh"]], "polars.median": [[689, "polars-median"]], "polars.all": [[641, "polars-all"]], "polars.arg_where": [[651, "polars-arg-where"]], "polars.min_horizontal": [[691, "polars-min-horizontal"]], "polars.any": [[643, "polars-any"]], "polars.Expr.sum": [[625, "polars-expr-sum"]], "polars.date": [[663, "polars-date"]], "polars.head": [[677, "polars-head"]], "polars.int_range": [[679, "polars-int-range"]], "polars.min": [[690, "polars-min"]], "polars.Expr.str.to_lowercase": [[616, "polars-expr-str-to-lowercase"]], "polars.approx_n_unique": [[646, "polars-approx-n-unique"]], "polars.date_range": [[664, "polars-date-range"]], "polars.map": [[683, "polars-map"]], "polars.arctan2": [[648, "polars-arctan2"]], "polars.Expr.upper_bound": [[636, "polars-expr-upper-bound"]], "polars.int_ranges": [[680, "polars-int-ranges"]], "polars.any_horizontal": [[644, "polars-any-horizontal"]], "polars.Expr.truediv": [[633, "polars-expr-truediv"]], "polars.first": [[672, "polars-first"]], "polars.Expr.sub": [[623, "polars-expr-sub"]], "polars.concat_str": [[655, "polars-concat-str"]], "polars.format": [[674, "polars-format"]], "polars.max": [[686, "polars-max"]], "polars.cumsum": [[661, "polars-cumsum"]], "polars.Expr.tail": [[626, "polars-expr-tail"]], "polars.Expr.tan": [[629, "polars-expr-tan"]], "polars.arctan2d": [[649, "polars-arctan2d"]], "polars.datetime_ranges": [[668, "polars-datetime-ranges"]], "polars.Expr.struct.field": [[621, "polars-expr-struct-field"]], "polars.map_groups": [[685, "polars-map-groups"]], "polars.last": [[681, "polars-last"]], "polars.Expr.str.ljust": [[591, "polars-expr-str-ljust"]], "polars.Expr.shuffle": [[565, "polars-expr-shuffle"]], "polars.Expr.str.decode": [[579, "polars-expr-str-decode"]], "polars.Expr.shrink_dtype": [[564, "polars-expr-shrink-dtype"]], "polars.Expr.sign": [[566, "polars-expr-sign"]], "polars.Expr.reinterpret": [[540, "polars-expr-reinterpret"]], "polars.Expr.rolling_skew": [[554, "polars-expr-rolling-skew"]], "polars.Expr.str.split": [[602, "polars-expr-str-split"]], "polars.Expr.str.len_chars": [[589, "polars-expr-str-len-chars"]], "polars.Expr.shift_and_fill": [[563, "polars-expr-shift-and-fill"]], "polars.Expr.sort": [[571, "polars-expr-sort"]], "polars.Expr.shift": [[562, "polars-expr-shift"]], "polars.Expr.sort_by": [[572, "polars-expr-sort-by"]], "polars.Expr.rechunk": [[539, "polars-expr-rechunk"]], "polars.Expr.str.count_match": [[577, "polars-expr-str-count-match"]], "polars.Expr.repeat_by": [[541, "polars-expr-repeat-by"]], "polars.Expr.rle": [[544, "polars-expr-rle"]], "polars.Expr.str.to_decimal": [[615, "polars-expr-str-to-decimal"]], "polars.Expr.str.pad_start": [[595, "polars-expr-str-pad-start"]], "polars.Expr.rolling_map": [[548, "polars-expr-rolling-map"]], "polars.Expr.skew": [[569, "polars-expr-skew"]], "polars.Expr.str.strip_prefix": [[610, "polars-expr-str-strip-prefix"]], "polars.Expr.sample": [[559, "polars-expr-sample"]], "polars.Expr.rolling_std": [[555, "polars-expr-rolling-std"]], "polars.Expr.search_sorted": [[560, "polars-expr-search-sorted"]], "polars.Expr.str.replace_all": [[598, "polars-expr-str-replace-all"]], "polars.Expr.str.concat": [[575, "polars-expr-str-concat"]], "polars.Expr.str.lstrip": [[592, "polars-expr-str-lstrip"]], "polars.Expr.str.rjust": [[599, "polars-expr-str-rjust"]], "polars.Expr.str.strip_chars_end": [[608, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.extract_all": [[584, "polars-expr-str-extract-all"]], "polars.Expr.str.len_bytes": [[588, "polars-expr-str-len-bytes"]], "polars.Expr.sinh": [[568, "polars-expr-sinh"]], "polars.Expr.str.strip": [[606, "polars-expr-str-strip"]], "polars.Expr.str.strip_chars_start": [[609, "polars-expr-str-strip-chars-start"]], "polars.Expr.rolling_mean": [[550, "polars-expr-rolling-mean"]], "polars.Expr.str.replace": [[597, "polars-expr-str-replace"]], "polars.Expr.str.n_chars": [[593, "polars-expr-str-n-chars"]], "polars.Expr.str.splitn": [[604, "polars-expr-str-splitn"]], "polars.Expr.rolling_var": [[557, "polars-expr-rolling-var"]], "polars.Expr.str.slice": [[601, "polars-expr-str-slice"]], "polars.Expr.str.explode": [[582, "polars-expr-str-explode"]], "polars.Expr.str.starts_with": [[605, "polars-expr-str-starts-with"]], "polars.Expr.str.to_datetime": [[614, "polars-expr-str-to-datetime"]], "polars.Expr.rolling_sum": [[556, "polars-expr-rolling-sum"]], "polars.Expr.str.strip_suffix": [[611, "polars-expr-str-strip-suffix"]], "polars.Expr.std": [[574, "polars-expr-std"]], "polars.Expr.str.split_exact": [[603, "polars-expr-str-split-exact"]], "polars.Expr.str.strip_chars": [[607, "polars-expr-str-strip-chars"]], "polars.Expr.sqrt": [[573, "polars-expr-sqrt"]], "polars.Expr.rolling": [[546, "polars-expr-rolling"]], "polars.Expr.str.contains": [[576, "polars-expr-str-contains"]], "polars.Expr.str.encode": [[580, "polars-expr-str-encode"]], "polars.Expr.rolling_median": [[551, "polars-expr-rolling-median"]], "polars.Expr.str.json_path_match": [[587, "polars-expr-str-json-path-match"]], "polars.Expr.rolling_min": [[552, "polars-expr-rolling-min"]], "polars.Expr.rolling_apply": [[547, "polars-expr-rolling-apply"]], "polars.Expr.set_sorted": [[561, "polars-expr-set-sorted"]], "polars.Expr.str.parse_int": [[596, "polars-expr-str-parse-int"]], "polars.Expr.str.json_extract": [[586, "polars-expr-str-json-extract"]], "polars.Expr.str.strptime": [[612, "polars-expr-str-strptime"]], "polars.Expr.rle_id": [[545, "polars-expr-rle-id"]], "polars.Expr.str.count_matches": [[578, "polars-expr-str-count-matches"]], "polars.Expr.round": [[558, "polars-expr-round"]], "polars.Expr.str.lengths": [[590, "polars-expr-str-lengths"]], "polars.Expr.reshape": [[542, "polars-expr-reshape"]], "polars.Expr.str.extract_groups": [[585, "polars-expr-str-extract-groups"]], "polars.Expr.reverse": [[543, "polars-expr-reverse"]], "polars.Expr.str.extract": [[583, "polars-expr-str-extract"]], "polars.Expr.slice": [[570, "polars-expr-slice"]], "polars.Expr.sin": [[567, "polars-expr-sin"]], "polars.Expr.str.to_date": [[613, "polars-expr-str-to-date"]], "polars.Expr.rolling_quantile": [[553, "polars-expr-rolling-quantile"]], "polars.Expr.str.rstrip": [[600, "polars-expr-str-rstrip"]], "polars.Expr.rolling_max": [[549, "polars-expr-rolling-max"]], "polars.Expr.str.pad_end": [[594, "polars-expr-str-pad-end"]], "polars.Expr.str.ends_with": [[581, "polars-expr-str-ends-with"]], "polars.Expr.log": [[486, "polars-expr-log"]], "polars.Expr.ne": [[522, "polars-expr-ne"]], "polars.Expr.lower_bound": [[489, "polars-expr-lower-bound"]], "polars.Expr.map_alias": [[492, "polars-expr-map-alias"]], "polars.Expr.list.set_intersection": [[472, "polars-expr-list-set-intersection"]], "polars.Expr.list.sample": [[470, "polars-expr-list-sample"]], "polars.Expr.quantile": [[536, "polars-expr-quantile"]], "polars.Expr.meta.is_regex_projection": [[501, "polars-expr-meta-is-regex-projection"]], "polars.Expr.mod": [[510, "polars-expr-mod"]], "polars.Expr.list.sort": [[477, "polars-expr-list-sort"]], "polars.Expr.log1p": [[488, "polars-expr-log1p"]], "polars.Expr.list.set_difference": [[471, "polars-expr-list-set-difference"]], "polars.Expr.map_elements": [[495, "polars-expr-map-elements"]], "polars.Expr.list.set_symmetric_difference": [[473, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.mode": [[511, "polars-expr-mode"]], "polars.Expr.meta.undo_aliases": [[507, "polars-expr-meta-undo-aliases"]], "polars.Expr.pipe": [[531, "polars-expr-pipe"]], "polars.Expr.list.set_union": [[474, "polars-expr-list-set-union"]], "polars.Expr.name.map": [[515, "polars-expr-name-map"]], "polars.Expr.meta.ne": [[502, "polars-expr-meta-ne"]], "polars.Expr.list.min": [[468, "polars-expr-list-min"]], "polars.Expr.ne_missing": [[523, "polars-expr-ne-missing"]], "polars.Expr.list.slice": [[476, "polars-expr-list-slice"]], "polars.Expr.name.keep": [[514, "polars-expr-name-keep"]], "polars.Expr.product": [[534, "polars-expr-product"]], "polars.Expr.meta.output_name": [[503, "polars-expr-meta-output-name"]], "polars.Expr.list.unique": [[485, "polars-expr-list-unique"]], "polars.Expr.n_unique": [[513, "polars-expr-n-unique"]], "polars.Expr.not_": [[524, "polars-expr-not"]], "polars.Expr.list.to_array": [[482, "polars-expr-list-to-array"]], "polars.Expr.meta.tree_format": [[506, "polars-expr-meta-tree-format"]], "polars.Expr.map_dict": [[494, "polars-expr-map-dict"]], "polars.Expr.list.sum": [[478, "polars-expr-list-sum"]], "polars.Expr.prefix": [[533, "polars-expr-prefix"]], "polars.Expr.meta.eq": [[499, "polars-expr-meta-eq"]], "polars.Expr.list.mean": [[467, "polars-expr-list-mean"]], "polars.Expr.log10": [[487, "polars-expr-log10"]], "polars.Expr.mean": [[497, "polars-expr-mean"]], "polars.Expr.list.reverse": [[469, "polars-expr-list-reverse"]], "polars.Expr.pow": [[532, "polars-expr-pow"]], "polars.Expr.nan_min": [[521, "polars-expr-nan-min"]], "polars.Expr.max": [[496, "polars-expr-max"]], "polars.Expr.nan_max": [[520, "polars-expr-nan-max"]], "polars.Expr.map": [[491, "polars-expr-map"]], "polars.Expr.name.to_uppercase": [[519, "polars-expr-name-to-uppercase"]], "polars.Expr.qcut": [[535, "polars-expr-qcut"]], "polars.Expr.list.symmetric_difference": [[479, "polars-expr-list-symmetric-difference"]], "polars.Expr.list.join": [[462, "polars-expr-list-join"]], "polars.Expr.list.union": [[484, "polars-expr-list-union"]], "polars.Expr.lt": [[490, "polars-expr-lt"]], "polars.Expr.meta.pop": [[504, "polars-expr-meta-pop"]], "polars.Expr.list.to_struct": [[483, "polars-expr-list-to-struct"]], "polars.Expr.list.take": [[481, "polars-expr-list-take"]], "polars.Expr.over": [[527, "polars-expr-over"]], "polars.Expr.rank": [[538, "polars-expr-rank"]], "polars.Expr.name.suffix": [[517, "polars-expr-name-suffix"]], "polars.Expr.list.lengths": [[465, "polars-expr-list-lengths"]], "polars.Expr.list.tail": [[480, "polars-expr-list-tail"]], "polars.Expr.or_": [[526, "polars-expr-or"]], "polars.Expr.mul": [[512, "polars-expr-mul"]], "polars.Expr.name.to_lowercase": [[518, "polars-expr-name-to-lowercase"]], "polars.Expr.meta.root_names": [[505, "polars-expr-meta-root-names"]], "polars.Expr.meta.has_multiple_outputs": [[500, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.peak_min": [[530, "polars-expr-peak-min"]], "polars.Expr.name.prefix": [[516, "polars-expr-name-prefix"]], "polars.Expr.radians": [[537, "polars-expr-radians"]], "polars.Expr.peak_max": [[529, "polars-expr-peak-max"]], "polars.Expr.median": [[498, "polars-expr-median"]], "polars.Expr.list.last": [[463, "polars-expr-list-last"]], "polars.Expr.map_batches": [[493, "polars-expr-map-batches"]], "polars.Expr.null_count": [[525, "polars-expr-null-count"]], "polars.Expr.pct_change": [[528, "polars-expr-pct-change"]], "polars.Expr.min": [[509, "polars-expr-min"]], "polars.Expr.meta.write_json": [[508, "polars-expr-meta-write-json"]], "polars.Expr.list.max": [[466, "polars-expr-list-max"]], "polars.Expr.list.shift": [[475, "polars-expr-list-shift"]], "polars.Expr.list.len": [[464, "polars-expr-list-len"]], "polars.LazyFrame.join": [[766, "polars-lazyframe-join"]], "polars.struct": [[702, "polars-struct"]], "Conversion": [[731, "conversion"]], "Parallelization": [[731, "parallelization"]], "Random": [[731, "random"]], "StringCache": [[731, "stringcache"]], "Input/output": [[733, "input-output"]], "CSV": [[733, "csv"]], "Feather/ IPC": [[733, "feather-ipc"]], "Parquet": [[733, "parquet"]], "Database": [[733, "database"]], "JSON": [[733, "json"]], "AVRO": [[733, "avro"]], "Spreadsheet": [[733, "spreadsheet"]], "Apache Iceberg": [[733, "apache-iceberg"]], "Delta Lake": [[733, "delta-lake"]], "Datasets": [[733, "datasets"]], "BatchedCsvReader": [[733, "batchedcsvreader"]], "polars.LazyFrame.approx_n_unique": [[735, "polars-lazyframe-approx-n-unique"]], "Expressions": [[720, "expressions"]], "polars.quantile": [[694, "polars-quantile"]], "Columns / names": [[717, "columns-names"]], "polars.LazyFrame.clear": [[740, "polars-lazyframe-clear"]], "polars.LazyFrame.columns": [[744, "polars-lazyframe-columns"]], "polars.when": [[710, "polars-when"]], "polars.LazyFrame.clone": [[741, "polars-lazyframe-clone"]], "Meta": [[722, "meta"]], "polars.LazyFrame.fill_null": [[753, "polars-lazyframe-fill-null"]], "polars.var": [[709, "polars-var"]], "polars.LazyFrame.deserialize": [[745, "polars-lazyframe-deserialize"]], "polars.sum": [[703, "polars-sum"]], "polars.LazyFrame.head": [[763, "polars-lazyframe-head"]], "polars.rolling_corr": [[697, "polars-rolling-corr"]], "polars.LazyFrame.explode": [[750, "polars-lazyframe-explode"]], "polars.LazyFrame.explain": [[749, "polars-lazyframe-explain"]], "polars.LazyFrame.group_by": [[757, "polars-lazyframe-group-by"]], "polars.ones": [[693, "polars-ones"]], "polars.LazyFrame.dtypes": [[748, "polars-lazyframe-dtypes"]], "polars.LazyFrame.approx_unique": [[736, "polars-lazyframe-approx-unique"]], "polars.LazyFrame.inspect": [[764, "polars-lazyframe-inspect"]], "polars.col": [[716, "polars-col"]], "API reference": [[732, "api-reference"]], "polars.LazyFrame.group_by_dynamic": [[758, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.group_by_rolling": [[759, "polars-lazyframe-group-by-rolling"]], "polars.repeat": [[696, "polars-repeat"]], "polars.LazyFrame.groupby": [[760, "polars-lazyframe-groupby"]], "polars.LazyFrame.first": [[755, "polars-lazyframe-first"]], "polars.time_ranges": [[708, "polars-time-ranges"]], "polars.sql_expr": [[700, "polars-sql-expr"]], "polars.std": [[701, "polars-std"]], "polars.LazyFrame.cache": [[738, "polars-lazyframe-cache"]], "polars.sum_horizontal": [[704, "polars-sum-horizontal"]], "polars.LazyFrame.from_json": [[756, "polars-lazyframe-from-json"]], "polars.time": [[706, "polars-time"]], "polars.reduce": [[695, "polars-reduce"]], "polars.rolling_cov": [[698, "polars-rolling-cov"]], "polars.select": [[699, "polars-select"]], "polars.LazyFrame.drop_nulls": [[747, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.fill_nan": [[752, "polars-lazyframe-fill-nan"]], "Name": [[725, "name"]], "polars.LazyFrame.collect": [[742, "polars-lazyframe-collect"]], "polars.LazyFrame.fetch": [[751, "polars-lazyframe-fetch"]], "polars.LazyFrame.interpolate": [[765, "polars-lazyframe-interpolate"]], "polars.tail": [[705, "polars-tail"]], "polars.LazyFrame.collect_async": [[743, "polars-lazyframe-collect-async"]], "polars.LazyFrame.lazy": [[769, "polars-lazyframe-lazy"]], "Window": [[730, "window"]], "polars.LazyFrame.last": [[768, "polars-lazyframe-last"]], "polars.time_range": [[707, "polars-time-range"]], "Operators": [[726, "operators"]], "Conjunction": [[726, "conjunction"]], "Comparison": [[726, "comparison"]], "Numeric": [[726, "numeric"], [288, "numeric"]], "polars.LazyFrame.cast": [[739, "polars-lazyframe-cast"]], "polars.LazyFrame.join_asof": [[767, "polars-lazyframe-join-asof"]], "polars.LazyFrame.groupby_rolling": [[762, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.drop": [[746, "polars-lazyframe-drop"]], "polars.zeros": [[711, "polars-zeros"]], "polars.LazyFrame.groupby_dynamic": [[761, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.filter": [[754, "polars-lazyframe-filter"]], "polars.LazyFrame.bottom_k": [[737, "polars-lazyframe-bottom-k"]], "polars.Expr.list.first": [[458, "polars-expr-list-first"]], "polars.Expr.gt": [[418, "polars-expr-gt"]], "polars.Expr.le": [[442, "polars-expr-le"]], "polars.Expr.limit": [[444, "polars-expr-limit"]], "polars.Expr.is_first_distinct": [[428, "polars-expr-is-first-distinct"]], "polars.Expr.is_infinite": [[430, "polars-expr-is-infinite"]], "polars.Expr.dt.truncate": [[392, "polars-expr-dt-truncate"]], "polars.Expr.dt.total_minutes": [[389, "polars-expr-dt-total-minutes"]], "polars.Expr.list.count_matches": [[452, "polars-expr-list-count-matches"]], "polars.Expr.list.arg_min": [[448, "polars-expr-list-arg-min"]], "polars.Expr.eq_missing": [[399, "polars-expr-eq-missing"]], "polars.Expr.hash": [[419, "polars-expr-hash"]], "polars.Expr.ewm_mean": [[400, "polars-expr-ewm-mean"]], "polars.Expr.dt.total_hours": [[386, "polars-expr-dt-total-hours"]], "polars.Expr.flatten": [[411, "polars-expr-flatten"]], "polars.Expr.first": [[410, "polars-expr-first"]], "polars.Expr.inspect": [[422, "polars-expr-inspect"]], "polars.Expr.ewm_var": [[402, "polars-expr-ewm-var"]], "polars.Expr.is_in": [[429, "polars-expr-is-in"]], "polars.Expr.interpolate": [[423, "polars-expr-interpolate"]], "polars.Expr.list.drop_nulls": [[455, "polars-expr-list-drop-nulls"]], "polars.Expr.is_unique": [[438, "polars-expr-is-unique"]], "polars.Expr.dt.total_microseconds": [[387, "polars-expr-dt-total-microseconds"]], "polars.Expr.is_duplicated": [[425, "polars-expr-is-duplicated"]], "polars.Expr.dt.total_milliseconds": [[388, "polars-expr-dt-total-milliseconds"]], "polars.Expr.filter": [[409, "polars-expr-filter"]], "polars.Expr.list.arg_max": [[447, "polars-expr-list-arg-max"]], "polars.Expr.is_nan": [[433, "polars-expr-is-nan"]], "polars.Expr.implode": [[421, "polars-expr-implode"]], "polars.Expr.fill_nan": [[407, "polars-expr-fill-nan"]], "polars.Expr.list.intersection": [[461, "polars-expr-list-intersection"]], "polars.Expr.is_finite": [[426, "polars-expr-is-finite"]], "polars.Expr.is_not_null": [[436, "polars-expr-is-not-null"]], "polars.Expr.list.contains": [[450, "polars-expr-list-contains"]], "polars.Expr.explode": [[405, "polars-expr-explode"]], "polars.Expr.kurtosis": [[440, "polars-expr-kurtosis"]], "polars.Expr.list.diff": [[453, "polars-expr-list-diff"]], "polars.Expr.dt.total_seconds": [[391, "polars-expr-dt-total-seconds"]], "polars.Expr.extend_constant": [[406, "polars-expr-extend-constant"]], "polars.Expr.list.any": [[446, "polars-expr-list-any"]], "polars.Expr.last": [[441, "polars-expr-last"]], "polars.Expr.eq": [[398, "polars-expr-eq"]], "polars.Expr.is_last": [[431, "polars-expr-is-last"]], "polars.Expr.dt.year": [[396, "polars-expr-dt-year"]], "polars.Expr.list.difference": [[454, "polars-expr-list-difference"]], "polars.Expr.dt.with_time_unit": [[395, "polars-expr-dt-with-time-unit"]], "polars.Expr.entropy": [[397, "polars-expr-entropy"]], "polars.Expr.dt.total_days": [[385, "polars-expr-dt-total-days"]], "polars.Expr.is_last_distinct": [[432, "polars-expr-is-last-distinct"]], "polars.Expr.floor": [[412, "polars-expr-floor"]], "polars.Expr.is_null": [[437, "polars-expr-is-null"]], "polars.Expr.floordiv": [[413, "polars-expr-floordiv"]], "polars.Expr.dt.weekday": [[394, "polars-expr-dt-weekday"]], "polars.Expr.is_not": [[434, "polars-expr-is-not"]], "polars.Expr.keep_name": [[439, "polars-expr-keep-name"]], "polars.Expr.ewm_std": [[401, "polars-expr-ewm-std"]], "polars.Expr.len": [[443, "polars-expr-len"]], "polars.Expr.dt.total_nanoseconds": [[390, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.list.explode": [[457, "polars-expr-list-explode"]], "polars.Expr.is_not_nan": [[435, "polars-expr-is-not-nan"]], "polars.Expr.is_between": [[424, "polars-expr-is-between"]], "polars.Expr.get": [[417, "polars-expr-get"]], "polars.Expr.list.count_match": [[451, "polars-expr-list-count-match"]], "polars.Expr.fill_null": [[408, "polars-expr-fill-null"]], "polars.Expr.forward_fill": [[414, "polars-expr-forward-fill"]], "polars.Expr.list.head": [[460, "polars-expr-list-head"]], "polars.Expr.head": [[420, "polars-expr-head"]], "polars.Expr.dt.week": [[393, "polars-expr-dt-week"]], "polars.Expr.list.eval": [[456, "polars-expr-list-eval"]], "polars.Expr.list.concat": [[449, "polars-expr-list-concat"]], "polars.Expr.list.all": [[445, "polars-expr-list-all"]], "polars.Expr.from_json": [[415, "polars-expr-from-json"]], "polars.Expr.ge": [[416, "polars-expr-ge"]], "polars.Expr.exclude": [[403, "polars-expr-exclude"]], "polars.Expr.list.get": [[459, "polars-expr-list-get"]], "polars.Expr.is_first": [[427, "polars-expr-is-first"]], "polars.Expr.exp": [[404, "polars-expr-exp"]], "polars.Expr.dt.combine": [[351, "polars-expr-dt-combine"]], "polars.Expr.dt.ordinal_day": [[375, "polars-expr-dt-ordinal-day"]], "polars.Expr.cummax": [[338, "polars-expr-cummax"]], "polars.Expr.cut": [[343, "polars-expr-cut"]], "polars.Expr.dt.convert_time_zone": [[352, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arg_unique": [[311, "polars-expr-arg-unique"]], "polars.Expr.cosh": [[334, "polars-expr-cosh"]], "polars.Expr.cat.get_categories": [[326, "polars-expr-cat-get-categories"]], "polars.Expr.dt.milliseconds": [[366, "polars-expr-dt-milliseconds"]], "polars.Expr.drop_nans": [[347, "polars-expr-drop-nans"]], "polars.Expr.dt.is_leap_year": [[361, "polars-expr-dt-is-leap-year"]], "polars.Expr.arg_min": [[308, "polars-expr-arg-min"]], "polars.Expr.dt.hours": [[360, "polars-expr-dt-hours"]], "polars.Expr.arr.sum": [[314, "polars-expr-arr-sum"]], "polars.Expr.dt.round": [[378, "polars-expr-dt-round"]], "polars.Expr.dt.month_end": [[370, "polars-expr-dt-month-end"]], "polars.Expr.dt.quarter": [[376, "polars-expr-dt-quarter"]], "polars.Expr.arg_sort": [[309, "polars-expr-arg-sort"]], "polars.Expr.bin.encode": [[320, "polars-expr-bin-encode"]], "polars.Expr.cummin": [[339, "polars-expr-cummin"]], "polars.Expr.clip": [[330, "polars-expr-clip"]], "polars.Expr.arg_true": [[310, "polars-expr-arg-true"]], "polars.Expr.dt.iso_year": [[362, "polars-expr-dt-iso-year"]], "polars.Expr.dt.month_start": [[371, "polars-expr-dt-month-start"]], "polars.Expr.cat.set_ordering": [[327, "polars-expr-cat-set-ordering"]], "polars.Expr.cumulative_eval": [[342, "polars-expr-cumulative-eval"]], "polars.Expr.cast": [[325, "polars-expr-cast"]], "polars.Expr.dt.time": [[382, "polars-expr-dt-time"]], "polars.Expr.dt.epoch": [[358, "polars-expr-dt-epoch"]], "polars.Expr.dt.timestamp": [[383, "polars-expr-dt-timestamp"]], "polars.Expr.dt.second": [[379, "polars-expr-dt-second"]], "polars.Expr.dt.microseconds": [[364, "polars-expr-dt-microseconds"]], "polars.Expr.cumsum": [[341, "polars-expr-cumsum"]], "polars.Expr.dt.date": [[353, "polars-expr-dt-date"]], "polars.Expr.backward_fill": [[317, "polars-expr-backward-fill"]], "polars.Expr.dt.strftime": [[381, "polars-expr-dt-strftime"]], "polars.Expr.dt.day": [[355, "polars-expr-dt-day"]], "polars.Expr.arr.to_list": [[315, "polars-expr-arr-to-list"]], "polars.Expr.arr.unique": [[316, "polars-expr-arr-unique"]], "polars.Expr.dt.dst_offset": [[357, "polars-expr-dt-dst-offset"]], "polars.Expr.bin.decode": [[319, "polars-expr-bin-decode"]], "polars.Expr.bin.contains": [[318, "polars-expr-bin-contains"]], "polars.Expr.diff": [[345, "polars-expr-diff"]], "polars.Expr.dt.seconds": [[380, "polars-expr-dt-seconds"]], "polars.Expr.dt.replace_time_zone": [[377, "polars-expr-dt-replace-time-zone"]], "polars.Expr.cumprod": [[340, "polars-expr-cumprod"]], "polars.Expr.dt.datetime": [[354, "polars-expr-dt-datetime"]], "polars.Expr.bin.ends_with": [[321, "polars-expr-bin-ends-with"]], "polars.Expr.drop_nulls": [[348, "polars-expr-drop-nulls"]], "polars.Expr.dt.offset_by": [[374, "polars-expr-dt-offset-by"]], "polars.Expr.arr.min": [[313, "polars-expr-arr-min"]], "polars.Expr.cbrt": [[328, "polars-expr-cbrt"]], "polars.Expr.dt.minutes": [[368, "polars-expr-dt-minutes"]], "polars.Expr.dot": [[346, "polars-expr-dot"]], "polars.Expr.dt.hour": [[359, "polars-expr-dt-hour"]], "polars.Expr.cache": [[324, "polars-expr-cache"]], "polars.Expr.dt.to_string": [[384, "polars-expr-dt-to-string"]], "polars.Expr.ceil": [[329, "polars-expr-ceil"]], "polars.Expr.dt.nanosecond": [[372, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.base_utc_offset": [[349, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.nanoseconds": [[373, "polars-expr-dt-nanoseconds"]], "polars.Expr.clip_min": [[332, "polars-expr-clip-min"]], "polars.Expr.cot": [[335, "polars-expr-cot"]], "polars.Expr.bottom_k": [[323, "polars-expr-bottom-k"]], "polars.Expr.count": [[336, "polars-expr-count"]], "polars.Expr.dt.cast_time_unit": [[350, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.max": [[312, "polars-expr-arr-max"]], "polars.Expr.cos": [[333, "polars-expr-cos"]], "polars.Expr.dt.month": [[369, "polars-expr-dt-month"]], "polars.Expr.cumcount": [[337, "polars-expr-cumcount"]], "polars.Expr.dt.minute": [[367, "polars-expr-dt-minute"]], "polars.Expr.degrees": [[344, "polars-expr-degrees"]], "polars.Expr.dt.days": [[356, "polars-expr-dt-days"]], "polars.Expr.bin.starts_with": [[322, "polars-expr-bin-starts-with"]], "polars.Expr.clip_max": [[331, "polars-expr-clip-max"]], "polars.Expr.dt.millisecond": [[365, "polars-expr-dt-millisecond"]], "polars.Expr.dt.microsecond": [[363, "polars-expr-dt-microsecond"]], "polars.DataFrame.height": [[188, "polars-dataframe-height"]], "polars.DataFrame.iter_slices": [[197, "polars-dataframe-iter-slices"]], "polars.DataFrame.replace_at_idx": [[220, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.explode": [[168, "polars-dataframe-explode"]], "polars.DataFrame.insert_at_idx": [[190, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.approx_unique": [[155, "polars-dataframe-approx-unique"]], "polars.DataFrame.groupby_rolling": [[185, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.group_by_dynamic": [[181, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.clone": [[159, "polars-dataframe-clone"]], "polars.DataFrame.pivot": [[214, "polars-dataframe-pivot"]], "polars.DataFrame.interpolate": [[191, "polars-dataframe-interpolate"]], "polars.DataFrame.n_chunks": [[209, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[210, "polars-dataframe-n-unique"]], "polars.DataFrame.melt": [[206, "polars-dataframe-melt"]], "polars.DataFrame.fold": [[175, "polars-dataframe-fold"]], "polars.DataFrame.frame_equal": [[176, "polars-dataframe-frame-equal"]], "polars.DataFrame.groupby": [[183, "polars-dataframe-groupby"]], "polars.DataFrame.row": [[223, "polars-dataframe-row"]], "polars.DataFrame.drop_in_place": [[164, "polars-dataframe-drop-in-place"]], "polars.DataFrame.clear": [[158, "polars-dataframe-clear"]], "polars.DataFrame.head": [[187, "polars-dataframe-head"]], "polars.DataFrame.product": [[215, "polars-dataframe-product"]], "polars.DataFrame.flags": [[174, "polars-dataframe-flags"]], "polars.DataFrame.limit": [[201, "polars-dataframe-limit"]], "polars.DataFrame.item": [[195, "polars-dataframe-item"]], "polars.DataFrame.groupby_dynamic": [[184, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.replace": [[219, "polars-dataframe-replace"]], "polars.DataFrame.glimpse": [[179, "polars-dataframe-glimpse"]], "polars.DataFrame.quantile": [[216, "polars-dataframe-quantile"]], "polars.DataFrame.set_sorted": [[230, "polars-dataframe-set-sorted"]], "polars.DataFrame.null_count": [[211, "polars-dataframe-null-count"]], "polars.DataFrame.rename": [[218, "polars-dataframe-rename"]], "polars.DataFrame.hash_rows": [[186, "polars-dataframe-hash-rows"]], "polars.DataFrame.mean": [[204, "polars-dataframe-mean"]], "polars.DataFrame.drop_nulls": [[165, "polars-dataframe-drop-nulls"]], "polars.DataFrame.drop": [[163, "polars-dataframe-drop"]], "polars.DataFrame.min": [[208, "polars-dataframe-min"]], "polars.DataFrame.pipe": [[213, "polars-dataframe-pipe"]], "polars.DataFrame.join": [[198, "polars-dataframe-join"]], "polars.DataFrame.get_columns": [[178, "polars-dataframe-get-columns"]], "polars.DataFrame.map_rows": [[202, "polars-dataframe-map-rows"]], "polars.DataFrame.columns": [[160, "polars-dataframe-columns"]], "polars.DataFrame.get_column": [[177, "polars-dataframe-get-column"]], "polars.DataFrame.cast": [[157, "polars-dataframe-cast"]], "polars.DataFrame.group_by_rolling": [[182, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.filter": [[172, "polars-dataframe-filter"]], "polars.DataFrame.rechunk": [[217, "polars-dataframe-rechunk"]], "polars.DataFrame.extend": [[169, "polars-dataframe-extend"]], "polars.DataFrame.select_seq": [[229, "polars-dataframe-select-seq"]], "polars.DataFrame.max": [[203, "polars-dataframe-max"]], "polars.DataFrame.describe": [[162, "polars-dataframe-describe"]], "polars.DataFrame.schema": [[227, "polars-dataframe-schema"]], "polars.DataFrame.estimated_size": [[167, "polars-dataframe-estimated-size"]], "polars.DataFrame.corr": [[161, "polars-dataframe-corr"]], "polars.DataFrame.dtypes": [[166, "polars-dataframe-dtypes"]], "polars.DataFrame.is_empty": [[193, "polars-dataframe-is-empty"]], "polars.DataFrame.reverse": [[221, "polars-dataframe-reverse"]], "polars.DataFrame.select": [[228, "polars-dataframe-select"]], "polars.DataFrame.fill_nan": [[170, "polars-dataframe-fill-nan"]], "polars.DataFrame.fill_null": [[171, "polars-dataframe-fill-null"]], "polars.DataFrame.find_idx_by_name": [[173, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.hstack": [[189, "polars-dataframe-hstack"]], "polars.DataFrame.join_asof": [[199, "polars-dataframe-join-asof"]], "polars.DataFrame.bottom_k": [[156, "polars-dataframe-bottom-k"]], "polars.DataFrame.lazy": [[200, "polars-dataframe-lazy"]], "polars.DataFrame.is_duplicated": [[192, "polars-dataframe-is-duplicated"]], "polars.DataFrame.sample": [[226, "polars-dataframe-sample"]], "polars.DataFrame.rolling": [[222, "polars-dataframe-rolling"]], "polars.DataFrame.rows": [[224, "polars-dataframe-rows"]], "polars.DataFrame.partition_by": [[212, "polars-dataframe-partition-by"]], "polars.DataFrame.median": [[205, "polars-dataframe-median"]], "polars.DataFrame.iter_rows": [[196, "polars-dataframe-iter-rows"]], "polars.DataFrame.rows_by_key": [[225, "polars-dataframe-rows-by-key"]], "polars.DataFrame.approx_n_unique": [[154, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.merge_sorted": [[207, "polars-dataframe-merge-sorted"]], "polars.DataFrame.is_unique": [[194, "polars-dataframe-is-unique"]], "polars.DataFrame.group_by": [[180, "polars-dataframe-group-by"]], "polars.DataFrame.to_arrow": [[241, "polars-dataframe-to-arrow"]], "polars.DataFrame.vstack": [[258, "polars-dataframe-vstack"]], "polars.DataFrame.sort": [[236, "polars-dataframe-sort"]], "polars.DataFrame.shift": [[232, "polars-dataframe-shift"]], "polars.Expr.arccosh": [[302, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.__iter__": [[263, "polars-dataframe-group-by-groupby-iter"]], "polars.Expr.arccos": [[301, "polars-expr-arccos"]], "polars.dataframe.group_by.GroupBy.head": [[269, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.abs": [[291, "polars-expr-abs"]], "polars.DataFrame.shape": [[231, "polars-dataframe-shape"]], "polars.dataframe.group_by.GroupBy.all": [[265, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.n_unique": [[276, "polars-dataframe-group-by-groupby-n-unique"]], "polars.DataFrame.std": [[237, "polars-dataframe-std"]], "polars.Expr.append": [[298, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.first": [[268, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.quantile": [[277, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arctanh": [[306, "polars-expr-arctanh"]], "polars.dataframe.group_by.GroupBy.agg": [[264, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.to_struct": [[249, "polars-dataframe-to-struct"]], "polars.DataFrame.to_init_repr": [[245, "polars-dataframe-to-init-repr"]], "polars.dataframe.group_by.GroupBy.map_groups": [[271, "polars-dataframe-group-by-groupby-map-groups"]], "polars.DataFrame.with_columns": [[260, "polars-dataframe-with-columns"]], "polars.Expr.arcsin": [[303, "polars-expr-arcsin"]], "polars.DataFrame.unstack": [[254, "polars-dataframe-unstack"]], "polars.dataframe.group_by.GroupBy.sum": [[278, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.approx_n_unique": [[300, "polars-expr-approx-n-unique"]], "polars.DataFrame.to_numpy": [[246, "polars-dataframe-to-numpy"]], "polars.dataframe.group_by.GroupBy.tail": [[279, "polars-dataframe-group-by-groupby-tail"]], "Exceptions": [[289, "exceptions"]], "polars.DataFrame.upsample": [[256, "polars-dataframe-upsample"]], "polars.DataFrame.shift_and_fill": [[233, "polars-dataframe-shift-and-fill"]], "polars.dataframe.group_by.GroupBy.median": [[274, "polars-dataframe-group-by-groupby-median"]], "polars.DataFrame.to_dicts": [[243, "polars-dataframe-to-dicts"]], "polars.DataFrame.with_columns_seq": [[261, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.take_every": [[240, "polars-dataframe-take-every"]], "polars.Expr.any": [[297, "polars-expr-any"]], "polars.Expr.arctan": [[305, "polars-expr-arctan"]], "polars.DataFrame.unnest": [[253, "polars-dataframe-unnest"]], "polars.Expr.alias": [[294, "polars-expr-alias"]], "polars.Expr.all": [[295, "polars-expr-all"]], "polars.Expr.add": [[292, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.min": [[275, "polars-dataframe-group-by-groupby-min"]], "polars.DataFrame.tail": [[239, "polars-dataframe-tail"]], "polars.DataFrame.top_k": [[250, "polars-dataframe-top-k"]], "polars.DataFrame.to_dict": [[242, "polars-dataframe-to-dict"]], "polars.Expr.apply": [[299, "polars-expr-apply"]], "polars.DataFrame.to_pandas": [[247, "polars-dataframe-to-pandas"]], "polars.DataFrame.width": [[259, "polars-dataframe-width"]], "polars.Expr.arcsinh": [[304, "polars-expr-arcsinh"]], "polars.DataFrame.unique": [[252, "polars-dataframe-unique"]], "polars.dataframe.group_by.GroupBy.count": [[267, "polars-dataframe-group-by-groupby-count"]], "polars.DataFrame.with_row_count": [[262, "polars-dataframe-with-row-count"]], "DataFrame": [[285, "dataframe"]], "polars.Expr.and_": [[296, "polars-expr-and"]], "polars.DataFrame.sum": [[238, "polars-dataframe-sum"]], "polars.DataFrame.to_dummies": [[244, "polars-dataframe-to-dummies"]], "polars.DataFrame.shrink_to_fit": [[234, "polars-dataframe-shrink-to-fit"]], "polars.dataframe.group_by.GroupBy.last": [[270, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.max": [[272, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.mean": [[273, "polars-dataframe-group-by-groupby-mean"]], "polars.DataFrame.update": [[255, "polars-dataframe-update"]], "polars.dataframe.group_by.GroupBy.apply": [[266, "polars-dataframe-group-by-groupby-apply"]], "Data types": [[288, "data-types"]], "Nested": [[288, "nested"]], "Other": [[288, "other"]], "polars.Expr.agg_groups": [[293, "polars-expr-agg-groups"]], "polars.DataFrame.transpose": [[251, "polars-dataframe-transpose"]], "polars.DataFrame.slice": [[235, "polars-dataframe-slice"]], "polars.Expr.arg_max": [[307, "polars-expr-arg-max"]], "polars.DataFrame.var": [[257, "polars-dataframe-var"]], "polars.DataFrame.to_series": [[248, "polars-dataframe-to-series"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "float32 (class in polars)": [[51, "polars.Float32"]], "__init__() (polars.float32 method)": [[51, "polars.Float32.__init__"]], "float64 (class in polars)": [[52, "polars.Float64"]], "__init__() (polars.float64 method)": [[52, "polars.Float64.__init__"]], "int16 (class in polars)": [[53, "polars.Int16"]], "__init__() (polars.int16 method)": [[53, "polars.Int16.__init__"]], "int32 (class in polars)": [[54, "polars.Int32"]], "__init__() (polars.int32 method)": [[54, "polars.Int32.__init__"]], "int64 (class in polars)": [[55, "polars.Int64"]], "__init__() (polars.int64 method)": [[55, "polars.Int64.__init__"]], "int8 (class in polars)": [[56, "polars.Int8"]], "__init__() (polars.int8 method)": [[56, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[57, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[60, "polars.List"]], "__init__() (polars.list method)": [[60, "polars.List.__init__"]], "null (class in polars)": [[61, "polars.Null"]], "__init__() (polars.null method)": [[61, "polars.Null.__init__"]], "object (class in polars)": [[62, "polars.Object"]], "__init__() (polars.object method)": [[62, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[63, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[64, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[65, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[67, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[68, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[69, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[69, "polars.StringCache.__init__"]], "struct (class in polars)": [[70, "polars.Struct"]], "__init__() (polars.struct method)": [[70, "polars.Struct.__init__"]], "time (class in polars)": [[71, "polars.Time"]], "__init__() (polars.time method)": [[71, "polars.Time.__init__"]], "uint16 (class in polars)": [[72, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[72, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[73, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[73, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[74, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[74, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[75, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[75, "polars.UInt8.__init__"]], "unknown (class in polars)": [[76, "polars.Unknown"]], "__init__() (polars.unknown method)": [[76, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[77, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[77, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[78, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[79, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[80, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[81, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[82, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[83, "polars.build_info"]], "collect_all() (in module polars)": [[84, "polars.collect_all"]], "collect_all_async() (in module polars)": [[85, "polars.collect_all_async"]], "concat() (in module polars)": [[86, "polars.concat"]], "disable_string_cache() (in module polars)": [[87, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[88, "polars.enable_string_cache"]], "arrowerror": [[89, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[90, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[91, "polars.exceptions.ComputeError"]], "duplicateerror": [[92, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[94, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[95, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[96, "polars.exceptions.PolarsPanicError"]], "rowserror": [[97, "polars.exceptions.RowsError"]], "schemaerror": [[98, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[99, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[100, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[101, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[102, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[103, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[104, "polars.from_dataframe"]], "from_dict() (in module polars)": [[105, "polars.from_dict"]], "from_dicts() (in module polars)": [[106, "polars.from_dicts"]], "from_numpy() (in module polars)": [[107, "polars.from_numpy"]], "from_pandas() (in module polars)": [[108, "polars.from_pandas"]], "from_records() (in module polars)": [[109, "polars.from_records"]], "from_repr() (in module polars)": [[110, "polars.from_repr"]], "get_index_type() (in module polars)": [[111, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[112, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[113, "polars.read_avro"]], "read_csv() (in module polars)": [[114, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[115, "polars.read_csv_batched"]], "read_database() (in module polars)": [[116, "polars.read_database"]], "read_database_uri() (in module polars)": [[117, "polars.read_database_uri"]], "read_delta() (in module polars)": [[118, "polars.read_delta"]], "read_excel() (in module polars)": [[119, "polars.read_excel"]], "read_ipc() (in module polars)": [[120, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[121, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[122, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[123, "polars.read_json"]], "read_ndjson() (in module polars)": [[124, "polars.read_ndjson"]], "read_ods() (in module polars)": [[125, "polars.read_ods"]], "read_parquet() (in module polars)": [[126, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[127, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[128, "polars.scan_csv"]], "scan_delta() (in module polars)": [[129, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[130, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[131, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[132, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[133, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[134, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[135, "polars.set_random_seed"]], "show_versions() (in module polars)": [[136, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[137, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[138, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[139, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[141, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[141, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[142, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[148, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[149, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[152, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[153, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[154, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[155, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[156, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[157, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[158, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[159, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[160, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[161, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[162, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[163, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[164, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[165, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[166, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[167, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[168, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[169, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[170, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[171, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[172, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[173, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[174, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[175, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[176, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[177, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[178, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[179, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[180, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[181, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[182, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[183, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[184, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[185, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[186, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[187, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[188, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[189, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[190, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[191, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[192, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[193, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[194, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[195, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[196, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[197, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[198, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[199, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[200, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[201, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[202, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[203, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[204, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[205, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[206, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[207, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[208, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[209, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[210, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[211, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[212, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[213, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[214, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[215, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[216, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[217, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[218, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[219, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[220, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[221, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[222, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[223, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[224, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[225, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[226, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[227, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[228, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[229, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[230, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[231, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[232, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[233, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[234, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[235, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[236, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[237, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[238, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[239, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[240, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[241, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[242, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[243, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[244, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[245, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[246, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[247, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[248, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[249, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[250, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[251, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[252, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[253, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[254, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[255, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[256, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[257, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[258, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[259, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[260, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[261, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[262, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[263, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[264, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[265, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[266, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[267, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[268, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[269, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[270, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[271, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[272, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[274, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[275, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[291, "polars.Expr.abs"]], "add() (polars.expr method)": [[292, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[293, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[294, "polars.Expr.alias"]], "all() (polars.expr method)": [[295, "polars.Expr.all"]], "and_() (polars.expr method)": [[296, "polars.Expr.and_"]], "any() (polars.expr method)": [[297, "polars.Expr.any"]], "append() (polars.expr method)": [[298, "polars.Expr.append"]], "apply() (polars.expr method)": [[299, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[300, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[301, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[302, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[303, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[304, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[305, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[306, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[307, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[308, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[309, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[310, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[311, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[312, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[313, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[314, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[315, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[316, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[317, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[318, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[319, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[320, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[321, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[322, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[323, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[324, "polars.Expr.cache"]], "cast() (polars.expr method)": [[325, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[326, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[327, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[328, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[329, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[330, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[331, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[332, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[333, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[334, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[335, "polars.Expr.cot"]], "count() (polars.expr method)": [[336, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[337, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[338, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[339, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[340, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[341, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[342, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[343, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[344, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[345, "polars.Expr.diff"]], "dot() (polars.expr method)": [[346, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[347, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[348, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[349, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[350, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[351, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[352, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[353, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[354, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[355, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[356, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[357, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[358, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[359, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[360, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[361, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[362, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[363, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[364, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[365, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[366, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[367, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[368, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[369, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[370, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[371, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[372, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[373, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[374, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[375, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[376, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[377, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[378, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[379, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[380, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[381, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[382, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[383, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[384, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[385, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[386, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[387, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[388, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[389, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[390, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[391, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[392, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[393, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[394, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[395, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[396, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[397, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[398, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[399, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[400, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[401, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[402, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[403, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[404, "polars.Expr.exp"]], "explode() (polars.expr method)": [[405, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[406, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[407, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[408, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[409, "polars.Expr.filter"]], "first() (polars.expr method)": [[410, "polars.Expr.first"]], "flatten() (polars.expr method)": [[411, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[412, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[413, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[414, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[415, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[416, "polars.Expr.ge"]], "get() (polars.expr method)": [[417, "polars.Expr.get"]], "gt() (polars.expr method)": [[418, "polars.Expr.gt"]], "hash() (polars.expr method)": [[419, "polars.Expr.hash"]], "head() (polars.expr method)": [[420, "polars.Expr.head"]], "implode() (polars.expr method)": [[421, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[422, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[423, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[424, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[425, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[426, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[427, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[428, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[429, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[430, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[431, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[432, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[433, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[434, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[435, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[436, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[437, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[438, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[439, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[440, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[441, "polars.Expr.last"]], "le() (polars.expr method)": [[442, "polars.Expr.le"]], "len() (polars.expr method)": [[443, "polars.Expr.len"]], "limit() (polars.expr method)": [[444, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[445, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[446, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[447, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[448, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[449, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[450, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[451, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[452, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[453, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[454, "polars.Expr.list.difference"]], "drop_nulls() (polars.expr.list method)": [[455, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[456, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[457, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[458, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[459, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[460, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[461, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[462, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[463, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[464, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[465, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[466, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[467, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[468, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[469, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[470, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[471, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[472, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[473, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[474, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[475, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[476, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[477, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[478, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[479, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[480, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[481, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[482, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[483, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[484, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[485, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[486, "polars.Expr.log"]], "log10() (polars.expr method)": [[487, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[488, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[489, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[490, "polars.Expr.lt"]], "map() (polars.expr method)": [[491, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[492, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[493, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[494, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[495, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[496, "polars.Expr.max"]], "mean() (polars.expr method)": [[497, "polars.Expr.mean"]], "median() (polars.expr method)": [[498, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[499, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[500, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[501, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[502, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[503, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[504, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[505, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[506, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[507, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[508, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[509, "polars.Expr.min"]], "mod() (polars.expr method)": [[510, "polars.Expr.mod"]], "mode() (polars.expr method)": [[511, "polars.Expr.mode"]], "mul() (polars.expr method)": [[512, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[513, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[514, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[515, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[516, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[517, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[518, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[519, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[520, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[521, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[522, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[523, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[524, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[525, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[526, "polars.Expr.or_"]], "over() (polars.expr method)": [[527, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[528, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[529, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[530, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[531, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[532, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[533, "polars.Expr.prefix"]], "product() (polars.expr method)": [[534, "polars.Expr.product"]], "qcut() (polars.expr method)": [[535, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[536, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[537, "polars.Expr.radians"]], "rank() (polars.expr method)": [[538, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[539, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[540, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[541, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[542, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[543, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[544, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[545, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[546, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[547, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[548, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[549, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[550, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[551, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[552, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[553, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[554, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[555, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[556, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[557, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[558, "polars.Expr.round"]], "sample() (polars.expr method)": [[559, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[560, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[561, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[562, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[563, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[564, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[565, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[566, "polars.Expr.sign"]], "sin() (polars.expr method)": [[567, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[568, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[569, "polars.Expr.skew"]], "slice() (polars.expr method)": [[570, "polars.Expr.slice"]], "sort() (polars.expr method)": [[571, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[572, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[573, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[574, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[575, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[576, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[577, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[578, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[579, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[580, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[581, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[582, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[583, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[584, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[585, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[586, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[587, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[588, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[589, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[590, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[591, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[592, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[593, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[594, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[595, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[596, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[597, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[598, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[599, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[600, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[601, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[602, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[603, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[604, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[605, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[606, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[607, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[608, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[609, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[610, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[611, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[612, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[613, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[614, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[615, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[616, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[617, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[618, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[619, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[620, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[621, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[622, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[623, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[624, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[625, "polars.Expr.sum"]], "tail() (polars.expr method)": [[626, "polars.Expr.tail"]], "take() (polars.expr method)": [[627, "polars.Expr.take"]], "take_every() (polars.expr method)": [[628, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[629, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[630, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[631, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[632, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[633, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[634, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[635, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[636, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[637, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[638, "polars.Expr.var"]], "where() (polars.expr method)": [[639, "polars.Expr.where"]], "xor() (polars.expr method)": [[640, "polars.Expr.xor"]], "all() (in module polars)": [[641, "polars.all"]], "all_horizontal() (in module polars)": [[642, "polars.all_horizontal"]], "any() (in module polars)": [[643, "polars.any"]], "any_horizontal() (in module polars)": [[644, "polars.any_horizontal"]], "apply() (in module polars)": [[645, "polars.apply"]], "approx_n_unique() (in module polars)": [[646, "polars.approx_n_unique"]], "arange() (in module polars)": [[647, "polars.arange"]], "arctan2() (in module polars)": [[648, "polars.arctan2"]], "arctan2d() (in module polars)": [[649, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[650, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[651, "polars.arg_where"]], "avg() (in module polars)": [[652, "polars.avg"]], "coalesce() (in module polars)": [[653, "polars.coalesce"]], "concat_list() (in module polars)": [[654, "polars.concat_list"]], "concat_str() (in module polars)": [[655, "polars.concat_str"]], "corr() (in module polars)": [[656, "polars.corr"]], "count() (in module polars)": [[657, "polars.count"]], "cov() (in module polars)": [[658, "polars.cov"]], "cumfold() (in module polars)": [[659, "polars.cumfold"]], "cumreduce() (in module polars)": [[660, "polars.cumreduce"]], "cumsum() (in module polars)": [[661, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[662, "polars.cumsum_horizontal"]], "date() (in module polars)": [[663, "polars.date"]], "date_range() (in module polars)": [[664, "polars.date_range"]], "date_ranges() (in module polars)": [[665, "polars.date_ranges"]], "datetime() (in module polars)": [[666, "polars.datetime"]], "datetime_range() (in module polars)": [[667, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[668, "polars.datetime_ranges"]], "duration() (in module polars)": [[669, "polars.duration"]], "element() (in module polars)": [[670, "polars.element"]], "exclude() (in module polars)": [[671, "polars.exclude"]], "first() (in module polars)": [[672, "polars.first"]], "fold() (in module polars)": [[673, "polars.fold"]], "format() (in module polars)": [[674, "polars.format"]], "from_epoch() (in module polars)": [[675, "polars.from_epoch"]], "groups() (in module polars)": [[676, "polars.groups"]], "head() (in module polars)": [[677, "polars.head"]], "implode() (in module polars)": [[678, "polars.implode"]], "int_range() (in module polars)": [[679, "polars.int_range"]], "int_ranges() (in module polars)": [[680, "polars.int_ranges"]], "last() (in module polars)": [[681, "polars.last"]], "lit() (in module polars)": [[682, "polars.lit"]], "map() (in module polars)": [[683, "polars.map"]], "map_batches() (in module polars)": [[684, "polars.map_batches"]], "map_groups() (in module polars)": [[685, "polars.map_groups"]], "max() (in module polars)": [[686, "polars.max"]], "max_horizontal() (in module polars)": [[687, "polars.max_horizontal"]], "mean() (in module polars)": [[688, "polars.mean"]], "median() (in module polars)": [[689, "polars.median"]], "min() (in module polars)": [[690, "polars.min"]], "min_horizontal() (in module polars)": [[691, "polars.min_horizontal"]], "n_unique() (in module polars)": [[692, "polars.n_unique"]], "ones() (in module polars)": [[693, "polars.ones"]], "quantile() (in module polars)": [[694, "polars.quantile"]], "reduce() (in module polars)": [[695, "polars.reduce"]], "repeat() (in module polars)": [[696, "polars.repeat"]], "rolling_corr() (in module polars)": [[697, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[698, "polars.rolling_cov"]], "select() (in module polars)": [[699, "polars.select"]], "sql_expr() (in module polars)": [[700, "polars.sql_expr"]], "std() (in module polars)": [[701, "polars.std"]], "struct() (in module polars)": [[702, "polars.struct"]], "sum() (in module polars)": [[703, "polars.sum"]], "sum_horizontal() (in module polars)": [[704, "polars.sum_horizontal"]], "tail() (in module polars)": [[705, "polars.tail"]], "time() (in module polars)": [[706, "polars.time"]], "time_range() (in module polars)": [[707, "polars.time_range"]], "time_ranges() (in module polars)": [[708, "polars.time_ranges"]], "var() (in module polars)": [[709, "polars.var"]], "when() (in module polars)": [[710, "polars.when"]], "zeros() (in module polars)": [[711, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[735, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[736, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[737, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[738, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[739, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[740, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[741, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[742, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[743, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[744, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[745, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[746, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[747, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[748, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[749, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[750, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[751, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[752, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[753, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[754, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[755, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[756, "polars.LazyFrame.from_json"]], "group_by() (polars.lazyframe method)": [[757, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[758, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[759, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[760, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[761, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[762, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[763, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[764, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[765, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[766, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[767, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[768, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[769, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[770, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[771, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[772, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[773, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[774, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[775, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[776, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[777, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[778, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[779, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[780, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[781, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[782, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[783, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[784, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[785, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[786, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[787, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[788, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[789, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[790, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[791, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[792, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[793, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[794, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[795, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[796, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[797, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[798, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[799, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[800, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[801, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[802, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[803, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[804, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[805, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[806, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[807, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[808, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[809, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[810, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[811, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[812, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[813, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[814, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[815, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[816, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[817, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[818, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[819, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[820, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[821, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[822, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[823, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[824, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[825, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[826, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[827, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[834, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[834, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[834, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[834, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[834, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[834, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[834, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[834, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[834, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[834, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[834, "polars.selectors.first"]], "float() (in module polars.selectors)": [[834, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[834, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[834, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[834, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[834, "polars.selectors.matches"]], "module": [[834, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[834, "polars.selectors.numeric"]], "polars.selectors": [[834, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[834, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[834, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[834, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[834, "polars.selectors.time"]], "abs() (polars.series method)": [[836, "polars.Series.abs"]], "alias() (polars.series method)": [[837, "polars.Series.alias"]], "all() (polars.series method)": [[838, "polars.Series.all"]], "any() (polars.series method)": [[839, "polars.Series.any"]], "append() (polars.series method)": [[840, "polars.Series.append"]], "apply() (polars.series method)": [[841, "polars.Series.apply"]], "arccos() (polars.series method)": [[842, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[843, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[844, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[845, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[846, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[847, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[848, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[849, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[850, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[851, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[852, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[853, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[854, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[855, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[856, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[857, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[858, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[859, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[860, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[861, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[862, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[863, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[864, "polars.Series.cast"]], "cat (polars.series attribute)": [[865, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[866, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[867, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[868, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[869, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[870, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[871, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[872, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[873, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[874, "polars.Series.clear"]], "clip() (polars.series method)": [[875, "polars.Series.clip"]], "clip_max() (polars.series method)": [[876, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[877, "polars.Series.clip_min"]], "clone() (polars.series method)": [[878, "polars.Series.clone"]], "cos() (polars.series method)": [[879, "polars.Series.cos"]], "cosh() (polars.series method)": [[880, "polars.Series.cosh"]], "cot() (polars.series method)": [[881, "polars.Series.cot"]], "cummax() (polars.series method)": [[882, "polars.Series.cummax"]], "cummin() (polars.series method)": [[883, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[884, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[885, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[886, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[887, "polars.Series.cut"]], "describe() (polars.series method)": [[888, "polars.Series.describe"]], "diff() (polars.series method)": [[889, "polars.Series.diff"]], "dot() (polars.series method)": [[890, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[891, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[892, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[893, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[894, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[895, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[896, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[897, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[898, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[899, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[900, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[901, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[902, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[903, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[904, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[905, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[906, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[907, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[908, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[909, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[910, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[911, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[912, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[913, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[914, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[915, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[916, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[917, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[918, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[919, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[920, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[921, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[922, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[923, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[924, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[925, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[926, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[927, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[928, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[929, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[930, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[931, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[932, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[933, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[934, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[935, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[936, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[937, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[938, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[939, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[940, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[941, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[942, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[943, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[944, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[945, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[946, "polars.Series.dtype"]], "entropy() (polars.series method)": [[947, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[948, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[949, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[950, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[951, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[952, "polars.Series.exp"]], "explode() (polars.series method)": [[953, "polars.Series.explode"]], "extend() (polars.series method)": [[954, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[955, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[956, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[957, "polars.Series.fill_null"]], "filter() (polars.series method)": [[958, "polars.Series.filter"]], "flags (polars.series attribute)": [[959, "polars.Series.flags"]], "floor() (polars.series method)": [[960, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[961, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[962, "polars.Series.has_validity"]], "hash() (polars.series method)": [[963, "polars.Series.hash"]], "head() (polars.series method)": [[964, "polars.Series.head"]], "hist() (polars.series method)": [[965, "polars.Series.hist"]], "implode() (polars.series method)": [[966, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[967, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[968, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[969, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[970, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[971, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[972, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[973, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[974, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[975, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[976, "polars.Series.is_float"]], "is_in() (polars.series method)": [[977, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[978, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[979, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[980, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[981, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[982, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[983, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[984, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[985, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[986, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[987, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[988, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[989, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[990, "polars.Series.is_utf8"]], "item() (polars.series method)": [[991, "polars.Series.item"]], "kurtosis() (polars.series method)": [[992, "polars.Series.kurtosis"]], "len() (polars.series method)": [[993, "polars.Series.len"]], "limit() (polars.series method)": [[994, "polars.Series.limit"]], "list (polars.series attribute)": [[995, "polars.Series.list"]], "all() (polars.series.list method)": [[996, "polars.Series.list.all"]], "any() (polars.series.list method)": [[997, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[998, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[999, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1000, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1001, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1002, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1003, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1004, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[1005, "polars.Series.list.difference"]], "drop_nulls() (polars.series.list method)": [[1006, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1007, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1008, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1009, "polars.Series.list.first"]], "get() (polars.series.list method)": [[1010, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1011, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[1012, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[1013, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1014, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1015, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1016, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1017, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1018, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1019, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1020, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1021, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1022, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1023, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1024, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1025, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1026, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1027, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1028, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1029, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[1030, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[1031, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1032, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1033, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1034, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[1035, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[1036, "polars.Series.list.unique"]], "log() (polars.series method)": [[1037, "polars.Series.log"]], "log10() (polars.series method)": [[1038, "polars.Series.log10"]], "log1p() (polars.series method)": [[1039, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1040, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1041, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1042, "polars.Series.map_elements"]], "max() (polars.series method)": [[1043, "polars.Series.max"]], "mean() (polars.series method)": [[1044, "polars.Series.mean"]], "median() (polars.series method)": [[1045, "polars.Series.median"]], "min() (polars.series method)": [[1046, "polars.Series.min"]], "mode() (polars.series method)": [[1047, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1048, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1049, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1050, "polars.Series.name"]], "nan_max() (polars.series method)": [[1051, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1052, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1053, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1054, "polars.Series.not_"]], "null_count() (polars.series method)": [[1055, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1056, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1057, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1058, "polars.Series.peak_min"]], "product() (polars.series method)": [[1059, "polars.Series.product"]], "qcut() (polars.series method)": [[1060, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1061, "polars.Series.quantile"]], "rank() (polars.series method)": [[1062, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1063, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1064, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1065, "polars.Series.rename"]], "reshape() (polars.series method)": [[1066, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1067, "polars.Series.reverse"]], "rle() (polars.series method)": [[1068, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1069, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1070, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1071, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1072, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1073, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1074, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1075, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1076, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1077, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1078, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1079, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1080, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1081, "polars.Series.round"]], "sample() (polars.series method)": [[1082, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[1083, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1084, "polars.Series.series_equal"]], "set() (polars.series method)": [[1085, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1086, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1087, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1088, "polars.Series.shape"]], "shift() (polars.series method)": [[1089, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1090, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1091, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1092, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1093, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1094, "polars.Series.sign"]], "sin() (polars.series method)": [[1095, "polars.Series.sin"]], "sinh() (polars.series method)": [[1096, "polars.Series.sinh"]], "skew() (polars.series method)": [[1097, "polars.Series.skew"]], "slice() (polars.series method)": [[1098, "polars.Series.slice"]], "sort() (polars.series method)": [[1099, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1100, "polars.Series.sqrt"]], "std() (polars.series method)": [[1101, "polars.Series.std"]], "str (polars.series attribute)": [[1102, "polars.Series.str"]], "concat() (polars.series.str method)": [[1103, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1104, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1105, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1106, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1107, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1108, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1109, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1110, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1111, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1112, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1113, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1114, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1115, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1116, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1117, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1118, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1119, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1120, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1121, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1122, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1123, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1124, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1125, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1126, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1127, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1128, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1129, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1130, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1131, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1132, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1133, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1134, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1135, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1136, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1137, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1138, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1139, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1140, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1141, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1142, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1143, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1144, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1145, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1146, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1147, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1148, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1149, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1150, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1151, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1152, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1153, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1154, "polars.Series.sum"]], "tail() (polars.series method)": [[1155, "polars.Series.tail"]], "take() (polars.series method)": [[1156, "polars.Series.take"]], "take_every() (polars.series method)": [[1157, "polars.Series.take_every"]], "tan() (polars.series method)": [[1158, "polars.Series.tan"]], "tanh() (polars.series method)": [[1159, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1160, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1161, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1162, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1163, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1164, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1165, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1166, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1167, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1168, "polars.Series.top_k"]], "unique() (polars.series method)": [[1169, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1170, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1171, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1172, "polars.Series.value_counts"]], "var() (polars.series method)": [[1173, "polars.Series.var"]], "view() (polars.series method)": [[1174, "polars.Series.view"]], "zip_with() (polars.series method)": [[1175, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1191, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1191, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1191, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1191, "polars.SQLContext.__init__"]]}})